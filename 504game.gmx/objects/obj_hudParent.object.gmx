<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-559</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.drawEnable = 0;
dwidth = ds_map_find_value(global.roomInt , "dwidth");
dheight = ds_map_find_value(global.roomInt , "dheight");

xview = view_xview[0];
yview = view_yview[0];
vwidth = view_wview[0];
vheight = view_hview[0];

obj_name = object_get_name(object_index);

//global.userLeaderboardEnable = true;
//global.userBadgeEnable = true;
//global.userFeedbackEnable = true;
global.userPointEnable = true;
global.userProgressEnable = true;
global.hudID[0] = 0;

scale1 = 0.85;

if(1140/vwidth &gt; 720/vheight)
{
    scale2_x = vwidth/1140;
    scale2_y = 1;
}
else
{
    scale2_y = vheight/720;
    scale2_x = 1;
}

scale = scale1 * scale2_x * scale2_y;

spr_width_leaderboard   = scale*sprite_get_width(spr_leaderboard_hud);
spr_height_leaderboard  = scale*sprite_get_height(spr_leaderboard_hud);

spr_width_badge         = scale*sprite_get_width(spr_badge_hud);
spr_height_badge        = scale*sprite_get_height(spr_badge_hud);

spr_width_setting       = /*scale*/0.85*sprite_get_width(spr_setting_hud);
spr_height_setting      = /*scale*/0.85*sprite_get_height(spr_setting_hud);

spr_width_dictionary    = /*scale*/0.85*sprite_get_width(spr_dictionary_hud);
spr_height_dictionary   = /*scale*/0.85*sprite_get_height(spr_dictionary_hud);

spr_width_map           = scale1*sprite_get_width(spr_map_hud);
spr_height_map          = scale1*sprite_get_height(spr_map_hud);

spr_width_exam          = scale1*sprite_get_width(spr_exam_hud);
spr_height_exam         = scale1*sprite_get_height(spr_exam_hud);

spr_width_questionnarie = scale1*sprite_get_width(spr_questionnarie_hud);
spr_height_questionnarie= scale1*sprite_get_height(spr_questionnarie_hud);

spr_width_progressBar   = scale1*sprite_get_width(spr_progress_1);
spr_height_progressBar  = scale1*sprite_get_height(spr_progress_1);

///////////////////  QUESTIONNARIE  ///////////////////
global.userPersonality = "intj"

if(string_length(global.userPersonality) &lt; 4)
{
    if(room == room_levelSelection)
    {
        margin_x = spr_width_questionnarie/2 + 20;
        margin_y = vheight/2;
        var questionnarie =instance_create(xview +(1140-margin_x)*vwidth/1140 , yview + margin_y , obj_questionarie);
        questionnarie.type = "questionnarie1";
        {questionnarie.off = 0;   questionnarie.can_press = 1;}
    
        //questionnarie.off = 0; 
        //questionnarie.can_press = 1;
        questionnarie._x = (1140-margin_x)*vwidth/1140;
        questionnarie._y = margin_y;
        questionnarie.scale = scale;
        global.hudID[array_length_1d(global.hudID)] = questionnarie.id;  
    }
}



if((string_length(global.userPersonality) == 4))
{
///////////////////////  POINT : enable / disable  //////////////////////
if(global.userPointEnable == true)
{
    var point = instance_create(xview + (220)  ,  yview+(105)  ,  obj_showScore);
    point.type = "point";
    point.off = 1;
    point._x = xview + 220;
    point.scale = scale;
    point._y = 105;
    global.hudID[0] = point.id; 
}
else if(instance_exists(obj_showScore))
        with (obj_showScore)   {instance_destroy();}

///////////////////  LEADER BOARD : enable / disable  ///////////////////

if(global.userLeaderboardEnable == true)
{
    margin_x = spr_width_leaderboard + 10 ;
    var ranking = instance_create(xview + (1140 - margin_x)*vwidth/1140 , yview,obj_leaderBoard);
    ranking.type = "leaderboard";
    if(room == room_ranking)        {ranking.off = 1;   ranking.can_press = 0;}
    else                            {ranking.off = 0;   ranking.can_press = 1;}
    ranking._x = (1140 - spr_width_leaderboard)*vwidth/1140;
    ranking._y = 0;
    ranking.scale = scale;
    global.hudID[array_length_1d(global.hudID)] = ranking.id;
}
else
{    
    if(instance_exists(obj_leaderBoard))
        with (obj_leaderBoard)   {instance_destroy();}
}
            
//////////////////////  BADGE : enable / disable  ///////////////////////

if(global.userBadgeEnable == true)
{
    if(global.userLeaderboardEnable == true) //draw badge in right place based on enable or disable state of leaderboard
    {
        margin_x = spr_width_leaderboard + spr_width_badge + 20;
        var badge = instance_create(xview + (1140 - margin_x)*vwidth/1140,yview,obj_badges);
        badge.type = "badge";
        if(room == room_badges)         {badge.off = 1; badge.can_press = 0;}
        else                            {badge.off = 0; badge.can_press = 1;}
        badge._x = (1140 - margin_x)*vwidth/1140;
        badge._y = 0;
        badge.scale = scale;
        global.hudID[array_length_1d(global.hudID)] = badge.id;
    }
    else
    {
        margin_x = spr_width_badge + 10;
        var badge = instance_create(xview + (1140 - margin_x)*vwidth/1140,yview,obj_badges);
        badge.type = "badge";
        if(room == room_badges)         {badge.off = 1; badge.can_press = 0;}
        else                            {badge.off = 0; badge.can_press = 1;}
        badge._x = (1140 - margin_x)*vwidth/1140;
        badge._y = 0;
        badge.scale = scale;
        global.hudID[array_length_1d(global.hudID)] = badge.id;    
    }
}
else if(instance_exists(obj_badges))
        with (obj_badges)   instance_destroy();
        
///////////////////  PROGRESS BAR : enable / disable  ///////////////////
if(global.userProgressEnable == true)
{
    var progress =instance_create(xview ,yview,obj_ProgressBarControler);
    progress.type = "progress";
    progress.off = 0;
    progress._x = 0;
    progress._y = 0;
    progress.scale = scale;
    global.hudID[array_length_1d(global.hudID)] = progress.id;    
}
else if(instance_exists(obj_ProgressBarControler))
        with (obj_ProgressBarControler)   instance_destroy();        

///////////////////  SETTING  /////////////////// 
    margin_x = spr_width_setting+20;
    margin_y = spr_height_setting + 30;
    var setting =instance_create(xview +(1140-margin_x)*vwidth/1140 , yview+(720-margin_y)*vheight/720 , obj_setting);
    setting.type = "setting";
    if(room == room_setting)        {setting.off = 1;   setting.can_press = 0;}
    else                            {setting.off = 0;   setting.can_press = 1;}
    setting._x = (1140-margin_x)*vwidth/1140
    setting._y = (720-margin_y)*vheight/720
    setting.scale = 0.85;
    global.hudID[array_length_1d(global.hudID)] = setting.id;   

///////////////////  DICTIONARY  ///////////////////
    margin_x = spr_width_dictionary+20;
    margin_y = spr_height_setting + spr_height_dictionary +50;
    var dictionar =instance_create(xview +(1140-margin_x)*vwidth/1140 , yview+(720-margin_y)*vheight/720 , obj_dictionary);
    dictionar.type = "dictionary";
    if(room == room_dictionary)     {dictionar.off = 1; dictionar.can_press = 0;}
    else                            {dictionar.off = 0; dictionar.can_press = 1;}
    dictionar._x = (1140-margin_x)*vwidth/1140;
    dictionar._y = (720-margin_y)*vheight/720;
    dictionar.scale = 0.85;
    global.hudID[array_length_1d(global.hudID)] = dictionar.id;      

///////////////////  EXAM  ///////////////////
    margin_x = 40+spr_width_exam/2;
    margin_y = 200+spr_height_exam/2;
    var exam =instance_create(xview + margin_x*vwidth/1140 , yview+ margin_y*vheight/720 , obj_exam);
    exam.type = "exam";
    if(room == room_exam_new)       {exam.off = 1;  exam.can_press = 0;}
    else                            {exam.off = 0;  exam.can_press = 1;}
    exam._x = margin_x*vwidth/1140;
    exam._y = margin_y*vheight/720;
    exam.scale = 1.3 * scale;
    exam.flasher = false;
    global.hudID[array_length_1d(global.hudID)] = exam.id;  
}
///////////////////  MAP  ///////////////////
    margin_x = 10;
    margin_y = vheight - 6;
    var map = instance_create(xview+margin_x , yview+margin_y,obj_map);
    map.type = "map";
    if(room == room_levelSelection) {map.off = 1;   map.can_press = 0;}
    else                            {map.off = 0;   map.can_press = 1;}
    map._x = margin_x;
    map._y = margin_y;
    map.scale = scale;
    global.hudID[array_length_1d(global.hudID)] = map.id; 
    
    
global.drawEnable = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vheight = ds_map_find_value(global.roomInt , "vheight");

obj_name = object_get_name(object_index);



for(i=0 ; i&lt; array_length_1d(global.hudID) ; i++)
{
    if(instance_exists(global.hudID[i]))
        global.hudID[i].y =  view_yview[0] + global.hudID[i]._y;
}


if((!ds_queue_empty(global.examList_queue_backUp)) or !ds_queue_empty(global.userAllExamsList))
{
    with(obj_exam)
        flasher = true;
}
else
{
    with(obj_exam)
        flasher = false;    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.drawEnable ==1)
    for(i=0 ; i&lt; array_length_1d(global.hudID) ; i++)
    {
        if(instance_exists(global.hudID[i]))
            if(global.hudID[i].type != "progress" and 
                    global.hudID[i].type != "point" and 
                    global.hudID[i].type != "map" and 
                    global.hudID[i].type != "exam" and 
                    global.hudID[i].type != "questionnarie1" and 
                    global.hudID[i].type != "questionnarie2")
            {
                spr_name= "spr_"+global.hudID[i].type+"_hud";
                spr=asset_get_index(spr_name);
                draw_sprite_ext(spr, global.hudID[i].off , global.hudID[i].x , global.hudID[i].y ,
                global.hudID[i].scale, global.hudID[i].scale, 0 , -1  , 1);
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
