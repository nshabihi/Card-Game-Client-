<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//VersionCheck
global.forceUpdateProgram =  -1;
global.updateIfYouWant    =  -1;
global.versionRequestRicieved = false;
        
        
global.MBTI_resultDiscription = ds_map_create();
ds_map_add(global.MBTI_resultDiscription, "ENFJ" , "your type is ENFJ");
global.personalityTypeNum = 0;

global.lastPlayedLevel_starDrawing = 0;
global.levelNum = "";
global.subLevelNum = "";
/// Base_url, address of server ///
//global.baseUrl = "http://192.69.208.200/504gameserver-V1.0/index.php/";
//global.baseUrl = "http://localhost:801/504server/index.php/";
//global.baseUrl = "http://localhost/rememry/504server/index.php/";
global.baseUrl = "http://45.61.49.222/Server/index.php/";


/// End Base_url ///

global.htpReqAddress   = ds_queue_create();
global.htpReqType      = ds_queue_create();
global.reqMap          = ds_map_create();

global.checkLoginMap   = ds_map_create();
global.respTimeMap     = ds_map_create();
global.noRespUrl       = ds_map_create();
global.noRespType      = ds_map_create();

global.LB1checkLoginMap   = ds_map_create();
global.LB1respTimeMap     = ds_map_create();
global.LB1noRespUrl       = ds_map_create();
global.LB1noRespType      = ds_map_create();

global.LB2checkLoginMap   = ds_map_create();
global.LB2respTimeMap     = ds_map_create();
global.LB2noRespUrl       = ds_map_create();
global.LB2noRespType      = ds_map_create();

global.LB3checkLoginMap   = ds_map_create();
global.LB3respTimeMap     = ds_map_create();
global.LB3noRespUrl       = ds_map_create();
global.LB3noRespType      = ds_map_create();

global.loginResponseRecieved = false;
global.firstTimeSetPing      = true;

global.pingLastSendTime = 0;
global.pingFailCount    = 0;
global.SendingPingEnable= false;

global.loadingServerExistance = false;

global.mustNetworkConnectedRequests = ds_map_create();
ds_map_add(global.mustNetworkConnectedRequests, "register", 0);
ds_map_add(global.mustNetworkConnectedRequests, "exam", 1);
ds_map_add(global.mustNetworkConnectedRequests, "gameResult", 2);
ds_map_add(global.mustNetworkConnectedRequests, "matchingExam", 3);
ds_map_add(global.mustNetworkConnectedRequests, "badgeTimer", 4);
ds_map_add(global.mustNetworkConnectedRequests, "rankingTimer", 5);
ds_map_add(global.mustNetworkConnectedRequests, "searchVocab", 6);
ds_map_add(global.mustNetworkConnectedRequests, "Questionnarie", 7);

global.wrongAnsweredCards = ds_map_create();

global.examResultItemCount= 0;
global.networkIsConnected = 1;
global.maximumExamCount   = 0;
global.thisExamNumber     = 0;

global.checkPlayingSound = true;

global.deviceId = "";
global.username = "";
global.loginUniqueId = "";

//number of sub levels
global.subLevelsNum = 7;

global.keyboardInputID = 0;

global.leaderBoardRoomLoaderId = 0;
global.show_lb_list            = false;
global.lb_list[0]              = 0
global.LeaderboardResultArray[0]= 0;
global.userRank[0]              = 0;
/////////////////////////////////////
image_speed = 0;

global.text_input = "";   // text input variable
global.text_input_username = "";   // username text input variable
global.text_input_email = "";   // email text input variable
global.fade_speed = 0.05; // speed to scale messages
/*
  The some_functions are platform specific so set
  a device variable we can use later on
*/
global.device = 1; // device cannot use game_end()
switch (os_type){
  case os_windows:
  case os_macosx:
  case os_winphone:
  case os_android:
  case os_linux:
    global.device = 0; // safe to use game_end()
}
// HTML5 also cannot use game_end() regardless of OS

if(os_browser != browser_not_a_browser){
  global.device = 2;
}

/*
global.cardDataBase [100] = "null";
for(i=0 ; i&lt;100 ; i++)
    global.cardDataBase [i] = "null"; 

for(i=1 ; i&lt;11 ; i++)
    for ( j = 1 ; j&lt;8 ; j++)
        global.cardDataBase [(i-1) * 7 + (j-1)] = "spr" + string(i) + "_" + string(j) + "_0";;    
*/
global.dictionaryResult = 0; //index of card to show in result of dictionary search   

////////////  processing file contained game information ///////////////

//if file_exists("SaveGame5.sav")
//{
   
//    ini_open("SaveGame5.sav");
    ////// loading game score
   // score = ini_read_real('General','score','0');
    ////// loading index of last played level
    //global.indexOfLastLevel = ini_read_real('General','indexOfLastLevel','-1');

    // TODO : Check validity of this line of code :
    //global.levelNum = ini_read_string('General' , 'levelNum' , '3');
    //global.subLevelNum = ini_read_string('General' , 'subLevelNum' , '3');
    
    
    /*
    global.stringExamCardAskedTimes = ini_read_string ('Exam' , 'cardAskedTimes' , '0');
    for (i=0 ; i &lt; string_length(global.stringExamCardAskedTimes) ; i++)
        global.examCardAskedTimes[i] = real(string_copy(global.stringExamCardAskedTimes , i+1 , 1 ));
    for (i = string_length(global.stringExamCardAskedTimes) ; i&lt;100 ; i++)
        global.examCardAskedTimes[i] = 0;
    */    
    /*global.stringExamPoints = ini_read_string ('Exam' , 'examPoints' , '0');
    for (i=0 ; i &lt; (string_length(global.stringExamPoints))/5 ; i++)
        global.examPoints[i] = real(string_copy(global.stringExamPoints , i*5+1 , 5 ));
    for (i = (string_length(global.stringExamPoints))/5 ; i&lt;100 ; i++)
        global.examPoints[i] = 0;
      */  
//    ini_close()

//    global.nextGame = true;
//}
//else 
//{
score = 0;
global.indexOfLastLevel = -1;
for (i = 0 ; i&lt;220 ; i++)
    global.threeStarOfLevels[i] = 3;
global.stringThreeStarOfLevels = "";
//}
global.starImproved = 0; //1: when new star earned

    
// ::001E:: //

global.userGameScores[] = 0;
global.userGameTimes[]  = 0;

global.badgeCount   = 0;
global.userBadges[] = 0;

global.progressBadge = 7; // There should be a formula which compute this variable
                          // progressBadge &lt;16 and must be integer
                          
global.userExamScores[] = 0;
global.userExamCounts[] = 0;
global.examsVocab[]     = 0;

global.userPtype[] = 0; // 0 = I,E,  1 = N,S,  2=T,F,  3=J,P

global.userProgressLevel    = 0;
global.userProgressPerc     = 0;
global.email                = "null" ;
score                       = 0;
global.ProgressScore        = 0;
global.userProgressRange[0] = 0;
global.userProgressRange[1] = 1;
global.userProgressRange[2] = 2;

global.examChoicesId = ds_map_create();
global.isExamCardClicked = ds_map_create();
global.lastSelectedExamCardId = -1;

global.userLoginProgressScore = 0;
global.userLoginStrike        = 0;

global.scoreDiff = 0;


global.examCardNumbers = ds_queue_create();
global.userAllExamsList= ds_queue_create();
global.examList_queue  = ds_queue_create();
global.examList_queue_backUp = ds_queue_create();

global.popupType = 0;

global.waitTillRankingrecieved = 1;


global.numericalsXDenominator = 1140;
global.numericalsYDenominator = 720;



global.tutorialType = 0;
global.tutorialTypesMap[1] = "lvlSelection";
global.tutorialTypesMap[2] = "badge";
global.tutorialTypesMap[3] = "leaderboard";
global.tutorialTypesMap[4] = "game";
global.tutorialTypesMap[5] = "exam";
// 1: lvl Selection
// 2: Badge
// 3: Leaderboard
// 4: Game
// 5: Exam

/////////////////////////////////////////////////////////////////////////////////////
// These Global variables took from obj_loaderParent.Create here so that do not be called!! every time obj_loader_parent is created!!!
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

// LoadingRoom Global variables...
global.loginGotoMain = 0;
global.ErrorInLogin  = 0;
global.ErrorInExam = 0;
// End of LoadingRoom GlobaL variables...


// RegisterRoom Global Variables...
global.registerFault = 0;
global.registerOK    = 0;
// End if RegisterRoom Global Variables...
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////


//////////////  card and verb database  ////////////////////
//card DATABASE
global.arrayOfCards[100] = "";
for (i=1; i&lt;=12; i+=1)
{
    for (j=1; j&lt;=7; j+=1)
    {
        for (k=0; k&lt;2; k+=1)
        {
            global.arrayOfCards[(i-1)*14 + (j-1)*2 + k] =
            "spr"+string(i)+"_"+string(j)+"_"+string(k);
        }  
    }
}

//verb DATABASE
verbDataSet =  
//"abandon\data\gallant\jealous\keen\oath\qualify\corpse\conceal\dismal\frigid\inhabit\numb\peril\recline\shriek\sinister\tempt\wager\typical\minimum\scarce\annual\persuade\essential\blend\visible\expensive\talent\devise\wholesale\vapor\eliminate\villain\dense\utilize\humid\theory\descend\circulate\enormous\predict\vanish\tradition\rural\burden\campus\majority\assemble\explore\topic\debate\evade\probe\reform\approach\detect\defect\employee\neglect\deceive\undoubtedly\popular\thorough\client\comprehensive\defraud";
"abandon\data\bachelor\jealous\keen\oath\qualify\tact\vacant\hardship\gallant\unaccustomed\conceal\corpse\frigid\peril\shriek\sinister\recline\inhabit\numb\tempt\wager\dismal\minimum\annual\blend\expensive\talent\scarce\devise\persuade\essential\visible\wholesale\typical\vapor\villain\humid\theory\descend\vanish\predict\eliminate\dense\utilize\circulate\enormous\rural\assemble\explore\topic\debate\evade\campus\burden\majority\probe\reform\tradition\defect\deceive\client\popular\defraud\undoubtedly\detect\thorough\comprehensive\employee\neglect\approach";



//"abandon\keen\jealous\tact\oath\vacant\hardship\gallant\data\unaccustomed\bachelor\qualify\corpse\conceal\dismal\frigid\inhabit\numb\peril\recline\shriek\sinister\tempt\wager\typical\minimum\scarce\annual\persuade\essential\blend\visible\expensive\talent\devise\wholesale\vapor\eliminate\villain\dense\utilize\humid\theory\descend\circulate\enormous\predict\vanish\tradition\rural\burden\campus\majority\assemble\explore\topic\debate\evade\probe\reform\approach\detect\defect\employee\neglect\deceive\undoubtedly\popular\thorough\client\comprehensive\defraud"

global.verbDataBase [100] = "null";
for(i=0 ; i&lt;100 ; i++)
    global.verbDataBase [i] = "null"; 

global.verbDataBase = scr_between_comma_array(verbDataSet, global.verbDataBase , "\")

isPicture = "+p"
global.vocab_card = ds_map_create();
global.card_vocab= ds_map_create();

for(i=0; i&lt;42 ; i++)
{

    ds_map_add(global.vocab_card, global.arrayOfCards[2*i] , global.verbDataBase [floor(i/7)*12+i mod 7] + isPicture);
    ds_map_add(global.vocab_card, global.arrayOfCards[2*i + 1] , global.verbDataBase [floor(i/7)*12+i mod 7]);

    
    ds_map_add(global.card_vocab, global.verbDataBase [floor(i/7)* 12 + i mod 7] + isPicture , global.arrayOfCards[2*i]);
    ds_map_add(global.card_vocab, global.verbDataBase [floor(i/7)* 12 + i mod 7] , global.arrayOfCards[2*i+1]);
}

scr_vocab_meaning();
scr_vocab_meaning_Fa();

global.vocabFaultCnt = ds_map_create();

//number of verb to use for each subLevel
global.subLevelVocabsNum = ds_map_create();
ds_map_add(global.subLevelVocabsNum , 1 , 3);
ds_map_add(global.subLevelVocabsNum , 2 , 4);
ds_map_add(global.subLevelVocabsNum , 3 , 6);
ds_map_add(global.subLevelVocabsNum , 4 , 7);
ds_map_add(global.subLevelVocabsNum , 5 , 7);
ds_map_add(global.subLevelVocabsNum , 6 , 7);
ds_map_add(global.subLevelVocabsNum , 7 , 7);
/////////End of card and verb database//////////////
//how many card each sublevel have
global.subLevelCardNumber = ds_map_create();
ds_map_add(global.subLevelCardNumber , 1 , 4);
ds_map_add(global.subLevelCardNumber , 2 , 6);
ds_map_add(global.subLevelCardNumber , 3 , 8);
ds_map_add(global.subLevelCardNumber , 4 , 8);
ds_map_add(global.subLevelCardNumber , 5 , 12);
ds_map_add(global.subLevelCardNumber , 6 , 14);
ds_map_add(global.subLevelCardNumber , 7 , 14);

//perfect move for each subLevel
global.PerfectMove_Map = ds_map_create();
ds_map_add(global.PerfectMove_Map , 1 , 3);
ds_map_add(global.PerfectMove_Map , 2 , 5);
ds_map_add(global.PerfectMove_Map , 3 , 6);
ds_map_add(global.PerfectMove_Map , 4 , 6);
ds_map_add(global.PerfectMove_Map , 5 , 9);
ds_map_add(global.PerfectMove_Map , 6 , 10);
ds_map_add(global.PerfectMove_Map , 7 , 10);

//valid move for each subLevel
global.validMove_Map = ds_map_create();
ds_map_add(global.validMove_Map , 1 , 6);
ds_map_add(global.validMove_Map , 2 , 10);
ds_map_add(global.validMove_Map , 3 , 12);
ds_map_add(global.validMove_Map , 4 , 12);
ds_map_add(global.validMove_Map , 5 , 18);
ds_map_add(global.validMove_Map , 6 , 20);
ds_map_add(global.validMove_Map , 7 , 20);

//maximum score of levels
global.maxScore = ds_map_create();
ds_map_add(global.maxScore , 1 , 20000); //17000
ds_map_add(global.maxScore , 2 , 21000); //21000
ds_map_add(global.maxScore , 3 , 23000); //23000
ds_map_add(global.maxScore , 4 , 24000); //24000
ds_map_add(global.maxScore , 5 , 36000); //36000
ds_map_add(global.maxScore , 6 , 45000); //45000
ds_map_add(global.maxScore , 7 , 45000); //45000

//minimum time of levels
global.minTime = ds_map_create();
ds_map_add(global.minTime , 1 , 6); //5.4
ds_map_add(global.minTime , 2 , 8); //8.1
ds_map_add(global.minTime , 3 , 9); //9
ds_map_add(global.minTime , 4 , 11); //10.8
ds_map_add(global.minTime , 5 , 7); //5.4
ds_map_add(global.minTime , 6 , 8); //5.7
ds_map_add(global.minTime , 7 , 8); //5.7

//maximum time of levels for for progress
global.maxTime = ds_map_create();
ds_map_add(global.maxTime , 1 , 18); //5.4
ds_map_add(global.maxTime , 2 , 24); //8.1
ds_map_add(global.maxTime , 3 , 27); //9
ds_map_add(global.maxTime , 4 , 33); //10.8
ds_map_add(global.maxTime , 5 , 21); //5.4
ds_map_add(global.maxTime , 6 , 24); //5.7
ds_map_add(global.maxTime , 7 , 24); //5.7

// queue for keeping progress per (exam, level, lesson, score, beat best time , beat best score &amp; sequential login)
global.progressLifters = ds_queue_create();

global.yPositionOfLevelNumbers = ds_map_create();
ds_map_add(global.yPositionOfLevelNumbers , 1 , 5328);
ds_map_add(global.yPositionOfLevelNumbers , 2 , 5176);
ds_map_add(global.yPositionOfLevelNumbers , 3 , 5040);
ds_map_add(global.yPositionOfLevelNumbers , 4 , 4920);
ds_map_add(global.yPositionOfLevelNumbers , 5 , 4848);
ds_map_add(global.yPositionOfLevelNumbers , 6 , 4672);
ds_map_add(global.yPositionOfLevelNumbers , 7 , 4608);
ds_map_add(global.yPositionOfLevelNumbers , 8 , 4336);
ds_map_add(global.yPositionOfLevelNumbers , 9 , 4248);
ds_map_add(global.yPositionOfLevelNumbers , 10 , 4248);
ds_map_add(global.yPositionOfLevelNumbers , 11 , 4000);
ds_map_add(global.yPositionOfLevelNumbers , 12 , 3928);
ds_map_add(global.yPositionOfLevelNumbers , 13 , 3864);
ds_map_add(global.yPositionOfLevelNumbers , 14 , 3720);
ds_map_add(global.yPositionOfLevelNumbers , 15 , 3456);
ds_map_add(global.yPositionOfLevelNumbers , 16 , 3416);
ds_map_add(global.yPositionOfLevelNumbers , 17 , 3392);
ds_map_add(global.yPositionOfLevelNumbers , 18 , 3208);
ds_map_add(global.yPositionOfLevelNumbers , 19 , 3088);
ds_map_add(global.yPositionOfLevelNumbers , 20 , 2896);
ds_map_add(global.yPositionOfLevelNumbers , 21 , 2864);
ds_map_add(global.yPositionOfLevelNumbers , 22 , 2704);
ds_map_add(global.yPositionOfLevelNumbers , 23 , 2624);
ds_map_add(global.yPositionOfLevelNumbers , 24 , 2600);
ds_map_add(global.yPositionOfLevelNumbers , 25 , 2536);
ds_map_add(global.yPositionOfLevelNumbers , 26 , 2440);
ds_map_add(global.yPositionOfLevelNumbers , 27 , 2448);
ds_map_add(global.yPositionOfLevelNumbers , 28 , 2232);
ds_map_add(global.yPositionOfLevelNumbers , 29 , 2032);
ds_map_add(global.yPositionOfLevelNumbers , 30 , 1832);
ds_map_add(global.yPositionOfLevelNumbers , 31 , 1536);
ds_map_add(global.yPositionOfLevelNumbers , 32 , 1520);
ds_map_add(global.yPositionOfLevelNumbers , 33 , 1808);
ds_map_add(global.yPositionOfLevelNumbers , 34 , 1432);
ds_map_add(global.yPositionOfLevelNumbers , 35 , 1224);
ds_map_add(global.yPositionOfLevelNumbers , 36 , 952);
ds_map_add(global.yPositionOfLevelNumbers , 37 , 928);
ds_map_add(global.yPositionOfLevelNumbers , 38 , 448);
ds_map_add(global.yPositionOfLevelNumbers , 39 , 408);
ds_map_add(global.yPositionOfLevelNumbers , 40 , 624);
ds_map_add(global.yPositionOfLevelNumbers , 41 , 472);
ds_map_add(global.yPositionOfLevelNumbers , 42 , 208);

global.levelCoefficient = ds_map_create();
ds_map_add(global.levelCoefficient , 1, 1);
ds_map_add(global.levelCoefficient , 2, 1.2);
ds_map_add(global.levelCoefficient , 3, 1.4);
ds_map_add(global.levelCoefficient , 4, 1.6);
ds_map_add(global.levelCoefficient , 5, 1.8);
ds_map_add(global.levelCoefficient , 6, 2);


global.badgeTypeArray[1] =  "leagu1";
global.badgeTypeArray[2] =  "score1"; // ?
global.badgeTypeArray[3] =  "learn3"; 
global.badgeTypeArray[4] =  "learn7";
global.badgeTypeArray[5] =  "strea3"; 
global.badgeTypeArray[6] =  "score2"; // ?
global.badgeTypeArray[7] =  "learn12"; 
global.badgeTypeArray[8] =  "leagu3"; 
global.badgeTypeArray[9] =  "strea6";
global.badgeTypeArray[10] = "leagu5";
global.badgeTypeArray[11] = "score3"; // ?
global.badgeTypeArray[12] = "learn18";
global.badgeTypeArray[13] = "strea10";
global.badgeTypeArray[14] = "learn25";
global.badgeTypeArray[15] = "score4"; // ?
global.badgeTypeArray[16] = "learn34";
global.badgeTypeArray[17] = "leagu10"; 
global.badgeTypeArray[18] = "strea15";
global.badgeTypeArray[19] = "strea20";
global.badgeTypeArray[20] = "learn42";

global.firstBadgeUpdate_login = true;
for(var i = 0; i&lt; 21 ;i++)
{
   global.userBadgeTemp[i] = 0;
   global.userBadgeGained[i] = 0;
}


global.userTotalRank      = 0;
global.userLeagueScore    = 0;
global.userLeagueRank     = 0;
global.leagueRemainedTime = 0;
global.userHamLevelsRank  = 0;

global.userTotalRank_temp       = 0;
global.userLeagueScore_temp     = 0;
global.userLeagueRank_temp      = 0;
global.leagueRemainedTime_temp  = 0;
global.userHamLevelsRank_temp   = 0;

global.notificationOfTotalRankImprovement = 0;
global.totalRankImprovementAmount = 0;

global.progressLevelUped = 0;
global.notifiOfTotalRank_login = true;



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
