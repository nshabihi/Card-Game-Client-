<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//lastNotificationDate = "-1";
// screen resolution
///Sets views of other screens
var dwidth, dheight, aratio, vwidth, vheight , xview , yview; // 1&amp; 2: device width and height , 3: aspect retio 4 &amp; 5: view width and height , 6 &amp; 7 : x &amp; y port of view
gwidth = 1140;
gheight = 720;
// Get the usable resolution of the device
dwidth  = display_get_width(); //1280 ; //display_get_width();
dheight = display_get_height(); //720; //display_get_height();

// Calculate the aspect ratio
aratio = dwidth / dheight;
if(aratio == 1.5)
{
    vwidth = 1080;
    vheight = 720;
    xview = 30 ;
    yview = 0;

}
else if(aratio &gt; 1.5)
{
    vwidth = gwidth;
    vheight = round(vwidth / aratio);
    xview = 0;
    yview = round(abs(gheight - vheight) /2);


}
else if(aratio &lt; 1.5)
{
    
    vheight = gheight;
    vwidth = round(vheight * aratio);
    xview = round(abs(gwidth - vwidth) /2);
    yview = 0;

}
// for using in other room's initialization
global.roomInt = ds_map_create();
var dwidth, dheight, aratio, vwidth, vheight , xview , yview;
ds_map_add(global.roomInt , "dwidth" , dwidth);
ds_map_add(global.roomInt , "dheight" , dheight);
ds_map_add(global.roomInt , "xview" , xview);
ds_map_add(global.roomInt , "yview" , yview);
ds_map_add(global.roomInt , "vwidth" , vwidth);
ds_map_add(global.roomInt , "vheight" , vheight);
ds_map_add(global.roomInt , "aratio" , aratio);
dsmapr = ds_map_find_value(global.roomInt , dwidth);


var loader = instance_create(10,10,obj_loaderr);



// Sets the view's size/aspect ratio to match that of the device, the view is centered in the room
room_set_view(room_loading, 0, 1, xview, yview , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
room_goto(room_loading);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="71">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var type = ds_map_find_value(async_load, "type");
var status = ds_map_find_value(async_load, "status");
if status == 0
    {
    //error of some kind
    var error = ds_map_find_value(async_load, "error");
    //show_debug_message("error=" + string(error));
    }
else
    {
    if type == "register"
        {
        global.reg_id = ds_map_find_value(async_load, "reg_id");
        }
    else
        {
        var data = ds_map_find_value(async_load, "data");
        if data == "daily_reward"
            {
            global.Gold += 1000;
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
