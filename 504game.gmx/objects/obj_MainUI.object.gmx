<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///all control events get here...

  

if other.uiControlName=='checkbox'
   {
     room_goto(rm_checkbox);
   }
else if other.uiControlName=='buttons'
   {
      room_goto(rm_buttons);
   }
else if other.uiControlName=='listbox'
   {
      room_goto(rm_listbox);
   }   
else if other.uiControlName=='dialogs'
   {
      room_goto(rm_dialogs);
   }      
else if other.uiControlName=='anchors'
   {
      room_goto(rm_anchors);
   }   
else if other.uiControlName=='bubbles'
   {
      room_goto(rm_bubble);
   }      
else if other.uiControlName=='labels'
   {
      room_goto(rm_labels);
   }   
else if other.uiControlName=='sliders'
   {
      room_goto(rm_sliders);
   }    
else if other.uiControlName=='butani'
   {
      room_goto(rm_animate);
   }  
else if other.uiControlName=='textani'
   {
      room_goto(rm_textani);
   } 
else if other.uiControlName=='advlist'
   {
      room_goto(rm_listboxcustom);
   }
else if other.uiControlName=='horzlist'
   {
      room_goto(rm_listbox_horz);
   }   
else if other.uiControlName=='editbox'
   {
      room_goto(rm_editboxes);
   }   
else if other.uiControlName=='about'
   {
      room_restart();
   }
else if other.uiControlName=='gotomenu'
   {
      room_goto(rm_menu);
   }
else if other.uiControlName=='gauges'
   {
      room_goto(rm_gauge);
   }   
else if other.uiControlName=='slidergauge'
   { var tmp = other.uiValue;   
     with (ui_gauge) {uiSetValue=tmp;}  //set all gauges to same value   
   }   
else if other.uiControlName=='listbox1'
   {
    if other.itemindex&gt;0 
           ui_textbox.uiTextValue=other.items[other.itemindex];
   }
else if other.uiControlName=='hoverbox'
   {
    var tmp = other.itemindex; 
    if tmp&gt;=0 
       with (ui_defaults) {uiHoverMode=tmp;
                             if uiHoverMode==2 uiHoverInfo=1.1;  //if zoom we need to set zoom factor;
                            }
   scr_bubble(620,525,"Everyone Loves Bubbles,  You can popup bubbles anywhere!  Really easy!",300,3,true);                         
       
   }  
else if other.uiControlName=='menuup'
   {
      if panel1.y&gt;(room_height-panel1.sprite_height)
                              { panel1.uiMoveY=room_height-panel1.sprite_height;
                                panel1.uiMoveX=panel1.x;
                                panel1.uiAniMove=true;
                              }  
   panel1.uiFadeIn=true;                              
   }   
else if other.uiControlName=='menudown'
   {
      if panel1.y&lt;room_height { panel1.uiMoveY=room_height+10;
                                panel1.uiMoveX=panel1.x;
                                panel1.uiAniMove=true;
                              }  
   panel1.uiFadeOut=true;                              
                              
   }   
else if other.uiControlName=='fadeout'
   {
   if cboxmany.uiAlpha &lt; 1 cboxmany.uiFadeIn=true; else cboxmany.uiFadeOut=true;                             
   }     
else if other.uiControlName=='ui_swipe'
   {
      //if other.SwipedLeft { show_message('Left Swiped');}
       //    else if other.SwipedRight { show_message('Right Swiped');}
       //    else if other.SwipedUp { show_message('Up Swiped');}
       //    else if other.SwipedDown { show_message('Down Swiped');}

   }
else if other.uiControlName=='showbubble'
   {
    var tx;
    if inst_editbubble.uiTextValue='' {exit;}
    tx=max(inst_bubbletype.itemindex,0);
    scr_bubble(400,300,inst_editbubble.uiTextValue,300,tx,inst_bkill.checked);  //sample script for dyaminc buble creation
  }    
  
else if other.uiControlName=='test2'
   {
      testbub.uiEasePulseType+=1;
      testbub.uiPopDown=true;
      other.uiTextValue=string(testbub.uiEasePulseType);
   }
else if other.uiControlName=='score_add'
   {
      menu_score.temps+=50;
      menu_score.uiSetScore=menu_score.temps;
      menu_health.uiSetValue=irandom(99);
       
   }
else if other.uiControlName=='score_minus'
   {
      menu_score.temps-=50;
      menu_score.uiSetScore=menu_score.temps;
      menu_health.uiSetValue=irandom(99);       
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
