<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dwidth = ds_map_find_value(global.roomInt , "dwidth");
dheight = ds_map_find_value(global.roomInt , "dheight");
xview = view_xview[0];
yview =view_yview[0];
vwidth = view_wview[0];
vheight = view_hview[0];

badgeCornerX = 300;
badgeCornerY = 100;
badgeHorizantalGap = 220;
badgeVerticalGap = 200;
badgeInRow = 3;
badgeId[0] = 0;
badgeCnt = 0;
cnt = 0;

//global.userLeaderboardEnable = false;

if(global.userLeaderboardEnable == true)
for (i=0 ; i&lt; 20/*real(global.badgeCount)*/ ; i++)
{
    badgeCnt = 20;
    xx               = badgeCornerX + i mod (badgeInRow) * (badgeHorizantalGap);
    yy               = badgeCornerY + floor(i/badgeInRow) * badgeVerticalGap;
    
    var eachBadge    = instance_create(xx  ,yy  ,obj_eachBadge);
    eachBadge.firstY = yy;
    eachBadge.sprite = "spr_badge_"+string(i+1);
    eachBadge.type   = i;
    eachBadge.bPower = global.userBadges[i];
    eachBadge.outOfRange_b = false;  //out of scroll range from below
    eachBadge.outOfRange_t = false    // out of scroll range from top
    badgeId[i] = eachBadge.id;
    eachBadge.counter = 0;
}

if(global.userLeaderboardEnable == false)
for (i=0 ; i&lt; 20/*real(global.badgeCount)*/ ; i++)
{
    badgeCnt = 16;
    if(string_copy(global.badgeTypeArray[i+1] , 1 ,5) != "leagu")
    {
        xx               = badgeCornerX + cnt mod (badgeInRow) * (badgeHorizantalGap);
        yy               = badgeCornerY + floor(cnt/badgeInRow) * badgeVerticalGap;
        var eachBadge    = instance_create(xx  ,yy  ,obj_eachBadge);
        eachBadge.firstY = yy;
        eachBadge.sprite = "spr_badge_"+string(i+1);
        eachBadge.type   = i;
        eachBadge.bPower = global.userBadges[i];
        eachBadge.outOfRange_b = false;  //out of scroll range from below
        eachBadge.outOfRange_t = false    // out of scroll range from top
        badgeId[cnt] = eachBadge.id;
        cnt++
        eachBadge.counter = 0;
    }
}

global.badgeSurface = surface_create(1024,512);
outOfRangeCount = 1;
scrollHeight = badgeCornerY + floor((badgeCnt/3)-2)*badgeVerticalGap + 100;

ready = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>col = make_color_rgb(128,68,60);
draw_set_font(fnt_bigJohn);
draw_set_valign(fa_middle);
draw_set_halign(fa_center);
//draw_text_colour(view_xview[0] + 580, view_yview[0] + 85, "BOARD OF AWARDS", col, col, col, col, 1);
//draw_text_ext_transformed_colour(view_xview[0] + 580, view_yview[0] + 85, "BOARD OF AWARDS", 20, 600, 0.7, 0.7, 0, col, col, col, col, 1);
draw_sprite_ext(spr_boardofawards, 0, view_xview[0] + 580, view_yview[0] + 85, 0.75, 0.75, 0, -1, 1);
if(global.networkIsConnected ==1)
{
    for (i=0 ; i&lt; badgeCnt; i++)
    {
    if(device_mouse_check_button_pressed(0,mb_left)){
        badgeId[i].temp = device_mouse_y(0);
    }
    
    if(device_mouse_check_button(0, mb_left))
    {
        if(badgeId[i].temp == device_mouse_y(0))
            badgeId[i].flag = 0;
        else
           {badgeId[i].flag = 1;}
        
        if(badgeId[i].flag = 1)
        {
               if(badgeId[i].temp &gt; device_mouse_y(0))
               {
                   if(badgeId[i].y - badgeId[i].firstY &gt;= -scrollHeight)
                    {
                        if(badgeId[i].outOfRange_b == false)
                        {
                            badgeId[i].y += device_mouse_y(0) - badgeId[i].temp;
                            badgeId[i].temp = device_mouse_y(0);  
                        }
                    }
                    else
                    {  
                      badgeId[i].y -= (20/outOfRangeCount);
                      outOfRangeCount++;
                      badgeId[i].outOfRange_b = true;
                    }   
                }
                else
                {
                    if(abs(badgeId[i].y &lt; badgeId[i].firstY))
                    {
                        if(badgeId[i].outOfRange_t == false)
                        {
                            badgeId[i].y += device_mouse_y(0) - badgeId[i].temp;
                            badgeId[i].temp = device_mouse_y(0);  
                        }
                    }
                    else
                    {
                      badgeId[i].y += (20/outOfRangeCount);
                      outOfRangeCount++;
                      badgeId[i].outOfRange_t = true;
                    } 
                }        
                badgeId[i].flag = 0;
        }
    }
        if(device_mouse_check_button_released(0, mb_left))
        {
            if(badgeId[i].outOfRange_b == true or badgeId[i].y&lt;badgeId[i].firstY -scrollHeight )
            {
                badgeId[i].y = badgeId[i].firstY -scrollHeight-1;
                badgeId[i].outOfRange_b = false;
                outOfRangeCount = 1;
            }
            
            if(badgeId[i].outOfRange_t == true or badgeId[i].y &gt; badgeId[i].firstY )
            {
                badgeId[i].y = badgeId[i].firstY;
                badgeId[i].outOfRange_t = false;
                outOfRangeCount = 1;
            }
        }
    }
}
if !surface_exists(global.badgeSurface)
    global.badgeSurface = surface_create(1024,512);
surface_set_target(global.badgeSurface); 
draw_clear_alpha(c_black, 0);
cnt = 0;
for(i=0 ; i&lt;20 ; i++)
{
    if((global.userLeaderboardEnable == false) and (string_copy(global.badgeTypeArray[i+1] , 1 ,5) == "leagu"))
    {
    }
    else
    {
        spr = asset_get_index(badgeId[cnt].sprite);
        spr_scale = 0.8;
        if(global.userBadges[i] == 1)
        {
                x_spark = 50 + badgeId[cnt].x - (3/4)*spr_scale*sprite_get_width(spr)/2 +random((3/4)*spr_scale*sprite_get_width(spr));
                y_spark = 200+ badgeId[cnt].y - (3/4)*spr_scale*sprite_get_height(spr)/2 +random((3/4)*spr_scale*sprite_get_height(spr));
                badgeId[cnt].counter ++;
                if(y_spark &gt; 200 and y_spark &lt; 712)
                    if(badgeId[cnt].counter mod 5 == 0)
                    {
                        if(i &lt;6)
                        {
                            col_1 = c_white; 
                            col_2 = make_color_rgb(239, 142 , 112);
                        }else if(i&lt;12)
                        {
                            col_1 = c_white; 
                            col_2 = make_color_rgb(138, 138 , 138);        
                        }else
                        {
                            col_1 = c_white; 
                            col_2 = make_color_rgb(249, 219 , 32);        
                        } 
                        effect_create_above(ef_spark,   x_spark, y_spark, choose(0, 1), merge_colour(col_1,col_2, random(1)));
                    }
            draw_sprite_ext( spr , 0 , badgeId[cnt].x , badgeId[cnt].y , spr_scale , spr_scale , 0 , -1 , 1);
        }
        else
        {
            col= make_color_rgb(77,77,77);
            draw_sprite_ext( spr , 0 , badgeId[cnt].x , badgeId[cnt].y , spr_scale , spr_scale , 0 , col , 1);
        }
        cnt++;
    }
}
surface_reset_target();

draw_surface(global.badgeSurface,50,200); 
draw_sprite_ext(spr_stones, 0, view_xview[0], view_hview + view_yview[0], 1.12 * view_wview[0] / 1140 , 1.12 * 0.75 * view_hview[0] / 720, 0, -1, 1);
draw_sprite_ext(spr_devider, 0, room_width/2, 200, 1, 1, 0, -1, 1);




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
