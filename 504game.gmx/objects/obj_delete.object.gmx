<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_keywide</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-650</depth>
  <persistent>0</persistent>
  <parentName>obj_parentOfKey</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DON'T CHANGE THESE!

// Sets the width and height of the key. DO NOT CHANGE.
width = scr_adjust_x( 104 ) ;
height = scr_adjust_y ( 54 ); 

// While this key is pressed, this variable will = 1, otherwise 0. DO NOT CHANGE.
pressed = 0;

// The delete key has its own holdTimer used so if you hold down delete long enough, it will keep deleting. Wow! DO NOT CHANGE.
holdTimer = 0;

// This keeps track of where the key will sit in relation to the keyboard. DO NOT CHANGE.
offsetX = x - obj_keyboard.x;
offsetY = y - obj_keyboard.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected ==1)
{
    /// Check if pressed
    
    // This moves the key in case the obj_keyboard moves. DO NOT CHANGE.
    x = obj_keyboard.x + offsetX;
    y = obj_keyboard.y + offsetY;
    
    // pressed is set to 0 by default. DO NOT CHANGE.
    pressed = 0;
    
    // This checks to see if the key is pressed, if it is held long enough, it will start deleting.
    if (mouse_check_button(mb_any) &amp;&amp; device_mouse_x(0) &gt; ( x - (width / 2) ) &amp;&amp; device_mouse_x(0) &lt; ( x + (width / 2) ) &amp;&amp; device_mouse_y(0) &gt; ( y - (height / 2) ) &amp;&amp; device_mouse_y(0) &lt; ( y + (height / 2) ))
        { pressed = 1;
          holdTimer += 1;
          if ( holdTimer &gt; 40 ){ holdTimer -= 10; keyboard_string = string_delete(keyboard_string, string_length(keyboard_string), 1); audio_play_sound( snd_type, 2, 0 ); } // You can change the 40 and 10 on this line if you want to make it delete faster or slower while being held down.
          }
    else { holdTimer = 0; }
        
    // If the key is released, it will delete the last character from the keyboard_string. DO NOT CHANGE.
    if (mouse_check_button_released(mb_any) &amp;&amp; device_mouse_x(0) &gt; ( x - (width / 2) ) &amp;&amp; device_mouse_x(0) &lt; ( x + (width / 2) ) &amp;&amp; device_mouse_y(0) &gt; ( y - (height / 2) ) &amp;&amp; device_mouse_y(0) &lt; ( y + (height / 2) ))
        { keyboard_string = string_delete(keyboard_string, string_length(keyboard_string), 1);
        audio_play_sound( snd_type, 2, 0 ); // You can change this if you want a different sound (or no sound) to play.
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the key
draw_sprite_stretched( sprite_index, pressed, x - ( width / 2) , y - ( height / 2), width, height );
// Draw the delete arrow (which is a seperate sprite)
draw_sprite_stretched( spr_delete_icon, 0, x - ( width / 2) , y - ( height / 2), width, height );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>52,27</point>
    <point>52,52</point>
  </PhysicsShapePoints>
</object>
