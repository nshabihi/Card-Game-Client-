<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sample dialog object  

//this event will get called when there's a result from dialog
//dialog widget must have this object set as its uiEventObject

if other.uiControlName=='dialogsample'   //result from dialogsample
   {
      with (other)  //work with dialog
        {
         switch uiDialogResult   
            {        
               case 1 : scr_bubble(750,550,'You Pressed Button 1',300,3,true); break;
               case 2 : scr_bubble(750,550,'You Pressed Button 2',300,3,true); break;
               case 3 : scr_bubble(750,550,'You Pressed Button 3',300,3,true); break;
               case 4 : scr_bubble(750,550,'You Pressed Button 4',300,3,true); break;
               case -1: scr_bubble(750,550,'You cancelled!',300,3,true); break;
            }  
         //to read contents of dialog
         // show_message_async('Input Box 1 = &gt;'+uiEditBox1.uiTextValue);
         // show_message_async('Input Box 1 = &gt;'+uiEditBox2.uiTextValue);
         // if uiCheckBox.checked then show_message_async('CheckBox is Set!');                                             
        }        
   }  //dialog result sample
else if other.uiControlName=='showdialog'
   {
     with (inst_dialog)
       {   uiTitle.uiTextValue=eb_title.uiTextValue;
           uiSubTitle.uiTextValue=eb_subtitle.uiTextValue; 
           uiCheckBox.uiTextValue=eb_checkbox.uiTextValue;
           uiButtons1.uiTextValue=eb_button1.uiTextValue;
           uiButtons2.uiTextValue=eb_button2.uiTextValue;
           uiButtons3.uiTextValue=eb_button3.uiTextValue;
           uiButtons4.uiTextValue=eb_button4.uiTextValue;
           uiEditBox1.uiTextLabel=eb_input1.uiTextValue;
           uiEditBox1.uiSetHeight=40;
           uiEditBox2.uiTextLabel=eb_input2.uiTextValue;
           uiEditBox2.uiSetHeight=40;
           uiShowDialog=true;
       }    
   } //show dialog button pressed;
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
