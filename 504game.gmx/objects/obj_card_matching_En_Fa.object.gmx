<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cardback</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-600</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_card_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw = 0;
matched = false;
failureCnt = 0;
requestAddress = "";
pressed = false;
ds_queue_enqueue(global.examCardsID , id);
score_exam_matching = 2000; // = 4000/2 : beacause score is both for vocab and its vocab
maxScore = score_exam_matching;
progressPerMatchingExam = 0;
progressIncrease = 0;
ExamCardPressed = 0;

faultCountForPopUp = 0;

counter = 0;
index = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.matchedCards != 0)
{

global.matchedCards = 0;
//scr_show_array(global.failureArray);
requestAddress  = global.baseUrl + "Exam/matchingExamResult?"
requestAddress += "Auth="+string(global.deviceId)+","+string(global.username);
requestAddress += "&amp;result=";
requestAddress += string(global.totalScoreOfExam) + "," ;
requestAddress += string(global.examCardN) + ",";

with(obj_newExamRoom_loader)
{
    userExamTotalScore += real(global.totalScoreOfExam);
}

for (i=0; i&lt;global.examCardN; i+=1)
{
    v = ds_queue_dequeue(global.examList);
    requestAddress += string(v)+ ",";
    requestAddress += string(ds_map_find_value(global.examFailureCnt ,v))+ ",";
    //requestAddress += string(ds_map_find_value(global.examScorePerVocab ,v))+ ",";
}
size = 0;
if(ds_exists(global.failureArray,ds_type_queue)){
    size = ds_queue_size(global.failureArray);
}
for (i=0; i&lt;size; i+=1)
{
    requestAddress += string(ds_queue_dequeue(global.failureArray)) + ",";
}

global.progressLifters_matchingExam = ds_queue_create();
//progress based on true answers: only first true answers increase the progress : temporary -&gt; replace it with line 31
progressPerExam = 6 * (global.totalScoreOfExam)/(2*maxScore);



if(progressPerExam &gt; 0)
{
    ds_queue_enqueue(global.progressLifters_matchingExam, "ProgressOfRightAnswers");
    ds_queue_enqueue(global.progressLifters_matchingExam, string(progressPerExam));
    progressIncrease += real(progressPerExam);
}

//progress of ending matching exam  
//:needs corrections
/*progressPerMatchingExam += (100 * global.examCardN);
if(progressPerMatchingExam &gt; 0)
{   ds_queue_enqueue(global.progressLifters_matchingExam, "matchingExam");
    ds_queue_enqueue(global.progressLifters_matchingExam, string(progressPerMatchingExam));
    progressIncrease += real(progressPerMatchingExam);
}
//progress of score
progressPerScoreOfMatchingExam = global.totalScoreOfExam / maxScore;
if(progressPerScoreOfMatchingExam &gt; 0)
{   ds_queue_enqueue(global.progressLifters_matchingExam, "scoreOfMatchingExam");
    ds_queue_enqueue(global.progressLifters_matchingExam, string(progressPerScoreOfMatchingExam));
    progressIncrease += real(progressPerScoreOfMatchingExam);
}
*/

// adding progress increase to total progress
if(global.ProgressScore + progressIncrease &gt; global.userProgressRange[1])   
{
    global.ProgressScore  +=  progressIncrease;
    global.userProgressLevel ++;
    global.userProgressRange[0] = global.userProgressRange[1];
    global.userProgressRange[1] = global.userProgressRange[2];
    global.progressLevelUped = 1;
}
else
{
    global.ProgressScore  +=  progressIncrease;
}

//adding score to total score
global.scoreDiff = global.totalScoreOfExam;
global.scoreCountUp = true;


requestAddress += "&amp;PS=";
requestAddress += string(progressIncrease) + ",";
size = ds_queue_size(global.progressLifters_matchingExam);
for(i=0; i&lt;size; i+=1)
{
    temp = ds_queue_dequeue(global.progressLifters_matchingExam);
    requestAddress += string(temp) + ",";
    ds_queue_enqueue(global.progressLifters_matchingExam, temp);
}


if(ds_exists(global.examList,ds_type_queue)) ds_queue_destroy(global.examList);
ds_queue_clear(global.examList_queue_backUp); //exam is completely done
if(ds_exists(global.examCardsID,ds_type_queue))  ds_queue_destroy(global.examCardsID);
if(ds_exists(global.failureArray,ds_type_queue)) ds_queue_destroy(global.failureArray);
if(ds_exists(global.examFailureCnt,ds_type_map)) ds_map_destroy(global.examFailureCnt);
if(ds_exists(global.examScorePerVocab,ds_type_map)) ds_map_destroy(global.examScorePerVocab);
if(ds_exists(global.progressLifters_matchingExam,ds_type_queue)) ds_queue_destroy(global.progressLifters_matchingExam);
global.totalScoreOfExam = 0;


scr_enqueueReqQ(requestAddress,"matchingExam");

with(obj_newExamRoom_loader)
{
    event_user(0); 
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(status == "matched")
{
    draw = 2;
    
    if(global.matchedCards == global.examCardN)//exam completed
    {

        draw = 3;
        image_alpha = 1;
        //score_exam_matching = 0;
        size = ds_queue_size(global.examCardsID);
        for (i=0; i&lt;size; i+=1)
        {
            ID = ds_queue_dequeue(global.examCardsID);
            with(ID)
                {
                    if(score_exam_matching == maxScore)
                    {
                        global.totalScoreOfExam += score_exam_matching;  
                    }
                    score_exam_matching = 0;

                    draw = 3;
                    image_alpha = 1;
                }   
        }
        //if(isPicture == true) // this if is for preventing from double run of alarm[1]
        alarm[1] = room_speed * 1;
    }
}
else if(status == "failed")
{
    pressed = false;
    draw = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(ExamCardPressed == 1)
if (global.canSelect == true and matched == false and pressed = false)
    {
        pressed = true;
        draw = 1;//selected
        global.choice[global.examSelectionNum , 0] = id;
        global.choice[global.examSelectionNum , 1] = string_copy(type,1,string_length(type)-2);
    
        //global.choice[global.examSelectionNum , 2] = isPicture;
        
        global.examSelectionNum ++;
        
        if(global.examSelectionNum == 2)
        {
            global.examSelectionNum = 0;
            if(global.choice[0,1]=global.choice[1,1]) //matched!!
            {

                var tempId = 0;
                if(global.choice[0,0].isPicture == false)
                    tempId = global.choice[0,0].id;
                else
                    tempId = global.choice[1,0].id;
                    
                
                if(tempId.faultCountForPopUp == 0)
                {
                    with(obj_newExamRoom_loader)
                    {
                        userExamCorrectCount += 1;
                  
                    }
                }/*else
                {
            
                }*/
                
                
                global.matchedCards ++;
                with(global.choice[0,0])
                {
                    status = "matched";
                    alarm[0] = room_speed  * 0.5;
                    matched = true;
                    global.fault += failureCnt;
                }                
                with(global.choice[1,0])
                {
                    status = "matched";
                    alarm[0] = room_speed  * 0.5;
                    matched = true;
                    global.fault += failureCnt;
                }
                
                ds_map_add(global.examFailureCnt ,verb, global.fault);
                ds_map_add(global.examScorePerVocab, verb , score_exam_matching);
                global.fault = 0;
                
                
                audio_play_sound(asset_get_index("snd_" + string(verb)),1,false);
                audio_sound_gain(asset_get_index("snd_" + string(verb)), global.CardVObj_X/200, 50);
                    
            }
            else
            {
            
                audio_play_sound(snd_exam_fault, 1, false);
                audio_sound_gain(snd_exam_fault, global.CardVObj_X/200, 50);

                var tempCheck = true;
                
                if(global.choice[0,0].isPicture == true and global.choice[1,0].isPicture == true)
                    tempCheck = false;
                    
                if(global.choice[0,0].isPicture == false and global.choice[1,0].isPicture == false)
                    tempCheck = false;
                        
                global.temp = tempCheck;
                

                
                with(global.choice[0,0])
                {
                    status = "failed";
                    alarm[0] = room_speed  * 0.5;

                    if(global.temp == true)
                    {
                        if(isPicture == false)
                        {
                            if(is_undefined(ds_map_find_value(global.wrongAnsweredCards, global.choice[0,0])))
                            {
                                ds_map_add(global.wrongAnsweredCards, global.choice[0,0].verb , 0);
                            }
                            score_exam_matching -= score_exam_matching * 0.2;
                            failureCnt ++;
                            
                         /*       if(!ds_queue_empty(global.examList_queue_backUp))
                        {
                            queueSize = ds_queue_size(global.examList_queue_backUp);
                            if(queueSize == global.examCardN)
                            {
                                for(var i = 0 ;i&lt; global.examCardN;i++)
                                {
                                    temp_backup = ds_queue_dequeue(global.examList_queue_backUp);
                                    ds_queue_enqueue(global.userAllExamsList ,temp_backup);
                                }
                                ds_queue_enqueue(global.examCardNumbers , global.examCardN);
                            }
                        }*/
                            
                            faultCountForPopUp = 1;
                            with(obj_newExamRoom_loader)
                            {
                                userExamWrongCount += 1;
                            }
                        }
                        ds_queue_enqueue(global.failureArray , verb);
                    }
                }
                with(global.choice[1,0]) // this is the same card as this obj_examCard.
                {
                    status = "failed";
                    alarm[0] = room_speed  * 0.5;
                    
                    if(global.temp == true)
                    {
                        if(isPicture == false)
                        {
                            if(is_undefined(ds_map_find_value(global.wrongAnsweredCards, global.choice[1,0])))
                            {
                                ds_map_add(global.wrongAnsweredCards, global.choice[1,0].verb , 0);
                            }
                            score_exam_matching -= score_exam_matching * 0.2;
                            failureCnt ++;
                            
                            faultCountForPopUp = 1;
                            with(obj_newExamRoom_loader)
                            {
                                userExamWrongCount += 1;
                            }
                            
                        }
                        ds_queue_enqueue(global.failureArray , verb);
                    }
                }
            }
            global.examSelectionNum = 0;
            
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected == 1)
{
    ExamCardPressed = 1;
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(isPicture == false)
    sprite = asset_get_index("spr_meaning");
//else
//    sprite = asset_get_index(string(type));

scale = 7/8;    
draw_set_font(fnt_bigJohn_gameWorld); 
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
col = make_color_rgb(128,67,53);
draw_set_color(col);
str_w = string_width(verb);
image_w = scale*200;

if(str_w &gt; (14/16)*image_w)
    text_scale = (14/16)/(str_w/image_w);
else
    text_scale = 1;
        /*
if(image_xscale &gt;= 0)
    if(str_w &gt; (14/16)*2*50*(1-image_xscale)/str_w)
        text_scale = (14/16)*2*50*(1-image_xscale)/str_w;
    else
        text_scale = 1-image_xscale;
        
else
    if(str_w &gt; (14/16)*2*50*(1+image_xscale)/str_w)
        text_scale = (14/16)*2*50*(1+image_xscale)/str_w;
    else
        text_scale = 1+image_xscale;

if(flag == 1 or flag == 2)
{
    if(str_w &gt; (14/16)*image_w)
        text_scale = (14/16)/(str_w/image_w);
    else
        text_scale = 1;
}
*/
    
switch(draw)
{
    case 0:
        draw_coefficient = scale;   image_alpha = 1;//draw_sprite_ext(sprite , 0 , x, y, 3/4, 3/4, 0, -1, 1);
    break;
    
    case 1:
        draw_coefficient = 1.1*scale; image_alpha = 1;//draw_sprite_ext(sprite , 0 , x, y, 3/4 + 0.1, 3/4+0.1, 0, -1, 1);
        text_scale = 1.1*text_scale;
    break;
    
    case 2:
        draw_coefficient = scale;   image_alpha = 0.5;//draw_sprite_ext(sprite , 0 , x, y, 3/4, 3/4, 0, -1, 0.5);
    break;
    
    case 3:
        image_alpha = scr_draw_DEC_INC(image_alpha , "DEC")
        draw_coefficient = image_alpha*scale; 
        //draw_sprite_ext(sprite , 0 , x, y, image_alpha*3/4, image_alpha*3/4, 0, -1, image_alpha);
    break;
}

draw_sprite_ext(spr_frame, 0 , x, y, draw_coefficient, draw_coefficient, 0, -1, image_alpha);
draw_sprite_ext(sprite , index , x, y, draw_coefficient*0.85, draw_coefficient*0.85, 0, -1, image_alpha);
counter++
if(counter == 3)
{
    index ++;
    counter = 0;
}  
if(isPicture == false)
{
    draw_set_font(fnt_bigJohn_gameWorld); 
    draw_text_transformed_color(x, y , verb, text_scale, text_scale, 0, col, col, col, col, image_alpha);
}
else
{
    draw_set_font(font2); 
    verb = 
    draw_text_transformed_color(x, y , verb_Fa, text_scale, text_scale, 0, col, col, col, col, image_alpha);
}
/*if(isPicture == false)
{
 draw_text_transformed(x, y, verb, text_scale , 1, 0);
 }*/

//draw_sprite ( sprite , 0 , x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>75,75</point>
    <point>75,75</point>
  </PhysicsShapePoints>
</object>
