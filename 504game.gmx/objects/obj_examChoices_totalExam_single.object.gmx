<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cardback</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-600</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_card_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ExamCardPressed = 0; 
global.activePoint = 0;
global.activePointDraw = 0;
isClickedPrev = false;
global.faultCntNewExamSingle = 0;
for(i=0 ; i&lt;4 ; i++)
    global.faultArray[i] = "";
maxScore = 4000;
progressIncrease = 0;
requestAddress ="";

counter = 0;
index =0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_newExamRoom_loader)
{   
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ExamCardPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(isAnswer != 2)
{
    if(ExamCardPressed == 1) ///if left pressed occured?
    {   
        ExamCardPressed = 0 ;
        if(isClickedPrev == false)
        {
            isClickedPrev = true;                 
                    //global.lastSelectedExamCardId = id;
            if(isAnswer == 1)
            {

                var alakiTest = asset_get_index("snd_" + string(verb));
                        
                audio_play_sound(asset_get_index("snd_" + string(verb)),1,false);
                audio_sound_gain(asset_get_index("snd_" + string(verb)), global.CardVObj_X/200, 50);

                if(global.pointExamSingle == maxScore)
                    pointStr = string(global.pointExamSingle);
                else
                    pointStr = "0";
                
                faultCntStr = string(global.faultCntNewExamSingle);
                ds_queue_clear(global.examList_queue_backUp); //exam is completely done
                //send server request
                    requestAddress  = global.baseUrl+"Exam/userExamResult?";
                    requestAddress += "Auth="+string(global.deviceId)+","+string(global.username);
                    requestAddress += "&amp;vocab="+verb+"&amp;score="+pointStr+"&amp;faultCount="+faultCntStr+"&amp;ff="+global.faultArray[0]+"&amp;sf="+global.faultArray[1]+"&amp;tf="+global.faultArray[2];
                    global.progressLifters_singleExam = ds_queue_create();
                    
                    //progress for write answer
                    
                    progressPerWriteFirstAnswer=0;
                    if(global.pointExamSingle == maxScore)
                        progressPerWriteFirstAnswer = 6;

                    if(progressPerWriteFirstAnswer &gt; 0)
                    {   ds_queue_enqueue(global.progressLifters_singleExam, "write-firstAnswer");
                        ds_queue_enqueue(global.progressLifters_singleExam, string(progressPerWriteFirstAnswer));
                        progressIncrease += real(progressPerWriteFirstAnswer);
                    }

                    
                    
                    /*//progress of ending exam : need corrections
                    progressPerExam = 10;
                    if(progressPerExam &gt; 0)
                    {   ds_queue_enqueue(global.progressLifters_singleExam, "exam");
                        ds_queue_enqueue(global.progressLifters_singleExam, string(progressPerExam));
                        progressIncrease += real(progressPerExam);
                    }
                    
                    //progress of score
                    progressPerScoreOfExam = global.pointExamSingle / (maxScore);
                    if(progressPerScoreOfExam &gt; 0)
                    {   ds_queue_enqueue(global.progressLifters_singleExam, "scoreOfExam");
                        ds_queue_enqueue(global.progressLifters_singleExam, string(progressPerScoreOfExam));
                        progressIncrease += real(progressPerScoreOfExam);
                    }*/
                    
                    
                    
                    // adding progress increase to total progress
                    if(global.ProgressScore + progressIncrease &gt; global.userProgressRange[1])   
                    {
                        global.ProgressScore  +=  progressIncrease;
                        global.userProgressLevel ++;
                        global.userProgressRange[0] = global.userProgressRange[1];
                        global.userProgressRange[1] = global.userProgressRange[2];
                        global.progressLevelUped = 1;
                    }
                    else
                    {
                        global.ProgressScore  +=  progressIncrease;
                    }
                    
                    //adding score to total score
                    if(global.pointExamSingle == maxScore)
                    {
                        global.scoreDiff = global.pointExamSingle;
                        global.scoreCountUp = true;
                    }



                    requestAddress += "&amp;PS=";
                    requestAddress += string(progressIncrease) + ",";
                    size = ds_queue_size(global.progressLifters_singleExam);
                    for (i=0; i&lt;size; i+=1)
                    {
                        temp = ds_queue_dequeue(global.progressLifters_singleExam);
                        requestAddress += string(temp) + ",";
                        ds_queue_enqueue(global.progressLifters_singleExam, temp);
                    }
                    

                    scr_enqueueReqQ(requestAddress , "exam");


                    global.temp = real(pointStr);
                    with(obj_newExamRoom_loader)
                    {
                        userExamTotalScore += global.temp;
                        if(global.faultCntNewExamSingle &gt; 0)
                        {    
                            userExamWrongCount += 1;

                        }
                        else
                        {
                            userExamCorrectCount += 1;

                        }
                    }

            
                    alarm[0] = room_speed/2;
                    //end of server request
                    
            }
            else
            {
                //global.coefficientOfSubExamPoint = global.coefficientOfSubExamPoint /2;
                //global.active = 1;
                //global.activePoint = 1;
                //global.activePointDraw = 1;
                
                audio_play_sound(snd_exam_fault, 1, false);
                audio_sound_gain(snd_exam_fault, global.CardVObj_X/200, 50);
                
                if(is_undefined(ds_map_find_value(global.wrongAnsweredCards, trueVerb)))
                {
                    ds_map_add(global.wrongAnsweredCards, trueVerb, 0);
                }
                
                global.faultArray[global.faultCntNewExamSingle] = string_lower(verb);
                global.faultCntNewExamSingle ++;
                global.pointExamSingle = 0.8 * global.pointExamSingle;

                //global.canSelectInExam = 1;

            }   
                //}
            //}
           // else 
            //    ExamCardPressed = 0 ;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NET
{
    ExamCardPressed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>counter++
if(counter == 3)
{
    index ++;
    counter = 0;
}  
if (isAnswer == 2)
{
    sprite = asset_get_index(string(type));
    draw_sprite_ext(spr_frame, 0 , x  , y, 1.3 , 1.3 , 0 , -1 , 1);
    draw_sprite_ext(sprite, index , x  , y, 0.85*1.3 , 0.85*1.3 , 0 , -1 , 1);
}
else
{
    scale = 5/6;    
    draw_set_font(fnt_bigJohn_gameWorld); 
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    col = make_color_rgb(128,67,53);
    draw_set_color(col);
    str_w = string_width(verb);
    image_w = scale*200;
    
    if((str_w)*1.2 &gt; (14/16)*image_w)
        text_scale = (14/16)/(str_w/image_w);
    else
        text_scale = 1.2;
    
    sprite = spr_meaning;
    if(isClickedPrev == false)
    {
        image_alpha = 1;
        draw_sprite_ext(spr_frame, 0 , x  , y, scale , scale , 0 , -1 , image_alpha);
        draw_sprite_ext(sprite, index , x  , y, scale*0.85 , scale*0.85 , 0 , -1 , image_alpha);
        draw_text_transformed_color(x, y , verb, text_scale, text_scale, 0, col, col, col, col, image_alpha);
    }
    else if(isClickedPrev = true)
    {
        image_alpha = 0.5;
        draw_sprite_ext(spr_frame, 0 , x  , y, scale , scale , 0 , -1 , image_alpha);
        draw_sprite_ext(sprite, index , x  , y, scale*0.85 , scale*0.85 , 0 , -1 , image_alpha);
        draw_text_transformed_color(x, y , verb, text_scale, text_scale, 0, col, col, col, col, image_alpha);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>75,75</point>
    <point>75,75</point>
  </PhysicsShapePoints>
</object>
