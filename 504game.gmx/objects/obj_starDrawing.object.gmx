<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alpha = 2*pi;
maxAlpha = alpha;
alpha_star = 6*pi;
maxDGA = alpha_star;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index = 0;

if(levelNumber == global.lastPlayedLevel_starDrawing /*global.indexOfLastLevel*/ and global.starImproved == 1)
{
    if(alpha_star &lt;= pi/2) alpha_star = pi/2;
    alphaS= sqrt(alpha_star)*sin(alpha_star)/(maxDGA);
    alpha_star -= pi/8;
    if(alpha_star == pi/2) 
    {
        global.starImproved = 0; 
        global.lastPlayedLevel_starDrawing = 0;
    }
    if (global.threeStarOfLevels[(levelNumber-1)*3] &lt; 3)
    {   
        for (j=0 ; j&lt;3 ; j++)
        {
            index += global.threeStarOfLevels[(levelNumber-1)*3 + j];
            //draw_text(x , y + 50 , global.userGameScores[(real(global.levelNum)-1)*global.subLevelsNum + real(subLevelNum)-1]);
            //draw_text(x, y+70 ,(real(global.levelNum)-1)*global.subLevelsNum + real(subLevelNum) );
        }
        spr_width = sprite_get_width(spr_levelNum_1);
        draw_sprite_ext(spr_levelStar, index , x + spr_width/2 , y -35 , (1+alphaS) , (1+alphaS) , 0 , -1 , 1);
    }
}
else
{
    if (global.threeStarOfLevels[(levelNumber-1)*3] &lt; 3)
    {   
        for (j=0 ; j&lt;3 ; j++)
        {
            index += global.threeStarOfLevels[(levelNumber-1)*3 + j];
            //draw_text(x , y + 50 , global.userGameScores[(real(global.levelNum)-1)*global.subLevelsNum + real(subLevelNum)-1]);
            //draw_text(x, y+70 ,(real(global.levelNum)-1)*global.subLevelsNum + real(subLevelNum) );
        }
        spr_width = sprite_get_width(spr_levelNum_1);
        draw_sprite_ext(spr_levelStar, index , x + spr_width/2 , y -35 , 1 , 1 , 0 , -1 , 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
