<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_submit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-650</depth>
  <persistent>0</persistent>
  <parentName>obj_key_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Key object for the enter key
image_index = 0;
image_speed = 0;
flag= 1;
text = "";
text1 = "";
text2 = "";
url = "";
idd = "";
// keeping length of username and email input
username_length = 0; 
email_length = 0;

//// is register accepted in server?
global.registerOK = 0;
drawPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.registerOK == 1)
{
    global.registerOK = 0;
    //initialization of room
    dwidth = ds_map_find_value(global.roomInt , "dwidth");
    dheight = ds_map_find_value(global.roomInt , "dheight");
    xview = ds_map_find_value(global.roomInt , "xview");
    yview = ds_map_find_value(global.roomInt , "yview");
    vwidth = ds_map_find_value(global.roomInt , "vwidth");
    vheight = ds_map_find_value(global.roomInt , "vheight");
    room_set_view(room_loading, 0, 1, xview, yview , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
    room_goto(room_loading);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawPressed == 1)
    drawPressed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawPressed == 1)
{
    drawPressed = 2;
    email_error = 0;
    username_error = 0;
        
    username_length = string_length(global.text_input_username);
    email_length = string_length(global.text_input_email);
    
    if(username_length &gt;= 4)
    {
        scr_enqueueReqQ(global.baseUrl+"Authentication/register?username="+global.text_input_username+"&amp;email="+global.text_input_email,"register");
    }
    
    /*if (email_length &lt; 3)
        with(obj_registerField)
            {
                if(type == 2)
                {
                    id.emailError = "length";
                }
            }*/
    
    if (username_length &lt; 4)
    {
        drawPressed = 0;
        with(obj_registerField)
            {
                if(type == 2)
                {
                    id.usernameError = "length";   
                }
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected ==1)
    if(drawPressed == 0)
        drawPressed = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(drawPressed)
{
    case 0:
        draw_self();
    break;
    
    case 1:
        draw_sprite_ext(spr_submit , 0 , x , y , 0.9 , 0.9,0 , -1 , 1 );
    break;
    
    case 2:
        col = make_color_rgb(161,170,197);
        draw_sprite_ext(spr_submit , 0 , x , y , 1 , 1,0 , col , 0.8 );
    break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
