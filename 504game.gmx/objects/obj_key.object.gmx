<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_key</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-650</depth>
  <persistent>0</persistent>
  <parentName>obj_parentOfKey</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DON'T CHANGE THESE!

// These lines just set the width + height for the key and hint. DO NOT CHANGE.
// The following 2 lines set the width and height for the regular keys.
width = scr_adjust_x( 68 );
height = scr_adjust_y( 58 ); 

// The following 2 lines set the width and height for the hints. Hints are the little boxes that appear of the letter when you press and hold.
hintWidth = scr_adjust_x( 94 );
hintHeight = scr_adjust_y( 84 );

// The current symbol that is shown on this key.
currentKey = ' ';

// The letter that this key represents. DO NOT CHANGE.
letter = ' ';

// The alternate symbols that this key represents. DO NOT CHANGE.
alt1 = ' ';
alt2 = ' ';

// While this key is pressed, this variable will = 1, otherwise 0. DO NOT CHANGE.
pressed = 0;

// This keeps track of where the key will sit in relation to the keyboard. DO NOT CHANGE.
offsetX = x - obj_keyboard.x;
offsetY = y - obj_keyboard.y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected ==1)
{
    /// Check if pressed
    
    // This moves the key in case the obj_keyboard moves. DO NOT CHANGE.
    x = obj_keyboard.x + offsetX;
    y = obj_keyboard.y + offsetY;
    
    // Checks to see if capslock is on.
    if ( obj_keyboard.altLock == false ) { 
                                         if ( obj_keyboard.capsLock == true ) { letter = string_upper( letter ); } else { letter = string_lower( letter ); }
                                         currentKey = letter;
                                         } else {
                                         if ( obj_keyboard.capsLock == true ) { currentKey = alt2; } else { currentKey = alt1; }
                                         }
                                         
    
    
    // pressed is set to 0 by default. DO NOT CHANGE.
    pressed = 0;
    
    //The depth is set to 0 here because if a hint will be shown, the depth will be set to -1; You might want to change this, but if you do, make sure you change the depth = -1; part down below to be lower than this!
    depth = -650;
    
    // The following checks to see if the key is currently being pressed. If yes, it lowers the depth in case a hint appears, we don't want it to go under another key! DO NOT CHANGE.
    if (mouse_check_button(mb_any) &amp;&amp; device_mouse_x(0) &gt; ( x - (width / 2) ) &amp;&amp; device_mouse_x(0) &lt; ( x + (width / 2) ) &amp;&amp; device_mouse_y(0) &gt; ( y - (height / 2) ) &amp;&amp; device_mouse_y(0) &lt; ( y + (height / 2) ))
        { pressed = 1;
         depth = -652; // If you change the depth above, make this ALWAYS lower than the regular depth!
        if(instance_exists(obj_show_dictionary_result_btn))
            with(obj_show_dictionary_result_btn)
                {verb_existance_error = 0;}
        }
        
    // This checks if the key was released, if it was, add this key's letter to the keyboard_string. DO NOT CHANGE. 
    if (mouse_check_button_released(mb_any) &amp;&amp; device_mouse_x(0) &gt; ( x - (width / 2) ) &amp;&amp; device_mouse_x(0) &lt; ( x + (width / 2) ) &amp;&amp; device_mouse_y(0) &gt; ( y - (height / 2) ) &amp;&amp; device_mouse_y(0) &lt; ( y + (height / 2) ))
        {
        /*NGR*/
        
            switch (global.keyboardInputID.type)
            {
                case 0:
                break;
                
                case 1:
                    if(string_length(keyboard_string)&lt;13)//username
                        keyboard_string += currentKey;
                break;
                
                case 2:
                    if(string_length(keyboard_string)&lt;21)//email
                        keyboard_string += currentKey;
                break;
                
                case 3:
                    if(string_length(keyboard_string)&lt;13)//dictionary
                        keyboard_string += currentKey;
                break;
            }
        
        /*NGR*/
        //if(string_length(keyboard_string)&lt;13)
        //    keyboard_string += currentKey;
        if ( obj_keyboard.altLock == false ) { obj_keyboard.capsLock = false; }
        audio_play_sound( snd_type, 2, 0 ); // You can change this if you want a different sound (or no sound) to play.
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the key and hint

// Draws the key. DO NOT CHANGE.
draw_sprite_stretched( sprite_index, pressed, x - ( width / 2) , y - ( height / 2), width, height );


// Draws the letter that this key represents. DO NOT CHANGE.
draw_set_color(c_black);
draw_set_valign( fa_middle );
draw_set_halign( fa_center );

draw_set_font(fnt_bigJohn);
draw_set_font(fnt_keyboard_arial);
col = make_color_rgb(40 , 40 , 40 );
draw_set_color(col);
draw_text( x, y-5, currentKey );
draw_set_color(c_black);

// This waits 30 steps after pressing the key to make the hint appear. You can change the 30 to another number if you want the hint to appear later or earlier. Don't change anything else though.
//if ( pressed == 1 &amp;&amp; obj_keyboard.holdTimer &gt; 30 ) {
//draw_sprite_stretched( spr_hint, 0, x - (hintWidth / 2) , y - ( height * 2 ), hintWidth, hintHeight);
//draw_text_transformed( x , y - (height*1.5), currentKey, 1.5, 1.5, 0);
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>37,27</point>
    <point>37,37</point>
  </PhysicsShapePoints>
</object>
