<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*gameType:
cardMatching_hidden_En/Pic          = 0
cardMatching_hidden_En/Fa           = 1
selectingFromTwoAnswer-PIC/En-En    = 2  
selectingFromTwoAnswer-En/Pic-Pic   = 3
voiceDetection_Pic/4*voice          = 4
voiceDetection_voice/4*Pic          = 5                                       
*/


gameType = 0;

//number of games based on sub level number
switch(real(global.subLevelNum))
{
    case 1:
        levelGameNum = 3;
    break;
    
    case 2:
        levelGameNum = 4;
    break;
    
    case 3:
        levelGameNum = 5;
    break;
    
    case 4:
        levelGameNum = 6;
    break;
    
    case 5:
        levelGameNum = 6;
    break;
    
    case 6:
        levelGameNum = 7;
    break;
    
    case 7:
        levelGameNum = 8;
    break;
    
}
randomize();
rand = irandom(2);
numberOfGames = levelGameNum+rand;
numberOfGamesCounter = 0;
for(i=0 ; i&lt;6 ; i++)
    gameTypeFrequency[i] = 0;

//point
levelMaxPoint = ds_map_find_value(global.maxScore , real(global.subLevelNum)); //max score that can be earn

global.eachGamePoint = levelMaxPoint / numberOfGames ; 
global.levelTotalScore = 0;
global.requestAddress = "";

event_user(0);
var timer = instance_create(200,100,obj_gameCntUp); 



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flag = true;
while(flag == true)
{
    randomize();
    //gameType = irandom(5);
    gameType = irandom(2);
    sum = 0;
    for(i=0 ; i&lt;3 ; i++)
        sum += gameTypeFrequency[i];
    M = sum / 3;
    if(gameTypeFrequency[gameType] &gt; M + 0.1)
        flag = true;
    else
        flag = false;
}

global.gameType = gameType;
global.requestAddress += "&amp;gtype=" + string(global.gameType) + ",";

numberOfGamesCounter++;
if(numberOfGames+1 &gt; numberOfGamesCounter)
{
    switch(gameType)
    {
        //cardMatching_hidden_En/Pic
        case 0:
        hiddenMatching_En_Pic = instance_create(100 , 100 , obj_hiddenMatching_En_Pic);
        global.gameObject = "obj_hiddenMatching_En_Pic";
        gameTypeFrequency[0]++;
        break;
        
        //cardMatching_hidden_En/Fa
        case 1:
        hiddenMatching_En_Fa = instance_create(100 , 100 , obj_hiddenMatching_En_Fa);
        global.gameObject = "obj_hiddenMatching_En_Fa";
        gameTypeFrequency[1]++;
        break;
        
        //selectingFromTwoAnswer-PIC/En-En
        case 2:
        selectTwo_Pic_En_En = instance_create(100 , 100 ,obj_selectTwo_Pic_En_En);
        global.gameObject = "obj_selectTwo_Pic_En_En";
        gameTypeFrequency[2]++;
        break;
        
        //selectingFromTwoAnswer-En/Pic-Pic
        case 3:
        break;
        
        //voiceDetection_Pic/4*voice
        case 4:
        break;
        
        //voiceDetection_voice/4*Pic
        case 5:
        break;
    }
}
else
{

    /*with(asset_get_index(global.gameObject))
    {  
        //show_message(listOfSpritesForGameResult);
        global.gameResultCount = array_length_1d(listOfSpritesForGameResult);
        
        for(var i =0 ; i &lt; array_length_1d(listOfSpritesForGameResult); i++)
        {
            global.sprites_gr[i] = asset_get_index(listOfSpritesForGameResult[i]);
        }
            
        for(var i =0 ; i &lt; array_length_1d(listOfItemsForGameResult); i++)
        {
            global.items_gr[i]          = ds_map_find_value(global.vocab_card,string_lower(listOfItemsForGameResult[i]));
            global.items_gr_meaning[i]  = ds_map_find_value(global.meaning_map_Fa_short , global.items_gr[i]);
        }
    }
    */
    global.gameResultCount = ds_map_find_value(global.subLevelVocabsNum , real(global.levelNum));
    
    for(i= 0 ; i&lt; global.gameResultCount+1 ; i++)        
    {
        global.sprites_gr[i]        = string_lower(global.arrayOfCards[(real(global.levelNum)-1)*14 + 2*i]);
        global.items_gr[i]          = ds_map_find_value(global.vocab_card,string_lower(global.arrayOfCards[(real(global.levelNum)-1)*14 + 2*i+1]));
        global.items_gr_meaning[i]  = ds_map_find_value(global.meaning_map_Fa_short , global.items_gr[i]);
    }

    global.scoreDiff = global.levelTotalScore;
    //show_message(global.levelTotalScore);
    global.lastLevelScore  = global.levelTotalScore; //500000;
    global.scoreCountUp = true;
    
    var tempSeconds = "";
    var tempMinutes = "";

    if(floor(global.secondsForPlayer/*global.seconds*/) &lt; 10)
        tempSeconds += "0";
        
    tempSeconds += string(floor(global.secondsForPlayer/*global.seconds*/));

        
    if(floor(global.minutesForPlayer/*global.minutes*/) &lt; 10)
        tempMinutes += "0";
    
    tempMinutes += string(floor(global.minutesForPlayer/*global.minutes*/));

    global.lastLevelPlayedTime = tempMinutes + ":" + tempSeconds;//scr_convert_second_to_time(floor(real(global.totalMiniGameTime)), 1);
    global.popupType = 3;
    var popupBack    = instance_create(0,0,obj_popup_back);
    
    stars = "0,0,1";
    gid           = (real(global.levelNum) - 1)*7 + real(global.subLevelNum);
    global.requestAddress = "&amp;stars=" + string(stars) + "," + global.requestAddress;
    global.requestAddress = "&amp;gstate=" + string(gid) + "," + global.requestAddress;
    global.requestAddress = "Auth="+string(global.deviceId)+","+string(global.username) + global.requestAddress;
    global.requestAddress = global.baseUrl + "Game/userGameResult?" + global.requestAddress;
    scr_enqueueReqQ(global.requestAddress,"gameResult");
    
    //show_message(global.requestAddress);
    //initializing room
    dwidth  = ds_map_find_value(global.roomInt , "dwidth");
    dheight = ds_map_find_value(global.roomInt , "dheight");
    xview   = ds_map_find_value(global.roomInt , "xview");
    yview   = ds_map_find_value(global.roomInt , "yview");
    vwidth  = ds_map_find_value(global.roomInt , "vwidth");
    vheight = ds_map_find_value(global.roomInt , "vheight");
    
    level = 0;
    if(((real(global.levelNum)-1)*7 + real(global.subLevelNum))+1 &lt;43)
        level = ((real(global.levelNum)-1)*7 + real(global.subLevelNum))+1
    else 
        level = 42;
        
    lastPlayed_y = ds_map_find_value(global.yPositionOfLevelNumbers , level );
    yBasedLastPlayed = lastPlayed_y - vheight*1/8;
    if(yBasedLastPlayed &gt; 5660 - vheight)
        yBasedLastPlayed = 5660 - vheight;
    
    //room_set_view(room_levelSelection, 0, 1, xview, yBasedLastPlayed , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
    //room_goto(room_levelSelection);
    //end of initializing room
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
