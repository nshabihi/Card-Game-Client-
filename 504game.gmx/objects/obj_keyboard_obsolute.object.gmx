<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Virtual Keyboard Controller
image_index = 0;
image_speed = 0;
active = 0;
// Ensure only one instance exists.
if(instance_number(obj_keyboard) &gt; 1) {
  instance_destroy();
  exit;
}
// Move keyboard start position out of sight.
if(view_enabled){
  // use view position if views are enabled
  y = view_yview[0]+view_hview[0]+50; // alter to suit view number used.
}else{
  y = room_height+50;           // or use room dimentions
}
ystart = y;
x -= 192;                       // move it left 
targety = y-400;                // the height to raise to from the bottom
direction = 90;
speed = 8;
// Clear input variable and keyboard buffer
keyboard_lastkey = -1;
global.text_input = "";
blink = false; // Used for fake text cursor
keycode = -1;
global.max_input = 10;

// The following can be overriden when created
created_by = noone;
input_caption = "Enter Text: ";
max_chars = 10;     // max characters to accept
char_type = 0;
// 0 = letters and numbers
// 1 = letters only
// 2 = numbers only

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fake text input cursor
blink = !blink;
alarm[0] = room_speed/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Virtual keyboard controller
if(active == 0){ // move keyboard up into position
  if(y &lt; targety){
    speed = 0;
    y = targety;
    active = 1;
    /* create the buttons. */
    event_user(0);
  }
  exit;
}
// Also allows a physical keyboard if there is one.
if(active == 1){ 
  if(keyboard_lastkey &gt; 0){
    keycode = keyboard_lastkey;       // grab its ASCII code
    keyboard_lastkey = -1;            // Clear the last key pressed
    // Decimal point / Full Stop check
    if(keyboard_lastchar == "."){
      keyboard_lastchar = "";
      if(string_length(global.text_input) &lt; global.max_input){
        global.text_input += ".";
      }
      exit;
    }
    // Check for delete ot backspace
    if(keycode == vk_delete || keycode == vk_backspace){
      // Check there is at least 1 character to remove
      if(string_length(global.text_input) &gt; 0){
        global.text_input = string_copy(global.text_input,1,string_length(global.text_input)-1);
      }
      exit;
    }
    // Prevent the player entering too many characters
    if(string_length(global.text_input) &lt; global.max_input){
      if(keycode == vk_enter){
        // Terminate input
        active = 2;
        exit;
      }
      // Character types check
      switch (char_type){
        case 0:
          char = string_lettersdigits(chr(keycode));
          if(keycode == 32){char = chr(32);}
          break;
        case 1:
          char = string_letters(chr(keycode));
          if(keycode == 32){char = chr(32);}
          break;
        case 2:
          char = string_digits(chr(keycode));
      }
      global.text_input += char; 
    }
  }
}
if(active == 2){ // Input finised
  alarm[0] = -1;
  blink = false;
  // destroy all key instances and put keyboard away
  active = 3;
  with (obj_key_parent) {instance_destroy();}
  direction = 270;
  speed = 8;
}
if(active == 3 &amp;&amp; y &gt; ystart){
  with (created_by) {result = 1;}
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create instance of each key
global.max_input = max_chars;
// Numbers
if(char_type != 1){
  for(i=0; i&lt;9; i++){
    with (instance_create(x-53+(i*45),y-93,obj_letters)){     // 1..9
      value = other.i+49;
    }
  }
  with (instance_create(x+304,y+16,obj_letters)){value = 48;} // 0 key
}
instance_create(x+336,y+16,obj_decimal);
// Letters
if(char_type &lt; 2){
  for(i=0; i&lt;11; i++){
    with (instance_create(x-53+(i*45),y+138,obj_letters)){     // A..K
      value = other.i+65;
    }
  }
  for(i=0; i&lt;11; i++){
    with (instance_create(x-53+(i*45),y+183,obj_letters)){     // L..V
      value = other.i+76;
    }
  }
  for(i=0; i&lt;4; i++){
    with (instance_create(x-53+(i*45),y+228,obj_letters)){     // W..Z
      value = other.i+87;
    }
  }
  instance_create(x+148,y+228,obj_space);                     // Space
}
// Delete and enter keys are common to all char_types.
instance_create(x+283,y+228,obj_del);
instance_create(x+358,y+228,obj_enter);
// Start cursor blinking
alarm[0] = room_speed/2;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self();
draw_set_color(c_navy);
draw_set_font(fnt_bigJohn);
draw_set_halign(fa_left);
if(blink){
  draw_text(x,y+32,input_caption+global.text_input+"|");
}else{
  draw_text(x,y+32,input_caption+global.text_input);
}
/*
draw_text(32,128,"keycode "+string(keycode));
draw_text(32,150,"Back "+string(vk_backspace));
draw_text(32,350,"Delete "+string(vk_delete));
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>192,192</point>
  </PhysicsShapePoints>
</object>
