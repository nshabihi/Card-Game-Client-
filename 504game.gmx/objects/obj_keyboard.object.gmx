<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-650</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize the keyboard
capsLock = false; // Whether caps lock is on or off. It works more like a shift keythan capslock.
altLock = false; // Used to access the alternate set of keys.

// This is used to adjust the height of the keyboard to fit your device's screen.
if (os_type == os_android or os_type == os_ios){
                            keyboardWidth = display_get_width();
                            } else {
                            keyboardWidth = view_wport[0];  // Used when testing on windows machine.
                            }

xview  = view_xview[0];
yview  = view_yview[0];
vwidth = view_wview[0];
vheight= view_hview[0];

keyboardWidth = vwidth;
keyboardHeight = round ( (180 * keyboardWidth) / 800 ); 

// moving keyboard up
image_index = 0;
image_speed = 0;
active = 0;
// Ensure only one instance exists.
if(instance_number(obj_keyboard) &gt; 1) {
  instance_destroy();
  exit;
}
// Move keyboard start position out of sight.
if(view_enabled){
  // use view position if views are enabled
  y = vheight + yview + 50; //view_yview[0]+view_hview[0]+50; // alter to suit view number used.
}else{
  y = room_height+50;               // or use room dimentions
}

ystart = y;
global.targety = 0;
with (global.keyboardInputID)
{
    if (type == 3)
    {
        global.targety = 1;
    }
        
}
if(global.targety == 1)
targety = vheight + yview - keyboardHeight - 20; //   room_height - keyboardHeight-20;     // the height to raise to from the bottom
else 
targety = vheight + yview -keyboardHeight-20; //room_height - keyboardHeight-20;
global.targety = 0;

direction = 90;
speed = 8;

////////////////////////////////

holdTimer = 0; // The holdTimer is used to delaythe hints from appearing too soon.

// The following chunk goes through the alphabet and creates an obj_keyinstance for each letter.
keyboardLetters = "qwertyuiopasdfghjklzxcvbnm";
keyboardAlt = "1234567890,$%&amp;*-+()!" + '"' + "':;/?";
keyboardAlt2 = "~`|•√π÷×{}£¢€°^_=[]™®©¶\&lt;&gt;";
keyboardNextLetterX = scr_adjust_x( 40 );
keyboardNextLetterY = scr_adjust_y( 28 );

while (string_length( keyboardLetters ) != 0) {
    keyboardString_Next = instance_create( x+keyboardNextLetterX, y + keyboardNextLetterY, obj_key);
    keyboardString_Next.letter = string_char_at(keyboardLetters,1);
    keyboardString_Next.alt1 = string_char_at(keyboardAlt,1);
    keyboardString_Next.alt2 = string_char_at(keyboardAlt2,1);
    keyboardLetters = string_delete(keyboardLetters, 1, 1);
    keyboardAlt = string_delete(keyboardAlt, 1, 1);
    keyboardAlt2 = string_delete(keyboardAlt2, 1, 1);
    keyboardNextLetterX += scr_adjust_x( 78 );
    if ( string_char_at(keyboardLetters,1) == 'a') {keyboardNextLetterX = scr_adjust_x( 88 ); keyboardNextLetterY += scr_adjust_y( 60 );}
    if ( string_char_at(keyboardLetters,1) == 'z') {keyboardNextLetterX = scr_adjust_x( 166 ); keyboardNextLetterY += scr_adjust_y( 60) ;}
}

// Create the caps lock, delete, and space bar.

//if(room != room_dictionary) instance_create( x+ scr_adjust_x( 70 ), y + scr_adjust_y( 148 ), obj_capslock);
if(room != room_dictionary) instance_create( x+ scr_adjust_x( 70 ), y + scr_adjust_y( 148 ), obj_altlock);
instance_create( x+ scr_adjust_x( 725 ), y + scr_adjust_y( 148 ), obj_delete);
instance_create( x+ scr_adjust_x( 400 ), y + scr_adjust_y( 208 ), obj_space);
//if(room != room_dictionary) instance_create( x+ scr_adjust_x( 100 ), y + scr_adjust_y( 208 ), obj_altlock);
//instance_create( x+ scr_adjust_x( 700 ), y + scr_adjust_y( 208 ), obj_newline);

// Create the comma and period keys.
keyboardString_Next = instance_create( x+ scr_adjust_x( 200 ), y + scr_adjust_y( 208 ), obj_key);
keyboardString_Next.letter = '@'; //',';
keyboardString_Next.alt1 = '@'; //',';
keyboardString_Next.alt2 = '@'; //',';
keyboardString_Next = instance_create( x+ scr_adjust_x( 600 ), y + scr_adjust_y( 208 ), obj_key);
keyboardString_Next.letter = '.';
keyboardString_Next.alt1 = '.';
keyboardString_Next.alt2 = '.';

with( obj_key){ currentKey= letter; }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected ==1)
{
    /// Move the keyboard to match the view / Advance holdTimer
    
    // This just moves the keyboard to be centered at the bottom of view 0. You can remove these 2 lines and manually set the keyboard's x and y if you want.
    // All of the keys will automatically move when the keyboard moves!
    x = view_xview[0];
    //y = view_yview[0] + 750 /*view_hview[0]*/ - keyboardHeight;
    
    
    // This advances the holdTimer used to display hints.
    if (mouse_check_button(mb_any)){ holdTimer += 1; } else {holdTimer = 0; }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Virtual keyboard controller

// move keyboard up into position
if(active == 0)
{ 
  if(y &lt; targety){
    speed = 0;
    y = targety;
    active = 1;
    /* create the buttons. */
    event_user(0);
  }
  exit;
}
// keyboard is in its stable position
if(active == 1)
{ 

}

//moving input down: input finished
if(active == 2){ 
  alarm[0] = -1;
  blink = false;
  // destroy all key instances and put keyboard away
  active = 3;
  with (obj_key_parent) {instance_destroy();}
  direction = 270;
  speed = 8;
}

if(active == 3 &amp;&amp; y &gt; ystart){
  with (created_by) {result = 1;}
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
