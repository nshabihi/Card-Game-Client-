<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cardback</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_card_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xview  = view_xview[0];
yview  = view_yview[0];
vwidth = view_wview[0];
vheigth= view_hview[0];
//for drawing bounes
drawAlpha = 2*pi;
alpha = 1;
maxDGA = drawAlpha;
//////////////////////

counter = 0; //for animation display
progressPerGame = 0;
progressPerLesson = 0;
progressPerScore = 0;
progressPerBeatTime = 0;
progressPerBeatScore = 0;

global.tempTime = 0;

//ds_map_add(global.cardSeen , type , global.selectedTimesOfCard[real(string_copy( type , 6 , 1))*2-1 + real(string_copy( type , 8 , 1))]);

//real(string_copy( type , 6 , 1))*2-1 + real(string_copy( type , 8 , 1))

global.firstPress = 0;
global.starChangeFlag = 1;

sprite = spr_cardback;
type = "null";
flipped = false ;
matched = false;

global.starColor = 0;

flag=0;   //// deciding the card situation(flipping, card back ,....)
flipCnt = 0; // keeps fliping times (for one 360 degree flip) for every flip 
flipCntLevel = 0;
_spr = spr_cardback;
_flip_y = 0;
_flip = true;


_image_xscale = 0;
image_xscale = 1;

global.moveFlag = 1;
global.move = global.validMove ; 

global.movess=0;

CntOfFlipForThisCard = 0; // the times that card flipped in one game until matching occur

with (id)
{
selectedTimesOfCard = 0 ;         // how many times a card was selected in this game 
selectedTimesOfMatchedCard = 0;  // how many times matche of this card was selected in this game 
}

flg = false;
isCreated = 0;
global.feedback1 = 0;

tttt = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.showFeedback = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_fun_backgound,10,true);
audio_resume_sound(snd_fun_backgound);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lock[(real(global.levelNum) - 1)*7 + real(global.subLevelNum)] = 0;  
global.imLock = (real(global.levelNum) - 1)*7 + real(global.subLevelNum); // level that now become unlocked

//initializing room
dwidth = ds_map_find_value(global.roomInt , "dwidth");
dheight = ds_map_find_value(global.roomInt , "dheight");
xview = ds_map_find_value(global.roomInt , "xview");
yview = ds_map_find_value(global.roomInt , "yview");
vwidth = ds_map_find_value(global.roomInt , "vwidth");
vheight = ds_map_find_value(global.roomInt , "vheight");
room_set_view(room_SubLevels, 0, 1, xview, yview , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
room_goto(room_SubLevels);
//end of initializing room

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.threeTime == 2 or real(global.subLevelNum) &gt; 4)
{
    global.starLevelEnd = 2;
    

    //if (  (real(global.levelNum)-1)*7+(real(global.subLevelNum)-1) &gt; global.indexOfLastLevel)
    //{

        //TIME
        bestTime= 0;
        bestTime = scr_bestTimeForGame();
        
        if(real(global.subLevelNum)&lt; 5)
        {
            global.miniGameTime[2] -= global.miniGameTime[1];
            global.miniGameTime[1] -= global.miniGameTime[0];
        }
        global.totalMiniGameTime = global.miniGameTime[0]+global.miniGameTime[1]+global.miniGameTime[2];

        
        //end of TIME
        
        //SCORE
        var levelCoefficient = ds_map_find_value(global.levelCoefficient ,real(global.levelNum));
        
        global.scoreDiff =  (global.totalFBScore +
                            (5000 / sqrt(global.totalMiniGameTime / bestTime))*
                            log2((global.miniGameScore[0]+global.miniGameScore[1]+global.miniGameScore[2])*1.5))*levelCoefficient;
        if(real(global.subLevelNum)&gt; 4)
            global.scoreDiff = global.scoreDiff * 3;
        //end of SCORE
        

        
        //STARS
        var scoreProportion = global.scoreDiff / (levelCoefficient*ds_map_find_value(global.maxScore , real(global.subLevelNum)));
        var starCnts = scr_calcStarsCnt_gameResult(scoreProportion);

        
        for (i=0 ; i&lt;3 ; i++)
        {
            if(global.threeStarOfLevels[(real(global.levelNum)-1)*7+(real(global.subLevelNum)-1)*3+i] &gt; global.threeStarMemory[i])
            {
                global.threeStarOfLevels[(real(global.levelNum)-1)*7+(real(global.subLevelNum)-1)*3+i] = global.threeStarMemory[i];
                global.starImproved = 1;
                global.lastPlayedLevel_starDrawing = (real(global.levelNum)-1)*7+(real(global.subLevelNum));

            }
        }
        //end of STARS
        
/////////////////////       progress bar         /////////////////////    
//initialization
progressIncrease = 0;

//last played level
progressPerGame = 0;
if((real(global.levelNum)-1) * 7 + real(global.subLevelNum)&gt; global.indexOfLastLevel)
    progressPerGame += 2*real(global.levelCardsN)*levelCoefficient; //first time of playing this level
else
    progressPerGame += 2*1/3*real(global.levelCardsN)*levelCoefficient; 

if(progressPerGame &gt; 0)
{   ds_queue_enqueue(global.progressLifters, "game");
    ds_queue_enqueue(global.progressLifters, string(progressPerGame));
    progressIncrease += real(progressPerGame);
}

//last played lesson
progressPerLesson = 0;
if((real(global.levelNum)-1) * 7 + real(global.subLevelNum)&gt; global.indexOfLastLevel)
{
    if(real(global.subLevelNum) == 7)
        progressPerLesson = (20*real((global.levelNum)));
    if(progressPerLesson &gt; 0)
    {   ds_queue_enqueue(global.progressLifters, "lesson"); 
        ds_queue_enqueue(global.progressLifters, string(progressPerLesson)); 
        progressIncrease += real(progressPerLesson);
    }
}

//total score
//leaved due to complexity of progress calculating
/*progressPerScore = 0;
progressPerScore = scr_AmountOfProgressForTotalScore();
if(progressPerScore &gt; 0)
{   ds_queue_enqueue(global.progressLifters, "Tscore");
    ds_queue_enqueue(global.progressLifters, string(progressPerScore));
    progressIncrease += real(progressPerScore);
}

//feedback  TODO
    //leaved due to complexity : saving the previous feedbacks of each game is necessary --&gt; if(...&gt; max) progress++
    
//beat best times
progressPerBeatTime = 0;
progressPerBeatTime = real(global.levelCardsN)*3*scr_amountOfProgressForBestTimes();

if(progressPerBeatTime &gt; 0)
{   ds_queue_enqueue(global.progressLifters, "beatTime");
    ds_queue_enqueue(global.progressLifters, string(progressPerBeatTime));
    progressIncrease += real(progressPerBeatTime);
}

//beat best scores
progressPerBeatScore = 0;
progressPerBeatScore = real(global.levelCardsN)*3*scr_amountOfProgressForBestScores();
if(progressPerBeatScore &gt; 0)
{   ds_queue_enqueue(global.progressLifters, "beatScore");
    ds_queue_enqueue(global.progressLifters, string(progressPerBeatScore));
    progressIncrease += real(progressPerBeatScore);
}
*/

if(global.ProgressScore + progressIncrease &gt; global.userProgressRange[1])   
{
    global.ProgressScore  +=  progressIncrease;
    global.userProgressLevel ++;
    global.userProgressRange[0] = global.userProgressRange[1];
    global.userProgressRange[1] = global.userProgressRange[2];
    global.progressLevelUped = 1;
}
else
{
    global.ProgressScore  +=  progressIncrease;
}
                   
/////////////////////  preparing data for server /////////////////////

// sum of all user remained movements in three plays
gameMovements = global.miniGameScore[0]+global.miniGameScore[1]+global.miniGameScore[2]; 

// game id
gid           = (real(global.levelNum) - 1)*7 + real(global.subLevelNum);

// this value is 3 for first 4 lavels and 1 for last 3 levels
if(real(global.subLevelNum) &lt;5)
    gRoundCount   = 3; 
else
    gRoundCount = 1;

    
gameScores[0] = floor(global.scoreDiff); // score gained from first play
global.userGameScores[gid - 1] = gameScores[0];

gameTimes[0]  = floor(global.miniGameTime[0]*10); // time of frist play
if(gRoundCount == 3)
{
    gameTimes[1]  = floor(global.miniGameTime[1]*10); // time of second play
    gameTimes[2]  = floor(global.miniGameTime[2]*10); // time of third play
}

gameStars[0]   = global.threeStarMemory[0];    // star of first play: 0,1 or 2
gameStars[1]   = global.threeStarMemory[1];    // star of second play: 0,1 or 2
gameStars[2]   = global.threeStarMemory[2];    // star of third play: 0,1 or 2

//adding number of faults for each vocab //DONE                   
faultVocabs[0] = "null";
for(var i =0;i&lt;7;i++)
{
    faultVocabs[2*i] = "null";
    faultVocabs[2*i+1] = "null";
}
faultVocabsCount[0] = -1;
for(var i=0;i&lt;42;i++)
{
    faultVocabsCount[i] = -1;
}

for(var i=0;i&lt;7;i++)
{
   
    faultVocabs[2*i]        = global.verbDataBase[(real(global.levelNum)-1)*12 + i]+"+p";
    faultVocabs[2*i+1]      = global.verbDataBase[(real(global.levelNum)-1)*12 + i];
    faultVocabsCount[6*i]   = ds_map_find_value(global.vocabFaultCnt , (global.verbDataBase[(real(global.levelNum)-1)*12 + i]+"+p")+"0"); // this count is for Data

    faultVocabsCount[6*i+1] = ds_map_find_value(global.vocabFaultCnt , (global.verbDataBase[(real(global.levelNum)-1)*12 + i]+"+p")+"1"); // this count is for Data

    faultVocabsCount[6*i+2] = ds_map_find_value(global.vocabFaultCnt , (global.verbDataBase[(real(global.levelNum)-1)*12 + i]+"+p")+"2"); // this count is for Data

    faultVocabsCount[6*i+3] = ds_map_find_value(global.vocabFaultCnt , (global.verbDataBase[(real(global.levelNum)-1)*12 + i])+"0"); // this count is for Data

    faultVocabsCount[6*i+4] = ds_map_find_value(global.vocabFaultCnt , (global.verbDataBase[(real(global.levelNum)-1)*12 + i])+"1"); // this count is for Data
 
    faultVocabsCount[6*i+5] = ds_map_find_value(global.vocabFaultCnt , (global.verbDataBase[(real(global.levelNum)-1)*12 + i])+"2"); // this count is for Data

}

//http://localhost/504GameServer-smartgit/index.php/Game/userGameResult?gstate=4,move,19,score,250,160,170,time,250,1100,5000,star,2,1,1,vocab,data,3,keen,4,qualify,10

requestAddress = global.baseUrl + "Game/userGameResult?";
requestAddress += "Auth="+string(global.deviceId)+","+string(global.username);
requestAddress += "&amp;gstate=" + string(gid) + ",";
requestAddress += "move," + string(gameMovements)+ ",";
requestAddress += "score,"+ string(gameScores[0])+ ",";

score += real(gameScores[0]);

if(gRoundCount == 3)
    requestAddress += "time," + string(gameTimes[0]) + "," + string(gameTimes[1]) + "," + string(gameTimes[2]) + ",";
else
    requestAddress += "time," + string(gameTimes[0]) + ",";

requestAddress += "star," + string(gameStars[0]) + "," + string(gameStars[1]) + "," + string(gameStars[2]);

fVocabsFirstOccur = scr_get_first_occurence(global.cardAppearFreq, 0);  

scr_show_array(faultVocabsCount);

for(var i=0;i&lt; 2*fVocabsFirstOccur /*- 14 * (real(global.levelNum)- 1)*/;i++)
    for(j= 0 ; j&lt;3 ; j++)
        if(is_undefined(faultVocabsCount[3*i+j]))
            faultVocabsCount[3*i+j] = 0;
            
scr_show_array(faultVocabsCount);


if(fVocabsFirstOccur &gt; 0)
{
    requestAddress += ",vocab,";
    for(var i=0;i&lt; 2*fVocabsFirstOccur /*- 14 * (real(global.levelNum)- 1)*/;i++)
    {
        requestAddress += string(faultVocabs[i]) + ",";
        requestAddress += string(faultVocabsCount[3*i])+","+string(faultVocabsCount[3*i+1])+","+string(faultVocabsCount[3*i+2]);
        if(string_copy(faultVocabs[i] , string_length(faultVocabs[i])-1 , 2) == "+p")
            requestAddress += ","+string(global.cardAppearFreq[(real(global.levelNum)-1)*7 + floor(i/2)]);
        
        if(i != 2*fVocabsFirstOccur -1)
        {
            requestAddress += "," ;
        }
    }
}

///progress 
requestAddress += "&amp;PS=";
requestAddress += string(progressIncrease) + ",";
size = ds_queue_size(global.progressLifters);
for(i=0; i&lt;size; i+=1)
{
    temp = ds_queue_dequeue(global.progressLifters);
    requestAddress += string(temp) + ",";
    ds_queue_enqueue(global.progressLifters, temp);
}



scr_enqueueReqQ(requestAddress,"gameResult");

///////////////////// END of preparing data for server ////////////////     
global.scoreCountUp = true;

global.totalFBScore = 0;
global.seqWinNum = 0 ;
global.totalSeqSeen = 0; 
global.totalSeqSeen = 0;
        
        
    //}
    //////////// start of file writing  ///////////
    //ini_open("SaveGame5.sav");
       
    /////////////saving score ///////////
    //ini_write_real('General' , 'score' , score);
    
    //////saving index of last level/////
    if (((real(global.levelNum)-1)*7+(real(global.subLevelNum))) &gt; global.indexOfLastLevel)
    {

        global.indexOfLastLevel = (real(global.levelNum)-1)*7+(real(global.subLevelNum));
    }

    //ini_write_real('General' , 'indexOfLastLevel' , global.indexOfLastLevel);
     
    //////  saving 3 tiny star of each level (stars of sub_level_Room)
    //scr_show_array(global.threeStarOfLevels);
    global.stringThreeStarOfLevels = "";
    for (i= 0 ; i&lt;220 ; i++)
    {
        //if (global.threeStarOfLevels[i] != 3)   
        global.stringThreeStarOfLevels = string_insert(string(global.threeStarOfLevels[i]), global.stringThreeStarOfLevels , i+1);
    }

    //ini_write_string('General' , 'StringThreeStars_subLevelRoom' , global.stringThreeStarOfLevels); 

    //ini_close();
    //////////// end of file writing ////////////
    
    with(obj_conrol)
    {  
 

        
        global.gameResultCount = array_length_1d(listOfSpritesForGameResult);
        
        for(var i =0 ; i &lt; array_length_1d(listOfSpritesForGameResult); i++)
        {
            global.sprites_gr[i] = asset_get_index(listOfSpritesForGameResult[i]);
        }
            
        for(var i =0 ; i &lt; array_length_1d(listOfItemsForGameResult); i++)
        {        
            global.items_gr[i]          = ds_map_find_value(global.vocab_card,string_lower(listOfItemsForGameResult[i]));
            global.items_gr_meaning[i]  = ds_map_find_value(global.meaning_map_Fa_short , global.items_gr[i]);
       
        }
          
    }
    

    global.lastLevelScore  = real(gameScores[0]);
    
    
    var tempSeconds = "";
    var tempMinutes = "";

    if(floor(global.seconds) &lt; 10)
        tempSeconds += "0";
        
    tempSeconds += string(floor(global.seconds));

        
    if(floor(global.minutes) &lt; 10)
        tempMinutes += "0";
        
    tempMinutes += string(floor(global.minutes));

    global.lastLevelPlayedTime = tempMinutes + ":" + tempSeconds;//scr_convert_second_to_time(floor(real(global.totalMiniGameTime)), 1);
    global.popupType = 3;
    var popupBack    = instance_create(0,0,obj_popup_back);
    
    
    
    ///
    if( real(global.subLevelNum) == 4)
    {
        if(file_exists("game504Data.ini"))
        {
            ini_open("game504Data.ini");
            year = current_year;
            month = current_month;
            day = current_day;
            hour = current_hour;
            ini_write_real("unlockLevelPerDay" , "UnlockYear" , year);
            ini_write_real("unlockLevelPerDay" , "UnlockMonth" , month);
            ini_write_real("unlockLevelPerDay" , "UnlockDay" , day+1);
            ini_write_real("unlockLevelPerDay" , "UnlockHour" , hour); 
            
            unlockedTo = (real(global.levelNum)+1) * 7;
            if(unlockedTo &gt; 42)
                unlockedTo = 42;
            ini_write_real("unlockLevelPerDay" , "unLockedTo" , unlockedTo);
              
            ini_close();
        }
    }
}
else 
{
    global.nextGame = true;
    global.starLevelEnd = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.starLevelEnd =2;
alarm[7] = room_speed * 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.starColor = 1;


if(global.movess == global.perfectMove )
{
global.starColor = 1;
global.starChangeFlag =1;
}

if (global.movess &gt;= global.perfectMove + global.gap)
{
    global.starColor = 2;
}

if (global.movess = global.perfectMove + global.gap)
{
    global.starChangeFlag = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.move != global.validMove)
global.move --;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//this alarm should be deleted due to the line 229 of left pressed event

global.gameOverInSubLevel = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if( global.NOfMatchedCards &lt;= global.levelCardsN)
{
    global.countUp = false;
    
    //feedback finalization
    //global.feedbackScore = 300 * power(2,global.seqWinNum) / power(global.totalSeqSeen,1/2) ;
    
    global.totalFBScore = global.totalFBScore + global.feedbackScore;

    global.feedbackScore = 0;
    global.seqWinNum = 0 ;
    global.totalSeqSeen = 0;  
    global.gameSeqTime = 0; 
    global.seqTimeEnable = false;
                   
    
    
    //SCORE CHANGING

    global.miniGameScore[global.threeTime] = global.move;
    global.move = global.validMove ;

    
    
    global.miniGameTime[global.threeTime] = global.secondsForGame;

    global.miniGameStarted = 0;

    //global.scoreCountUp = true;
    global.starLevelEnd =1;
    global.starChangeFlag = 1;
    if(real(global.subLevelNum) &gt; 4) 
    alarm[7] = room_speed*0.2;
    else alarm[6] = room_speed*0.5; //giving time to game for showing score and star effects
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (flag ==2) {flag = 3;}

with (global.match[0,1])
{
    _image_xscale = 0;
    image_xscale = 1;
    _flip_y = 0;
    _flip = false;
    flipCnt = 0;
    
    //CntOfFlipForThisCard ++;   ////// how many times each card has been flipped?????

}

with (global.match[1,1])
{
    _image_xscale = 0;
    image_xscale = 1;
    _flip_y = 0;
    _flip = false;
    flipCnt = 0;

    //CntOfFlipForThisCard ++;   ////// how many times each card has been flipped?????
}

with (id)
{
    CntOfFlipForThisCard ++;   ////// how many times each card has been flipped?????
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (global.match[0,1])
{
    flipped= false;
    _image_xscale = 0;
    image_xscale = 1;
    flipCnt = 0;
    _flip_y = 0;
    _flip = true;
}

with (global.match[1,1])
{
    flipped= false;
    _image_xscale = 0;
    image_xscale = 1;
    flipCnt = 0;
    _flip_y = 0;
    _flip = true;
}

flag = 0;
global.selectionNumber = 0;
global.match[0,0]= "null";
global.match[0,1]= 999;
global.match[1,0]= "null";
global.match[1,1]= 999;
global.can_select = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.moveFlag == 1)
{
    global.moveFlag = 0;
    if (global.move&gt;global.validMove)
        global.move--;

    alarm[4] = room_speed *0.3;

}

if(global.showScoreComplete == 1)
{
    global.showScoreComplete = 0;
    alarm[8] = room_speed * 0.3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NET
{
    if (global.can_select == true)
    {   
        if(global.firstPress == 0)
            global.countUp = true;
        global.firstPress = 1 ; 
        
        if (flipped == false)
        {
            flipped = true;
            _flip = true;
            flag=0;
            global.flipAttempts++;
            global.selectionNumber++;
            if(id.type == "spr_test")
            {
                global.test[0] = type;
                global.test[1] = id;
            }
            else
            {
                global.match[global.selectionNumber-1 ,0]= type;
                global.match[global.selectionNumber-1 ,1]= id;
            }
            /*if(id.type == "spr_test")
            {
                global.test[0] = type;
                global.test[1] = id;
            }*/
            if (global.selectionNumber == 2)
            {   
                //%%%%%%/////if ((global.match[0,0] == "spr_test") or (global.match[1,0] == "spr_test"))
                if(global.test[0] == "spr_test")
                {
                    if (global.match[1,0] == "null")
                    {   
                            for (t = 0 ; t&lt; 30/*2*global.levelCardsN*/ ; t++)
                            {   
                                if (string(global.LevelCardType[t]) == (string_copy( global.match[0,0] , 1 , 7)) + string(((real(string_copy( global.match[0,0] , 8 , 1)))+1) % 2))
                                {
                                    //%%%%%%/////global.match[1,1].matched = true;
                                    global.test[1].matched = true;
                                    global.match[1,1] = global.LevelCardId[t];
                                    global.match[1,0] = global.LevelCardType[t];
                                    with(global.match[1,1])
                                    {
                                        //global.match[1,0] = global.LevelCardType[t];
                                        type = (string_copy( global.match[0,0] , 1 , 7)) + string(((real(string_copy( global.match[0,0] , 8 , 1)))+1) % 2);
    
                                   }
                                }
                            }
                    }
                    
                    else// global.match[1,0] is equal to "spr_test"
                    {
                        
                        for (t = 0 ; t&lt; 30/*2*global.levelCardsN*/ ; t++)
                        {   
                            if (string(global.LevelCardType[t]) == (string_copy( global.match[1,0] , 1 , 7)) + string(((real(string_copy( global.match[1,0] , 8 , 1)))+1) % 2))
                            {
                                //%%%%%%/////global.match[0,1].matched = true;
                                global.test[1].matched = true;
                                global.match[0,1] = global.LevelCardId[t];
                                global.match[0,0] = global.LevelCardType[t];
                                with(global.match[0,1])
                                {
                                    type = (string_copy( global.match[1,0] , 1 , 7)) + string(((real(string_copy( global.match[1,0] , 8 , 1)))+1) % 2);
                                }
                            }
                        }
                        
                    }
                }
                
                
                    with (global.match[0,1])
                        {
                            selectedTimesOfCard ++; // how many times a card was selected in this game 

                            flg = false; // for while insted of for
                            isCreated = 0;
                            t = 0;
                            //how many times matche of this card was selected(flipped) in this game 
                            if(type != "test")
                            {
                                for (t = 0 ; t&lt; 30/*2*global.levelCardsN*/ ; t++)
                                {   
                                    if (string(global.LevelCardType[t]) == (string_copy( type , 1 , 7)) + string(((real(string_copy( type , 8 , 1)))+1) % 2))
                                    {
                                        selectedTimesOfMatchedCard = global.LevelCardId[t].selectedTimesOfCard;
                                    }
                                }
                            }
                            flg = false; 
                        }
                        
                    with (global.match[1,1])
                        {
                            selectedTimesOfCard ++; // how many times a card was selected in this game 

                            flg = false; 
                            isCreated = 0;
                            t = 0;
                            //how many times matche of this card was selected(flipped) in this game 
                            if(type != "test")
                            {
                                for (t = 0 ; t&lt; 30/*2*global.levelCardsN*/ ; t++)
                                {   
                                    // counting the selectoin times of match card of this card
                                    if (string(global.LevelCardType[t]) == (string_copy( type , 1 , 7)) + string(((real(string_copy( type , 8 , 1)))+1) % 2))
                                    {
                                        selectedTimesOfMatchedCard = global.LevelCardId[t].selectedTimesOfCard;
                                    }
                                }
                            }
                            flg = false;     
                        }
                        
                    global.moveFlag = 1;
                    
                    with (global.match[0,1])
                    {
                        flipCntLevel ++;
                    }
                    
                    with (global.match[1,1])
                    {
                        flipCntLevel ++;
                    }
                    global.validMove--;
                    global.movess++;            
                    global.can_select = false;
                    temp1 = string_copy( global.match[0,0] , 1 , 6);
                    temp2 = string_copy( global.match[1,0] , 1 , 6);
                    
                    
                    
                    global.match[0,0] = string(global.match[0,0]);
                    global.match[1,0] = string(global.match[1,0]);
                    
                    if ((global.match[0,0] != global.match[1,0])&amp;&amp;(temp1 == temp2)) //Match found!!!
                    {
                        tempCardVocab = "";
                        
                        if(string_char_at(global.match[0,0],string_length(global.match[0,0])) == "1")
                            tempCardVocab = global.match[0,0];
                        else
                            tempCardVocab = global.match[1,0];
    
                        audio_play_sound(asset_get_index("snd_" + string(ds_map_find_value(global.vocab_card,tempCardVocab))),1,false);
                        audio_sound_gain(asset_get_index("snd_" + string(ds_map_find_value(global.vocab_card,tempCardVocab))), global.CardVObj_X/200, 50);
                        
                        global.NOfMatchedCards ++;
                    
                        global.seqTimeEnable = true;
                        with (global.match[0,1])
                        {
                            flipped=true;
                            matched=true;
                            // keeping fault cnt of vocabs
                            ds_map_add(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime) , selectedTimesOfCard);  
                           
                        }
                        
                        with (global.match[1,1])
                        {
                            flipped=true;
                            matched=true;
                            ds_map_add(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+string(global.threeTime) , selectedTimesOfCard);
                           
                        }
                        ///// Clear Goals /////   
                        global.clearGoal = true;
                        if(global.clearGoal == true)
                        {
                            
                   
                           // global.treshold = scr_FB_treshold(real(global.levelCardsN) - real(global.NOfMatchedCards));
                                
                            if(global.gameSeqTime - global.tempTime &gt; global.treshold/* * global.seqWinNum*/ )
                            {
                                
                       
                                
                                global.treshold = scr_FB_treshold(real(global.levelCardsN) - real(global.NOfMatchedCards));
                 
                                
                  
                                //global.feedbackScore = 100 * power(2,global.seqWinNum) / power(global.totalSeqSeen,1/2) ;
                     
                                global.totalFBScore += global.feedbackScore;
           
                                global.seqWinNum = 1 ;
                                global.totalSeqSeen = 0; 
                                global.feedbackScore = 0;
                                global.gameSeqTime = 0;
                                global.seqTimeEnable = true;
                                
                            }
                            else
                            {
                                                
                                global.seqWinNum ++;
                                global.treshold = scr_FB_treshold(real(global.levelCardsN) - real(global.NOfMatchedCards));
                                
             
                                if(global.seqWinNum &gt;  1)
                                    alarm[10] = room_speed / 2;
                                global.treshold = scr_FB_treshold(real(global.levelCardsN) - real(global.NOfMatchedCards));
                                    
                                    //string(real(global.levelCardsN) - real(global.NOfMatchedCards))+
                                    //"treshold" + string(global.treshold)+ "gameSeqTime"+string(global.gameSeqTime)
                                    //+"global.tempTime"+string(global.tempTime) + "seqWinNum" + string(global.seqWinNum));
                                
                            }
                            global.tempTime = global.gameSeqTime;
                          
                            with(global.match[0,1])
                                {
                                    global.totalSeqSeen +=
                                    ds_map_find_value(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime));
                                   
                                }
                                
                                with(global.match[1,1])
                                {   global.totalSeqSeen +=
                                    ds_map_find_value(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime));
                        
                                }
        
                                
                            //global.totalSeqSeen = global.totalSeqSeen + selectedTimesOfMatchedCard + selectedTimesOfCard;
                            //global.gameSeqTime = 5 * (global.seqWinNum - 1);
                            //global.seqTimeEnable = true;
                            if(global.totalSeqSeen &gt; 0 and global.seqWinNum &gt; 1)
                            {
                                global.feedbackScore = 600 * power(2,global.seqWinNum) / power(global.totalSeqSeen,1/2) ;
                     
                            }
        
                            global.totalLevelFlipCnt = global.totalLevelFlipCnt+ global.match[0,1].flipCntLevel;
                            global.totalLevelFlipCnt = global.totalLevelFlipCnt+ global.match[1,1].flipCntLevel;
                            
                            with (global.match[0,1])
                            {
                                flipped=true;
                                matched=true;
                                // keeping fault cnt of vocabs
                                ds_map_add(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime) , selectedTimesOfCard);
                            }
                            
                            with (global.match[1,1])
                            {
                                flipped=true;
                                matched=true;
                                ds_map_add(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+string(global.threeTime) , selectedTimesOfCard);
                            
                            }
                            
                            global.selectionNumber = 0;
                            global.match[0,0]= "null";
                            global.match[0,1]= 999;
                            global.match[1,0]= "null";
                            global.match[1,1]= 999;
                            global.test[0] = "null";
                            global.test[1] = 999;
                            global.can_select = true;
                            
    
                           
                        }//end of in(global.clearGoal == true)
                        /*    
                        else//clear goal in false
                        {   
                            if(global.gameSeqTime &gt; 5 * global.seqWinNum )
                            {
                                //if(global.totalSeqSeen &gt; 1)
                                //global.feedbackScore = 100 * power(2,global.seqWinNum) / power(global.totalSeqSeen,1/2) ;
                              
                                global.totalFBScore = global.totalFBScore + global.feedbackScore;
                                global.seqWinNum = 1 ;
                                global.totalSeqSeen = 0; 
                                global.feedbackScore = 0;
                                global.gameSeqTime = 0;
                                global.seqTimeEnable = true;
                                
                            }
                            else
                            {
                                global.seqWinNum ++;
                                global.treshold = scr_FB_treshold(real(global.subLevelNum));
                                global.treshold = scr_FB_treshold(real(global.subLevelNum));
                            }
                            
                            with(global.match[0,1])
                                {
                                    global.totalSeqSeen +=
                                    ds_map_find_value(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime));
                                
                                }
                                
                                with(global.match[1,1])
                                {   global.totalSeqSeen +=
                                    ds_map_find_value(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime));
                                    
                                }
        
                                
                            //global.totalSeqSeen = global.totalSeqSeen + selectedTimesOfMatchedCard + selectedTimesOfCard;
                            global.gameSeqTime = 5 * (global.seqWinNum - 1);
                            global.seqTimeEnable = true;
                            if(global.totalSeqSeen &gt; 0 and global.seqWinNum &gt; 1)
                            {
                                global.feedbackScore = 300 * power(2,global.seqWinNum) / power(global.totalSeqSeen,1/2) ;
                               
                            }
        
                            global.totalLevelFlipCnt = global.totalLevelFlipCnt+ global.match[0,1].flipCntLevel;
                            global.totalLevelFlipCnt = global.totalLevelFlipCnt+ global.match[1,1].flipCntLevel;
                            
                            with (global.match[0,1])
                            {
                                flipped=true;
                                matched=true;
                                // keeping fault cnt of vocabs
                                ds_map_add(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+ string(global.threeTime) , selectedTimesOfCard);
                            }
                            
                            with (global.match[1,1])
                            {
                                flipped=true;
                                matched=true;
                                ds_map_add(global.vocabFaultCnt , ds_map_find_value(global.vocab_card , type)+string(global.threeTime) , selectedTimesOfCard);
                            
                            }
                            
                            global.selectionNumber = 0;
                            global.match[0,0]= "null";
                            global.match[0,1]= 999;
                            global.match[1,0]= "null";
                            global.match[1,1]= 999;
                            global.can_select = true;
                            
                            global.NOfMatchedCards ++;
                           
                      //  }*/
                    }
                    
                    else 
                    {
    
                        ////// time for flipping back and showing cardback
                        alarm[0] = room_speed * 1.85 ; 
                        ////// time for starting to flip back
                        with (global.match[0,1])
                        {
                            alarm[1] = room_speed * 1.5 ;
                            ds_map_find_value(global.vocab_card ,type);
                        }
                        
                        with (global.match[1,1])
                        {
                            alarm[1] = room_speed * 1.5 ; 
                        }
                    }
                 
                    if(global.NOfMatchedCards == global.levelCardsN)
                    {
                        alarm[2] = room_speed * 0.5 ;
                    }
                    
                    else
                    {
                        if (global.validMove ==0)
                            global.scoreIsZero = 1;
                    }  
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(10 * CntOfFlipForThisCard, 25, "cntOfFlipID: " + string(CntOfFlipForThisCard));

//draw_set_color(c_black);
draw_set_font(fnt_bigJohn_gameWorld); 
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
col = make_color_rgb(128,67,53);
draw_set_color(col);
str_w = 100;
str_w = string_width(vocab_pic);
image_w = 3/4*200;

if(test == 0) // not bounes card
{
    if(image_xscale &gt;= 0)
        if(str_w &gt; (0.86)*2*50*(1-image_xscale)/str_w)
            text_scale = (0.86)*2*50*(1-image_xscale)/str_w;
        else
            text_scale = 1-image_xscale;
            
    else
        if(str_w &gt; (0.86)*2*50*(1+image_xscale)/str_w)
            text_scale = (0.86)*2*50*(1+image_xscale)/str_w;
        else
            text_scale = 1+image_xscale;
    
    if(flag == 1 or flag == 2)
    {
        if(str_w &gt; (0.86)*image_w)
            text_scale = (0.86)/(str_w/image_w);
        else
            text_scale = 1;
    }
}

draw_set_halign(fa_left);
draw_set_valign(fa_top);

/*
if(global.seconds == 0)
{draw_set_font(fnt_bigJohn);draw_text( xview + 10 , yview+10 , global.seconds);}
else 
{draw_set_font(fnt_bigJohn);draw_text(10 , 220 , global.seconds);}
*/

draw_set_font(fnt_bigJohn_gameWorld); 
draw_set_halign(fa_center);
draw_set_valign(fa_middle);


if (flipped==true)
{
    if(test == 1)
    {
        if(matched == true)
        {
            draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
            draw_sprite_ext( sprite, 1 , x, y, 3/4, 3/4, 0, -1, 1 );
        }
        else if (flipped == true )
        {
            
            alpha = sin(drawAlpha);
            drawAlpha += pi/8;
            draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4+alpha*(1/100), 3/4+alpha*(1/100), 0, -1, 1 );
            draw_sprite_ext( sprite, 0 , x, y, 3/4+alpha*(1/20), 3/4+alpha*(1/20), 0, -1, 1 );
        }
        else
        {
            draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
            draw_sprite_ext( sprite, 0 , x, y, 3/4, 3/4, 0, -1, 1 );
        }
    }
    else
    {
            
        if(isPicture == false)
            sprite = asset_get_index("spr_meaning");
        else
            sprite = asset_get_index(string(type));
        
        with(id)
        {   
            ////////////////////// falg =0 //////////////////
            if (flag == 0)
            {
            
            //////////////// X &amp; Y calculation for wraping///////
                if (_image_xscale &gt;= 0.2)
                {_image_xscale += 0.2;}
                else {_image_xscale += 0.1;}
                
                image_xscale = scr_wrap(_image_xscale, -1, 1,true);
                if ((image_xscale &gt;= 0) and (_flip == true) and (flipCnt != 1)){
                    _flip = false;
                    //if(type == "spr_test")
                    //    _spr = spr_bonusBack;
                    //else
                        _spr = spr_cardback;}
                
                if ((image_xscale &lt; 0) and (_flip == false)and (flipCnt != 1)){
                    _flip = true;
                    if(image_xscale == -1)  {flipCnt = 1; }
                    _spr = sprite;}
                
                if ((image_xscale &gt;= 0) and (flipCnt == 1)and (flag == 0)){
                    if (matched = true)     {flag = 1;}   //match find
                    else                    {flag = 2;}   //cards dont match
                }
        
                if(image_xscale &gt;= 0){
                    _flip_y = 20* sqrt((1-sqr(1-image_xscale)));
                    
                    draw_sprite_pos(spr_cardShadow, -1, 
                        x-70*(1-image_xscale),y-55-_flip_y,
                        x+30*(1-image_xscale),y-55,
                        x+30*(1-image_xscale),y+95,
                        x-70*(1-image_xscale),y+95+_flip_y,
                        1);
                        
                    draw_sprite_pos(_spr, -1, 
                        x-50*(1-image_xscale),y-75-_flip_y,
                        x+50*(1-image_xscale),y-75,
                        x+50*(1-image_xscale),y+75,
                        x-50*(1-image_xscale),y+75+_flip_y,
                        1);
                        
                 
        
                } 
            
                else {
                    
                    if(test == 1)
                    {
                        
                    }
                    else
                    {
                        _flip_y = 20* sqrt((1-sqr(1+image_xscale)));
                        
                                    
                        draw_sprite_pos(spr_cardShadow, -1, 
                            x-70*(1+image_xscale),y-55-_flip_y,
                            x+30*(1+image_xscale),y-55,
                            x+30*(1+image_xscale),y+95,
                            x-70*(1+image_xscale),y+95+_flip_y,
                            1);
                            
                        draw_sprite_pos(spr_frame, -1, 
                            x-50*(1+image_xscale),y-75,
                            x+50*(1+image_xscale),y-75-_flip_y,
                            x+50*(1+image_xscale),y+75+_flip_y,
                            x-50*(1+image_xscale),y+75,
                            1); 
                            
                        draw_sprite_pos(_spr, -1, 
                            x-0.85*50*(1+image_xscale),y-0.85*75,
                            x+0.85*50*(1+image_xscale),y-0.85*75-_flip_y,
                            x+0.85*50*(1+image_xscale),y+0.85*75+_flip_y,
                            x-0.85*50*(1+image_xscale),y+0.85*75,
                            1); 
                            //draw_set_color(c_red); 
                        if(isPicture == false)
                           {
                           //draw_text(x , y/4 , vocab_pic );
                            draw_text_transformed(x, y, vocab_pic, text_scale , 1, 0);
                        
                            }
                    }
                        
                } 
            }  
        
            ////////////////////// falg =1 //////////////////matching occured
            if (flag == 1)    
            {
                if(test == 1)
                {
                    draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
                    draw_sprite_ext( sprite, 1 , x, y, 3/4, 3/4, 0, -1, 1 );
              
                }
                else
                {
                        //draw_sprite ( sprite, 0 , x , y);
                    draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
                    draw_sprite_ext( spr_frame, sub_image, x, y, 3/4, 3/4, 0, -1, 1 );
                    draw_sprite_ext( sprite, sub_image, x, y, 0.87*3/4, 0.87*3/4, 0, -1, 1 );
            
                    if(isPicture == false and test == 0)
                        draw_text_transformed(x, y, vocab_pic, text_scale, 1, 0);
                   
                        
                        
                        
                }
            }
            
            ////////////////////// falg =2 //////////////////
            if (flag == 2)    
            {
                       
                if(test == 1)
                {
                    draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
                    draw_sprite_ext( sprite, 1 , x, y, 3/4, 3/4, 0, -1, 1 );
                }
                else
                {
                    //draw_sprite ( sprite , 0 , x, y);
                    draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
                    draw_sprite_ext( spr_frame, sub_image, x, y, 3/4, 3/4, 0, -1, 1 );
                    draw_sprite_ext( sprite, sub_image , x, y, 0.87*3/4, 0.87*3/4, 0, -1, 1 );
                    if(isPicture == false)
                        draw_text_transformed(x, y, vocab_pic, text_scale, 1, 0);
                      
                }
            } 
            
            ////////////////////// falg =3 //////////////////
            if (flag == 3)    
            {
                //////////////// X &amp; Y calculation for wraping///////
                if (_image_xscale &gt;= 0.2)
                {_image_xscale += 0.2;}
                else {_image_xscale += 0.1}
                //_image_xscale += 0.2;
                image_xscale = scr_wrap(_image_xscale, -1, 1,true);
         
                
                _flip_y = 20* sqrt((1-sqr(image_xscale)));
                 if ((image_xscale &gt;= 0) and (_flip == false) and (flipCnt != 1)){
                    _flip = true;
                    _spr = sprite;}
                
                if ((image_xscale &lt; 0) and (_flip == true)and (flipCnt != 1)){
                    _flip = false;
                    if(image_xscale == -1)  {flipCnt = 1; }
                    //if(type == "spr_test")
                    //    _spr = spr_bonusBack;
                    //else
                        _spr = spr_cardback;}
                
                if ((image_xscale &gt;= 0) and (flipCnt == 1)and (flag == 3)){
                    flag = 4;} // flag 4 means do nothing, just show spr-cardback
            
        
                if(image_xscale &gt;= 0){
                
                                
                    if(test == 1)
                    {
                        
                    }
                    else
                    {
                        _flip_y = 20* sqrt((1-sqr(1-image_xscale)));
                        
                        draw_sprite_pos(spr_cardShadow, -1, 
                            x-70*(1-image_xscale),y-55-_flip_y,
                            x+30*(1-image_xscale),y-55,
                            x+30*(1-image_xscale),y+95,
                            x-70*(1-image_xscale),y+95+_flip_y,
                            1);
                            
                        draw_sprite_pos(spr_frame, -1, 
                            x-50*(1-image_xscale),y-75,
                            x+50*(1-image_xscale),y-75-_flip_y,
                            x+50*(1-image_xscale),y+75+_flip_y,
                            x-50*(1-image_xscale),y+75,
                            1); 
                                
                        draw_sprite_pos(_spr, -1, 
                            x-0.85*50*(1-image_xscale),y-0.85*75,
                            x+0.85*50*(1-image_xscale),y-0.85*75-_flip_y,
                            x+0.85*50*(1-image_xscale),y+0.85*75+_flip_y,
                            x-0.85*50*(1-image_xscale),y+0.85*75,
                            1);
                   
                            //draw_set_color(c_blue);
                        if(isPicture == false)
                            if(image_xscale &gt; 0)
                                draw_text_transformed(x, y, vocab_pic, text_scale, 1, 0);
                    
                        }
                } 
            
                else {
                    if(test == 1)
                    {
                        
                    }
                    else
                    {
                        _flip_y = 20* sqrt((1-sqr(1+image_xscale)));
                                                
                        draw_sprite_pos(spr_cardShadow, -1, 
                            x-70*(1+image_xscale),y-55-_flip_y,
                            x+30*(1+image_xscale),y-55,
                            x+30*(1+image_xscale),y+95,
                            x-70*(1+image_xscale),y+95+_flip_y,
                            1);
                                
                        draw_sprite_pos(_spr, sub_image , 
                            x-50*(1+image_xscale),y-75-_flip_y,
                            x+50*(1+image_xscale),y-75,
                            x+50*(1+image_xscale),y+75,
                            x-50*(1+image_xscale),y+75+_flip_y,
                            1);
                    
          
                    }
                }
            } 
            
            if (flag ==4)
            {
                //draw_sprite ( spr_test , 0 , x, y);
                //draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
                //draw_sprite_ext( spr_test, 0, x, y, 3/4, 3/4, 45, -1, 0.3 );
            }
        }
        counter++
        if(counter == 2)
        {
            sub_image ++;
            counter = 0;
        }
    }
}

else 
{
    sub_image = 0;
    spriteTemp = sprite;
    if(type == "spr_test")
    {
        sprite = spr_test;
        draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
        draw_sprite_ext( sprite, 0, x, y, 3/4, 3/4, 0, -1, 1 );
    }
    else
    {
        sprite = spr_cardback;
        draw_sprite_ext( spr_cardShadow, sub_image, x-20, y+20, 3/4, 3/4, 0, -1, 1 );
        draw_sprite_ext( sprite, 0, x, y, 3/4, 3/4, 0, -1, 1 );
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>48,64</point>
    <point>64,64</point>
  </PhysicsShapePoints>
</object>
