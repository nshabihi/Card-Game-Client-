<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cardback</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
index = 0;
vocab = global.verbID;
meaning = ds_map_find_value(global.meaning_map , string_lower(vocab));
meaning_Fa = ds_map_find_value(global.meaning_map_Fa , string_lower(vocab));



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(device_mouse_check_button_pressed(0, mb_left))
if( mouse_x &gt; room_width/2 - 200 and 
    mouse_x &lt; room_width/2 + 200 and
    mouse_y &lt; 250 and mouse_y &gt; 100)
{
   
    //instance_destroy();
    var search = instance_create(10,10,obj_dictionaryRoom_Loader);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite = asset_get_index(string(ds_map_find_value(global.card_vocab , global.verbID+"+p")));
draw_sprite_ext(spr_frame , index , room_width/2 , 450*(view_hview/720) , 1 , 1 , 0 , -1 , 1);
draw_sprite_ext(sprite , index , room_width/2 , 450*(view_hview/720) , 0.9 , 0.9 , 0 , -1 , 1);
index++;

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
//draw_set_font(fnt_bigJohn);
draw_set_font(fnt_keyboard_arial);
col = make_color_rgb(100,54, 41);
draw_set_color(col);
//draw_text_transformed_color(room_width/2 , 300*(view_hview/720) , meaning , 0.8, 0.8, 0, col, col, col, col, 1); 

draw_set_font(font2);
draw_text_transformed_color(room_width/2, 180*(view_hview/720) ,meaning_Fa,1.2, 1.2, 0, col, col, col, col, 1);  

draw_sprite_ext(spr_stones, 0, view_xview[0], view_hview[0] + view_yview[0], 1.12* view_wview[0] / 1140 , 1.12*0.75 * view_hview[0] / 720, 0, -1, 1);

firstLine = meaning;
secondLine = " ";
counter = 0;
multipleLine = false;
str="";
validLength=600*(view_wview[0]/1140);

if(string_width(meaning) &gt; validLength)
    {
    secondLineLength = string_width(meaning) - validLength;
    multipleLine = true;
    }
else
    secondLineLength = 0;

    
flag = false;
set = false;   
checkWidth = false;
firstChar = true;
if(multipleLine == true)
for(i=string_length(meaning) ; i&gt;0 ; i--)
{
    if(flag == false)
    {
        str = string_copy(meaning , i , 1);
        if(firstChar == true)
            secondLine = string_copy(meaning , i , 1)+secondLine;
        if(str == " ")
            checkWidth = true;
    }
    if(secondLineLength &lt; string_width(secondLine) and checkWidth == true)
    {
        if(set = false)
        {
            flag = true;
            firstLine = string_copy(meaning , 1 , i);
            set = true;
        }
    }
    else
        checkWidth = false;
}            


draw_set_font(fnt_keyboard_arial);
col = make_color_rgb(100,54, 41);
draw_set_color(col);
draw_set_halign(fa_left);

if(string_width(meaning) &gt; validLength)
{
    draw_text_transformed_color(room_width/2 - 350*(view_wview[0]/1140) , 260*(view_hview/720) , firstLine , 0.8, 0.8, 0, col, col, col, col, 1); 
    draw_text_transformed_color(room_width/2 - 350*(view_wview[0]/1140) , 330*(view_hview/720) , secondLine , 0.8, 0.8, 0, col, col, col, col, 1); 
}
else
{
    draw_set_halign(fa_middle);
    draw_text_transformed_color(room_width/2 , 300*(view_hview/720) , meaning , 0.8, 0.8, 0, col, col, col, col, 1); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>75,75</point>
    <point>75,75</point>
  </PhysicsShapePoints>
</object>
