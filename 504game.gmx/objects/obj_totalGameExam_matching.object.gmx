<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-600</depth>
  <persistent>0</persistent>
  <parentName>obj_roomLoaderParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with (obj_badges)
    {instance_destroy();}

with (obj_leaderBoard)
    {instance_destroy();}
    
with (obj_setting)
    {instance_destroy();}
    
with (obj_dictionary)
    {instance_destroy();}

with (obj_bottomBar)
    {instance_destroy();}
    
with (obj_exam)
    {instance_destroy();}
    
with (obj_ProgressBarControler)
    {instance_destroy();}
    
with (obj_showScore)
    {instance_destroy();}    

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//event_inherited();
if instance_exists(obj_examCard)
    with (obj_examCard)
        {instance_destroy();}

//global.examList_matching        
/*define*/
//global.examCardN = 3;
//global.examList_queue = ds_queue_create();
//ds_queue_enqueue(global.examList_queue, "abandon");
//ds_queue_enqueue(global.examList_queue, "data");
//ds_queue_enqueue(global.examList_queue, "qualify");
/*define*/

/* moved to obj_newExamRoom_loader
scr_update_userExamList_data();
scr_show_queue(global.examCardNumbers);
scr_show_queue(global.userAllExamsList);
scr_show_queue(global.examList_queue);
*/
// TODO : Here we should check global.examCardN , if it was 0 then there is not any exam for user. 

if(global.examCardN != 0){
    
    global.examList = ds_queue_create();
    global.examCardsID = ds_queue_create(); // fill with id of each card in obj_examCard - create event
    global.failureArray = ds_queue_create(); // keeps failed verbs
    global.examFailureCnt = ds_map_create();
    global.examScorePerVocab = ds_map_create();
    global.totalScoreOfExam = 0;
    
    global.canSelect = true;
    global.choice[0,0] = 0;
    global.choice[1,0] = 0;
    global.choice[0,1] = "";
    global.choice[1,1] = "";
    global.examSelectionNum = 0;
    global.matchedCards = 0;
    global.fault = 0;
    
    switch(global.examCardN)
    {
        case 3:
            width = 3;
            height = 2;
        break;
        
        case 4:
            width = 4;
            height = 2;
        break;
        
        case 6:
            width = 4;
            height = 3;
        break;
    }
    
    flag = true; //repeatIrandom 
    flag2 = true; //RandomNumIsValid
    randomCnt = 0; //we need two random number, one for picture and one for meaning
    temp = "";
    randomArray[0] = 10;
    for (i=0; i&lt;global.examCardN; i+=1)
    {
        for (k=0; k&lt;2; k+=1)
        {    
            while(flag == true)
            {
                randomize();
                r = irandom(2*global.examCardN-1);
                for (j=0; j&lt;2*i+k; j+=1)
                {
                    if(randomArray[j] == r)
                        flag2=false;
                }
                if(flag2 == true)
                    flag = false;
                else
                    flag2 = true;
            }
            flag = true;
            flag2 = true;
            randomArray[2*i+k] = r;
            if(k==0)
            {
                examCards[r] = ds_queue_dequeue(global.examList_queue);
                ds_queue_enqueue(global.examList , examCards[r]);
                temp = examCards[r];
                
            }
            if(k==1)
                examCards[r] = temp+"+p"
        }
       
    }
    //scr_show_array(randomArray);
    //scr_show_array(examCards);
    horizantalGap = 220;
    verticalGap = 200;
    xx=(room_width/2) - ((width-1) * (horizantalGap/2));
    yy=(room_height/2+10) - ((height-1) * (verticalGap/2));
    
    global.failureArray = ds_queue_create(); // keeps failed verbs
    
    for (i=0; i&lt;width; i+=1)
    {
        for (j=0; j&lt;height; j+=1)
        {
            var examCard = instance_create(xx, yy , obj_examCard);
            examCard.type = ds_map_find_value(global.card_vocab , examCards[i*height + j]);
            if(string_copy(examCards[i*height + j] , string_length(examCards[i*height + j])-1,2 )== "+p")
            {
                examCard.isPicture = true;
                examCard.verb = string_copy(examCards[i*height + j] , 0 ,string_length(examCards[i*height + j])-2);
            }
            else
            {
                examCard.isPicture = false;
                examCard.verb = examCards[i*height + j];
            }
            yy += verticalGap;
        }
        xx += horizantalGap;
        yy=(room_height /2 + 10) - ((height-1) * (verticalGap/2));  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
