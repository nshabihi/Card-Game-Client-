<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xview  = view_xview[0];
yview  = view_yview[0];
vwidth = view_wview[0];
vheigth= view_hview[0];

firstFlag = true;
midFlag = false;
global.showFeedback = false;
feedBack_is_showing = false;
    
ds_queue_destroy(global.progressLifters);
global.progressLifters = ds_queue_create();

// keeping fault cnt of vocabs

ds_map_destroy(global.vocabFaultCnt);
global.vocabFaultCnt = ds_map_create();
 
for (i=0; i&lt;30; i+=1)
{
    global.LevelCardType[i] = 0;
} 
 
////// back //////
global.seqWinNum= 0;
global.gameSeqTime = 0;
global.seqTimeEnable = false;
global.totalSeqSeen = 0;
global.feedbackScore = 0;
global.treshold = 0;
global.totalFBScore = 0;

global.miniGameScore[3]= 0;
for (i=0; i&lt;3; i+=1)
{
    global.miniGameScore[i] = 0;
}

global.miniGameTime[3]= 0;
for (i=0; i&lt;3; i+=1)
{
    global.miniGameTime[i] = 0;
}
global.totalMiniGameTime =0;

//initializing room
dwidth = ds_map_find_value(global.roomInt , "dwidth");
dheight = ds_map_find_value(global.roomInt , "dheight");
xview = ds_map_find_value(global.roomInt , "xview");
yview = ds_map_find_value(global.roomInt , "yview");
vwidth = ds_map_find_value(global.roomInt , "vwidth");
vheight = ds_map_find_value(global.roomInt , "vheight");
//end of initializing room

 
//indexOfLastLevel = 0;   moved to obj_loader
stringThreeStarOfLevels = "null";
     
global.selectionNumber = 0;
global.threeTime = 0;
//threeTimeSetFlag = 0;
global.starColor = 0;
WholeCrads[100] = 0;

global.starLevelEnd =0; // for knowing that level is end and game have to show star effect and score then we will have global.nextGame = true (alarm 2 and alarm 6 of obj-card)

global.move = 0; // this variable is related to obj card but beacouse of saving error i add it here
global.feedback1 = 0; // such as previous variable

///////// star drawing variables
_star_subImage = 0;
_star_xscale = 0;
_star_yscale = 0;
_star_rot = 0;
_star_alpha = 0;
star_xscale = 0;
star_yscale = 0;
star_rot = 0;
star_alpha = 0;
star_xscaleStr = "null";
star_yscaleStr = "null";
star_rotStr = "null";
star_alphaStr = "null";
global.starChangeFlag = 0;
global.threeStarMemory [6] = 0;
starCreating = 0;
for(i=0 ; i&lt;6 ; i++)
    global.threeStarMemory [i] = 3;
starFlag = 0;

/////////////////////////////////



//score = 0;
global.match[0,0]= "null";
global.match[0,1]= 999;
global.match[1,0]= "null";
global.match[1,1]= 999;
global.test[0] = "null";
global.test[1] = 999;


global.LevelCardId [30] = 0;
for (i=0 ; i&lt;30 ; i++)
    global.LevelCardId [i] = 0;
    
global.LevelCardType [30] = "";
for (i=0 ; i&lt;30 ; i++)
    global.LevelCardType [i] = "";


global.totalLevelFlipCnt = 0;

global.gameOverInSubLevel = 0;

global.can_select = true;
global.flipAttempts = 0;

global.NOfMatchedCards = 0;

Level = global.subLevelNum;
global.subLevel = real(Level)-1;

if global.subLevel == 0
    global.subLevel = 6;
else 
    global.subLevel = global.subLevel-1;

tempLevel = "A6"; 
global.nextGame = false;
global.levelScore = 0;

switch (global.subLevel)
    {
        case 0:
            Level = "A1";
            global.levelCardsN = 3;
            //global.validMove = 10;
            //global.perfectMove = 5;
            global.gap = 1;
            width = 3;
            height = 2;
            break;
            
        case 1:
            Level = "A2";
            global.levelCardsN = 4;
            //global.validMove = 14;
            //global.perfectMove = 7;
            global.gap =2;
            width = 3;
            height = 3;
            break;
        case 2:
            Level = "A3";
            global.levelCardsN = 4;
            //global.validMove = 16;
            //global.perfectMove = 8;
            global.gap =2;
            width = 4;
            height = 2;
            break;
        case 3:
            Level = "A4";
            global.levelCardsN = 6 ;
            //global.validMove = 20;
            //global.perfectMove = 10;
            global.gap =3;
            width = 4;
            height = 3;
            break;
        case 4:
            Level = "A5";
            global.levelCardsN = 7 ;
            //global.validMove = 30;
            //global.perfectMove =15
            global.gap =3;
            width = 5;
            height = 3;
            break;
        case 5:
            Level = "A6";
            global.levelCardsN = 7 ;
            //global.validMove = 30;
            //global.perfectMove = 15;
            global.gap = 4;
            width = 5;
            height = 3;
            break;            
        case 6:
            Level = "A0";
            global.levelCardsN = 2 ;
            //global.validMove = 6;
            //global.perfectMove = 3;
            global.gap = 1;
            width = 2;
            height = 2;
            break;        
    }
global.perfectMove = ds_map_find_value(global.PerfectMove_Map , real(global.subLevelNum));
global.validMove = ds_map_find_value(global.validMove_Map , real(global.subLevelNum));
 
LevelCards [global.levelCardsN*2+1] = 0;
global.subLevel = real(string_copy( Level , 2 , 1));

flag = false;  // if true means: the random number selected, go out of while
flag1 = false; //if true means: the selected random number equals no other previous random numbers
randNList [global.levelCardsN] = 0;
for (t= 0 ; t&lt;global.levelCardsN+1 ; t++)
    randNList [t] = 10;

        
list[7] = 10;
    for (i=0; i&lt;7; i+=1)
    {
        list[i] = i;
        //scr_show_array(list);
    }    
        
    
    listOfLessonCards = ds_map_create();
    for(i=0 ; i&lt;7 ; i++)
    {
    ds_map_add(listOfLessonCards , list[i] , global.cardAppearFreq[(real(global.levelNum)-1)*7 + i] )
    //show_message(list[i]);
    //show_message(global.cardAppearFreq[(real(global.levelNum)-1)*7 + i]);
    }

    for(i=(real(ds_map_find_value(global.subLevelVocabsNum , real(global.subLevelNum))))-1 ; i&gt;=0  ; i--)
        for(j=0; j&lt;i ; j++)
            if(ds_map_find_value(listOfLessonCards , list[j]) == ds_map_find_value(listOfLessonCards , list[j+1]))
                {
                randomize();
                r2 = irandom(1);
                if(r2 == 1)
                    {
                    tmp = list[j];
                    list[j] = list[j+1];
                    list[j+1] = tmp;
                    }
                }
            else  
            if(ds_map_find_value(listOfLessonCards , list[j]) &gt; ds_map_find_value(listOfLessonCards , list[j+1]))
                {

                tmp = list[j];
                list[j] = list[j+1];
                list[j+1] = tmp;
                }

                
        for(i= 0 ; i&lt; global.levelCardsN ; i++)        
        {
        LevelCards[i*2] = global.arrayOfCards[(real(global.levelNum)-1)*14 + list[i]*2];
        LevelCards[i*2+1] = global.arrayOfCards[(real(global.levelNum)-1)*14 +list[i]*2+1];
        //global.cardInSubLevelFreq[(real(global.levelNum)-1)*7 + list[i]]= string(real(global.cardInSubLevelFreq[(real(global.levelNum)-1)*7 + list[i]]) + power( 10 , ((real(global.subLevelNum) -1))));
        global.cardAppearFreq[(real(global.levelNum)-1)*7 + list[i]] ++;
            
            
            WholeCrads[global.subLevel*global.levelCardsN + i] ++;         
        }
        

LevelCards[(global.levelCardsN*2)] = "spr_test";

for (i=0 ; i&lt;global.levelCardsN*2+1 ; i++)
{
cardsCount [i] = 0;
}

xx=(room_width/2) - ((width-1) * 90);
yy=(room_height/2+10) - ((height-1) * 90);

found = false;
n = global.levelCardsN*2 - 1 ;
randomize();
if(global.subLevel == 2 or global.subLevel == 6 or global.subLevel == 5)
        {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
    else
        {  r= irandom(n);  }
t=0;
for (var i=0 ; i&lt;width ; i++)
{
    for (var j=0 ; j&lt;height ; j++)
    {
        t++;
        var card = instance_create(xx,yy,obj_cardNew);    
        while(found == false)
        {
            if (cardsCount[r] &lt; 1)
                {
                    card.type = string(LevelCards[r]); /// card type
                    global.LevelCardId [t] = card.id;
                    if( real(string_copy(string(LevelCards[r]) , 8 , 1))==0)
                        card.isPicture = true;
                    else
                        card.isPicture = false;
                    card.vocab_pic = ds_map_find_value(global.vocab_card , LevelCards[r]);
                    
                    
                    if (r == global.levelCardsN*2)
                        card.test = 1;
                    else 
                        card.test = 0;
                        
                    global.LevelCardType [t] = card.type;
                    
                    found = true;
                    cardsCount[r]++;
                }
                else
                {
                   randomize();
                   if(global.subLevel == 2 or global.subLevel == 5 or global.subLevel == 6)
                        {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
                    else
                        {  r= irandom(n);  } 
                   found = false;
                }
        }
        randomize();
        if(global.subLevel == 2 or global.subLevel == 5 or global.subLevel == 6)
            {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
        else
            {  r= irandom(n);  }
        found = false;
        yy += 175;//160;
    }
randomize();
if(global.subLevel == 2 or global.subLevel == 5 or global.subLevel == 6)
        {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
    else
        {  r= irandom(n);  }     
xx += 175;//160;
yy=(room_height /2 + 10) - ((height-1) * 90);
}

///mini game timer enabler
global.miniGameStarted = 1;
//var timer = instance_create(200,100,obj_gameCntUp); 

alarm[0] = room_speed * 0.05;

// }end of else in line 77

listOfSpritesForGameResult[0] = "0";
listOfItemsForGameResult[0]   = "0";

/*for(var i = 0;i&lt; global.levelCardsN*2; i++)
{
        //show_message("*-*-*" + string(LevelCards[i]));
        if(real(string_copy(string(LevelCards[i]) , 8 , 1))==0){ // it is picture 
    
        if( scr_array_contains(listOfSpritesForGameResult, string(LevelCards[i])) == 0)
        {
            if(listOfSpritesForGameResult[0] == "0")
            {
                listOfSpritesForGameResult[0] =  string(LevelCards[i]);
            }else
            {
                temp = array_length_1d(listOfSpritesForGameResult);
                listOfSpritesForGameResult[temp] = string(LevelCards[i]);
            }
        }
        
    }
    else
    {
        if(scr_array_contains(listOfItemsForGameResult, string(LevelCards[i])) == 0)
        {
            if(listOfItemsForGameResult[0] == "0")
            {
                listOfItemsForGameResult[0] =  string(LevelCards[i]);
            }else
            {
                temp = array_length_1d(listOfItemsForGameResult);
                listOfItemsForGameResult[temp] = string(LevelCards[i]);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.seqTimeEnable == true)
    global.gameSeqTime = global.gameSeqTime + 1/room_speed;

if(/*global.nextGame = true or */global.gameOverInSubLevel == 1)
{
    global.LevelCardId [30] = 0;
    for (i=0 ; i&lt;30 ; i++)
        global.LevelCardId [i] = 0;
        
    global.LevelCardType [30] = "";
    for (i=0 ; i&lt;30 ; i++)
        global.LevelCardType [i] = "";
        
        
    if (global.gameOverInSubLevel == 0)
    {
        global.threeTime ++;   
    }
    
    global.nextGame = false;
    with (obj_card)
    {
        instance_destroy();
    }   
    global.selectionNumber = 0;
    global.match[0,0]= "null";
    global.match[0,1]= 999;
    global.match[1,0]= "null";
    global.match[1,1]= 999;
    
    global.totalLevelFlipCnt = 0;
        
    //global.pairCnt = 0;
    
    global.can_select = true;
    global.flipAttempts = 0;
    
    global.NOfMatchedCards = 0;
    
    global.nextGame = false;
    tempLevel = Level;
    
    //Level = "A0";
    
    //global.subLevel = real(Level);
    global.subLevel = real(string_copy( Level , 2 , 1));

    
    if (global.threeTime == 3 and  global.gameOverInSubLevel == 0)
    {
    
        for (i=0 ; i&lt;6 ; i++)
            global.threeStarMemory[i] = 3;
        global.threeTime = 0;
        global.levelScore = 0;
        
    }
    else
    {
        switch (global.subLevel)
        {
            case 0:
                Level = "A0";
                global.levelCardsN = 2 ;
                //global.validMove = 6;
                //global.perfectMove = 3;
                width = 2;
                height = 2;
                break; 
                
            case 1:
                Level = "A1";
                global.levelCardsN = 3;
                //global.validMove = 10;
                //global.perfectMove = 5;
                width = 3;
                height = 2;
                break;
                
            case 2:
                Level = "A2";
                global.levelCardsN = 4;
                //global.validMove = 14;
                //global.perfectMove = 7;
                width = 3;
                height = 3;
                break;
            case 3:
                Level = "A3";
                global.levelCardsN = 4;
                //global.validMove = 16;
                //global.perfectMove = 8;
                width = 4;
                height = 2;
                break;
            case 4:
                Level = "A4";
                global.levelCardsN = 6 ;
                //global.validMove = 20;
                //global.perfectMove = 10;
                width = 3;
                height = 4;
                break;
            case 5:
                Level = "A5";
                global.levelCardsN = 7 ;
                //global.validMove = 30;
                //global.perfectMove = 15;
                width = 3;
                height = 5;
                break;
            case 6:
                Level = "A6";
                global.levelCardsN = 7 ;
                //global.validMove = 30;
                //global.perfectMove = 15;
                width = 3;
                height = 5;
                break;                   
        }
        
        global.perfectMove = ds_map_find_value(global.PerfectMove_Map , real(global.subLevelNum));
        global.validMove = ds_map_find_value(global.validMove_Map , real(global.subLevelNum));     
    }
    
    LevelCards [global.levelCardsN*2+1] = 0; // +1 is for levels with odd number of cards
    
    

    
    
    global.subLevel = real(string_copy( Level , 2 , 1));
    
    count = 13;
    
    flag = false;  // if true means: the random number selected, go out of while
    flag1 = false; //if false means: the selected random number equals no other previous random numbers
    
    
    randNList [global.levelCardsN] = 0;
    for (t= 0 ; t&lt;global.levelCardsN+1 ; t++)
        randNList [t] = 10;
        
        

        
    list[7] = 10;
    for (i=0; i&lt;7; i+=1)
    {
        list[i] = i;
        //scr_show_array(list);
    }    
        
    
    listOfLessonCards = ds_map_create();
    for(i=0 ; i&lt;7 ; i++)
    ds_map_add(listOfLessonCards , list[i] , global.cardAppearFreq[(real(global.levelNum)-1)*7 + i] )

    for(i=(real(ds_map_find_value(global.subLevelVocabsNum , real(global.subLevelNum))))-1 ; i&gt;=0  ; i--)
        for(j=0; j&lt;i ; j++)
            if(ds_map_find_value(listOfLessonCards , list[j]) == ds_map_find_value(listOfLessonCards , list[j+1]))
                {
                randomize();
                r2 = irandom(1);
                if(r2 == 1)
                    {
                    tmp = list[j];
                    list[j] = list[j+1];
                    list[j+1] = tmp;
                    }
                }
            else  
            if(ds_map_find_value(listOfLessonCards , list[j]) &gt; ds_map_find_value(listOfLessonCards , list[j+1]))
                {
                tmp = list[j];
                list[j] = list[j+1];
                list[j+1] = tmp;
                }

        for(i= 0 ; i&lt; global.levelCardsN ; i++)        
        {
        LevelCards[i*2] = global.arrayOfCards[(real(global.levelNum)-1)*14 + list[i]*2];
        LevelCards[i*2+1] = global.arrayOfCards[(real(global.levelNum)-1)*14 +list[i]*2+1];
        //global.cardInSubLevelFreq[(real(global.levelNum)-1)*7 + list[i]]= string(real(global.cardInSubLevelFreq[(real(global.levelNum)-1)*7 + list[i]]) + power( 10 , ((real(global.subLevelNum) -1))));
        global.cardAppearFreq[(real(global.levelNum)-1)*7 + list[i]] += 1;
            WholeCrads[global.subLevel*global.levelCardsN + i] ++;   
        }
        
        
        
                

    LevelCards[(global.levelCardsN*2)] = "spr_test";
    
    for (i=0 ; i&lt;global.levelCardsN*2+1 ; i++)
    {
    cardsCount [i] = 0;
    }
    
    xx=(room_width/2) - ((width-1) * 90);
    yy=(room_height/2+10) - ((height-1) * 90);
    
    found = false;
    n = ((global.levelCardsN*2) - 1) ;
    randomize();
    if(global.subLevel == 2 or global.subLevel == 6 or global.subLevel == 5)
    {
        r = irandom(n+1);//+1 is for the levels with odd cards
    }
    else
    {
    r= irandom(n);
    }
    
    t=0;
    for (var i=0 ; i&lt;width ; i++)
    {
        for (var j=0 ; j&lt;height ; j++)
        {
            t++;
            var card = instance_create(xx , yy,obj_card);    
            while(found == false)
            {
                if (cardsCount[r] &lt; 1)
                    {
                        card.type = string(LevelCards[r]); /// card type
                        
                        if( real(string_copy(string(LevelCards[r]) , 8 , 1))==0)
                            card.isPicture = true;
                        else
                            card.isPicture = false;
                        
                        
                        if (r == global.levelCardsN*2)
                            card.test = 1;
                        else 
                            card.test = 0;
                            
                        global.LevelCardId [t] = card.id;
                        global.LevelCardType [t] = card.type;
                        card.vocab_pic = ds_map_find_value(global.vocab_card , LevelCards[r]);
                    
                        
                        found = true;
                        cardsCount[r]++;
                    }
                    else
                    {
                        randomize();
                        if(global.subLevel == 2 or global.subLevel == 6 or global.subLevel == 5)
                            {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
                        else
                            {  r= irandom(n);  }
                       found = false;
                    }
            }
            randomize();
            if(global.subLevel == 2 or global.subLevel == 6 or global.subLevel == 5)
                {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
            else
                {  r= irandom(n);  }
            found = false;
            yy += 175;
        }
    randomize();
    if(global.subLevel == 2 or global.subLevel == 6 or global.subLevel == 5)
        {r = irandom(n+1);} /*+1 is for the levels with odd cards*/
    else
        {  r= irandom(n);  }     
    xx += 175;
    yy=(room_height /2 + 10) - ((height-1) * 90);
    }
    
    global.miniGameStarted = 1;
    
    alarm[0] = room_speed * 0.05;
    
    if (global.gameOverInSubLevel == 1)
    {
    global.gameOverInSubLevel = 0;
    
    //....//Level = "A6"; // reason: the player is game over and we want the game to start over
    }
    
    for(var i = 0;i&lt; global.levelCardsN*2; i++)
    {
        //show_message("***" + string(LevelCards[i]));
        if(real(string_copy(string(LevelCards[i]) , 8 , 1))==0){ // it is picture 
        
            if( scr_array_contains(listOfSpritesForGameResult, string(LevelCards[i])) == 0)
            {
                if(listOfSpritesForGameResult[0] == "0")
                {
                    listOfSpritesForGameResult[0] =  string(LevelCards[i]);
                }else
                {
                    temp = array_length_1d(listOfSpritesForGameResult);
                    listOfSpritesForGameResult[temp] = string(LevelCards[i]);
                }
            }
            
        }
        else
        {
            if( scr_array_contains(listOfItemsForGameResult, string(LevelCards[i])) == 0)
            {
                if(listOfItemsForGameResult[0] == "0")
                {
                    listOfItemsForGameResult[0] =  string(LevelCards[i]);
                }else
                {
                    temp = array_length_1d(listOfItemsForGameResult);
                    listOfItemsForGameResult[temp] = string(LevelCards[i]);
                }
            }
        }
    }
}    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initializing room
dwidth  = ds_map_find_value(global.roomInt , "dwidth");
dheight = ds_map_find_value(global.roomInt , "dheight");
xview   = ds_map_find_value(global.roomInt , "xview");
yview   = ds_map_find_value(global.roomInt , "yview");
vwidth  = ds_map_find_value(global.roomInt , "vwidth");
vheight = ds_map_find_value(global.roomInt , "vheight");

level = 0;
if(((real(global.levelNum)-1)*7 + real(global.subLevelNum))+1 &lt;43)
    level = ((real(global.levelNum)-1)*7 + real(global.subLevelNum))+1
else 
    level = 42;
    
lastPlayed_y = ds_map_find_value(global.yPositionOfLevelNumbers , level );
yBasedLastPlayed = lastPlayed_y - vheight*1/8;
if(yBasedLastPlayed &gt; 5660 - vheight )
    yBasedLastPlayed = 5660 - vheight;

room_set_view(room_levelSelection, 0, 1, xview, yBasedLastPlayed , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
room_goto(room_levelSelection);
//end of initializing room
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fnt_bigJohn);
/*for (i=0 ; i&lt;20 ; i++)
    {
        draw_text (i*10+100 , 200 , global.threeStarOfLevels[(real(global.levelNum)-1)*7+(real(global.subLevelNum)-1)*3+i]);
    }
*/        

if(real(global.subLevelNum) &lt; 5)
{

if (global.starChangeFlag == 1)
{
    global.starChangeFlag = 0;
    
    ///////// star drawing variables
    _star_subImage = 0;
    _star_xscale = 0;
    _star_yscale = 0;
    _star_rot = 0;
    _star_alpha = 0;
    star_xscale = 0;
    star_yscale = 0;
    star_rot = 0;
    star_alpha = 0;
    star_xscaleStr = "null";
    star_yscaleStr = "null";
    star_rotStr = "null";
    star_alphaStr = "null";
    /////////////////////////////////
}
      
      _star_xscale += 0.05;
      _star_yscale += 0.05;
      _star_rot += 18;
      _star_alpha += 0.05;
      
      star_fourVariable = scr_starSpin(_star_xscale, _star_yscale, _star_rot , _star_alpha);
      
      if (real(string_copy(star_fourVariable, 1 , 4)) == 1111)
      {
          star_xscale = real(string_copy(star_fourVariable, 1 , 3));
          star_yscale = real(string_copy(star_fourVariable, 4 , 3));
          star_rot =    real(string_copy(star_fourVariable, 7 , 3));
          star_alpha =  real(string_copy(star_fourVariable, 10, 3));
      }
      else
      {
          star_xscale = real(string_copy(star_fourVariable, 1 , 4));
          star_yscale = real(string_copy(star_fourVariable, 5 , 4));
          star_rot =    real(string_copy(star_fourVariable, 9 , 3));
          star_alpha =  real(string_copy(star_fourVariable, 12, 4));
      }
      
      if (star_xscale == 111)
        star_xscale =1;
      
      
      if (star_yscale == 111)
        star_yscale = 1;
      
      
      if (star_rot &gt; 900)
        star_rot = star_rot-900;
    
      
      if (star_alpha == 111)
        star_alpha = 1;
        
switch (global.threeTime)
{
    case 0:
            switch (global.starColor)
            {
                case 0:
                    _star_subImage = 0;
                    global.threeStarMemory [0] = 0;
                    break;
                    
                case 1:
                    _star_subImage = 1;
                    global.threeStarMemory [0] = 1;
                    break;
                    
                case 2:
                    _star_subImage = 2;
                    global.threeStarMemory [0] = 2;
                    break;
            }
            
            if (global.starLevelEnd == 1)
            { 
                starFlag = 0;
                /*draw_sprite_ext (star2 , _star_subImage , room_width/2 - (star_xscale)*80, ( 1/4 + (1-star_xscale))*100,
                    1-star_xscale, 1-star_yscale, 0, -1 , 1);*/
                if (_star_xscale &gt; 0.6)
                {
                global.threeStarMemory [3] = 1;
                }
            }
            
            else if (starCreating == 1)
            {
                if(star_xscale == 1)
                {
                starCreating = 0;
                starFlag = 1;
                }
                /*draw_sprite_ext (star2 , 0 , room_width/2 - (1-star_xscale)*80, ( 1/4 + (star_xscale))*50,
                    star_xscale, star_yscale, 0, -1 , 1);     */
            }
            else if (star_xscale &lt;= 1 )
            {
                /*if (starFlag == 1)
                draw_sprite_ext( star2,_star_subImage, room_width/2, 65,
                    star_xscale, star_yscale, 0, -1, star_alpha );*/
                    
            }
            else
            {
                /*if (starFlag == 1) 
                draw_sprite_ext( star2,_star_subImage, room_width/2, 65, 1, 1 , 0, -1, 1 );*/
            }    
        break;
        
    case 1:
            switch (global.starColor)
            {
                case 0:
                    _star_subImage = 0;
                    //draw_text (30, 100 , "gold");
                    global.threeStarMemory [1] = 0;
                    break;
                case 1:
                    _star_subImage = 1;
                    //draw_text (30, 100 , "silver");
                    global.threeStarMemory [1] = 1;
                    break;
                case 2:
                    _star_subImage = 2;
                    //draw_text (30, 100 , "bronz");
                    global.threeStarMemory [1] = 2;
                    break;
            }
            if (global.starLevelEnd == 1)
            {
                starFlag = 0;
                /*draw_sprite_ext (star2 , _star_subImage , room_width/2 , ( 1/4 + (1-star_xscale))*50,
                    1-star_xscale, 1-star_yscale, 0, -1 , 1);*/
                if (_star_xscale &gt; 0.6)
                {
                    global.threeStarMemory [4] = 1;
                }
            }
            
            else if (starCreating == 1 )
            {
                if(star_xscale == 1)
                {
                starCreating = 0;
                starFlag = 1;
                }
                /*draw_sprite_ext (star2 , 0 , room_width/2 , ( 1/4 + (star_xscale))*100,
                    star_xscale, star_yscale, 0, -1 , 1);     */
            }
            else if (star_xscale &lt;= 1 and global.starColor &gt; 0)
            {
                /*if (starFlag == 1)
                draw_sprite_ext( star2,_star_subImage, room_width/2, 125,
                    star_xscale, star_yscale, 0, -1, star_alpha );*/
                    
            }
            else
            {
                /*if (starFlag==1) 
                draw_sprite_ext( star2,_star_subImage, room_width/2, 125, 1, 1 , 0, -1, 1 );*/
            }
                    
        break;
        
    case 2:
            switch (global.starColor)
            {
                case 0:
                    _star_subImage = 0;
                    //draw_text (50, 100 , "gold");
                    global.threeStarMemory [2] = 0;
                    break;
                case 1:
                    _star_subImage = 1;
                    //draw_text (50, 100 , "silver");
                    global.threeStarMemory [2] = 1;
                    break;
                case 2:
                    _star_subImage = 2;
                    //draw_text (50, 100 , "bronz");
                    global.threeStarMemory [2] = 2;
                    break;
            }
            if (global.starLevelEnd == 1)
            {
                starFlag = 0;
                /*draw_sprite_ext (star2 , _star_subImage , room_width/2 + (star_xscale)*80, ( 1/4 + (1-star_xscale))*100,
                    1-star_xscale, 1-star_yscale, 0, -1 , 1);*/
                if (_star_xscale &gt; 0.6)
                {
                global.threeStarMemory [5] = 1;
                }
            }
            
            else if (starCreating == 1  )
            {
                if(star_xscale == 1)
                {
                starCreating = 0;
                starFlag = 1;
                }
                /*draw_sprite_ext (star2 , 0 , room_width/2 + (1-star_xscale)*80, ( 1/4 + (star_xscale))*100,
                    star_xscale, star_yscale, 0, -1 , 1);     */
            }
            else if (star_xscale &lt;= 1 )
            {
                /*if (starFlag == 1)
                draw_sprite_ext( star2,_star_subImage, room_width/2, 125,
                    star_xscale, star_yscale, 0, -1, star_alpha );*/
                    
            }
            else
            {
                 
                 /*if (starFlag==1) draw_sprite_ext( star2,_star_subImage, room_width/2, 125, 1, 1 , 0, -1, 1 );*/
            }
            
        break;
}




   //effect_create_above(ef_spark, bbox_left + random(sprite_width), bbox_top + random(sprite_height), choose(0, 1), merge_color(c_white, c_yellow, random(1)));
    
/////////////////////////////////////////////////
/////////////////////////////////////////////////
/////////////////////////////////////////////////

draw_set_color(c_white);
}


//global.showFeedback = true;
if(global.showFeedback == true)
{
    midFlag = false;
    firstFlag = true;
    global.showFeedback = false;
    feedBack_is_showing = true;

}

if(global.userFeedbackEnable  == true)
if(feedBack_is_showing == true)
{
        if(firstFlag == true)
        {
        
        
             randomize();
             r_f = irandom(6);
            
             switch(r_f)
             {
                 case 0:    
                    spr_feedback = spr_crackingjob;
                    audio_to_play= "snd_fb_1";
                    r            = 2;     
                 break;
                 case 1:    
                    spr_feedback = spr_crashhot;
                    audio_to_play = "snd_fb_1";
                    r             = 1;
                 break;
                 case 2:    
                    spr_feedback = spr_delightful;      
                    audio_to_play = "snd_fb_2";
                    r             = 4;
                 break;
                 case 3:    
                    spr_feedback = spr_farout;          
                    audio_to_play = "snd_fb_1";
                    r             = 0;
                 break;
                 case 4:    
                    spr_feedback = spr_marvellous;      
                    audio_to_play = "snd_fb_2";
                    r             = 3;
                 break;
                 case 5:    
                    spr_feedback = spr_nicejob;         
                    audio_to_play = "snd_fb_2";
                    r             = 0;
                 break;
                 case 6:    
                    spr_feedback = spr_terrific;
                    audio_to_play= "snd_fb_1";
                    r            = 2;
                 break;
             }
            
            //randomize();
            //r = irandom(4);
            color_f = -1;
            switch(r)
            {
                case 0:
                    firstFlag = false;  wait = 0;   cnt = 0;    cntp = 0.05;                
                    x_f = 570;          y_f = 360;              range_x_1 = 0;                  range_y_1 = 0;
                    xscale_f = 0;       yscale_f = 0;           range_xs_1 = 0.05;              range_ys_1 = 0.05;
                    rot_f = 0;          alpha_f=0;              range_rot_1=0;                  range_alpha_1 = 0.05;
                    
                                                                range_x_2 = 0;                  range_y_2 = 0;
                                                                range_xs_2 = -0.05;             range_ys_2 = -0.05;
                                                                range_rot_2=0;                  range_alpha_2 = -0.05;
                                                                
                                                                range_x_w = 0;                  range_y_w = 0;
                                                                range_xs_w = pi/8;              range_ys_w = pi/8;
                                                                range_rot_w=0;                  range_alpha_w = 0;
                                                                temp_xs_w = 0;                  temp_ys_w = 0;
                break;
                
                case 1:
                    firstFlag = false;  wait = 0;   cnt = 0;    cntp = 0.05;
                    x_f =room_width/2;  y_f = view_yview[0];    range_x_1 = 0;                  range_y_1 = view_hview[0]/40;
                    xscale_f = 0;       yscale_f = 0;           range_xs_1 = 0.05;              range_ys_1 = 0.05;
                    rot_f = 0;          alpha_f=0;              range_rot_1=0;                  range_alpha_1 = 0.05;
                    
                                                                range_x_2 = 0;                  range_y_2 = view_hview[0]/40;
                                                                range_xs_2 = -0.05;             range_ys_2 = -0.05;
                                                                range_rot_2=0;                  range_alpha_2 = -0.05;
                                                                
                                                                range_x_w = 0;                  range_y_w = 0;
                                                                range_xs_w =pi/8;               range_ys_w = pi/8;
                                                                range_rot_w=0;                  range_alpha_w = 0;
                                                                temp_xs_w = 0;                  temp_ys_w = 0;
                break;
                
                case 2:
                    firstFlag = false;  wait = 0;   cnt = 0;    cntp = 0.05;
                    x_f =room_width/2;  y_f = view_yview[0];    range_x_1 = 0;                  range_y_1 = view_hview[0]/40
                    xscale_f = 0;       yscale_f = 0;           range_xs_1 = 0.05;              range_ys_1 = 0.05;
                    rot_f = 0;          alpha_f=0;              range_rot_1=360/10;             range_alpha_1 = 0.05;
                        
                                                                range_x_2 = 0;                  range_y_2 = view_hview[0]/40
                                                                range_xs_2 = -0.05;             range_ys_2 = -0.05;
                                                                range_rot_2=-360/10;            range_alpha_2 = -0.05;
                                                                
                                                                range_x_w = 0;                  range_y_w = 0;
                                                                range_xs_w = pi/8;              range_ys_w = pi/8;
                                                                range_rot_w=0;                  range_alpha_w = 0;
                                                                temp_xs_w = 0;                  temp_ys_w = 0;
                break;
                
                case 3:
                    firstFlag = false;  wait = 0;   cnt = 0;    cntp = 0.1;
                    x_f =room_width;    y_f = room_height/2;    range_x_1 = -view_wview[0]/20;  range_y_1 = 0;
                    xscale_f = 2;       yscale_f = 0.5;         range_xs_1 = -0.1;             range_ys_1 = 0.05;
                    rot_f = 0;          alpha_f=0.5;            range_rot_1= 0;                 range_alpha_1 = 0.05;
                        
                                                                range_x_2 = -view_wview[0]/20;  range_y_2 = 0;
                                                                range_xs_2 = 0.1;              range_ys_2 = -0.05;
                                                                range_rot_2= 0;                 range_alpha_2 = -0.05;
                                                                
                                                                range_x_w = 0;                  range_y_w = 0;
                                                                range_xs_w =pi/8;;              range_ys_w = pi/8;
                                                                range_rot_w=0;                  range_alpha_w = 0;
                                                                temp_xs_w = 0;                  temp_ys_w = 0;
                break;
                
                case 4:
                    firstFlag = false;  wait = 0;   cnt = 0;    cntp = 0.05;
                    x_f =room_width;    y_f = room_height/2;    range_x_1 = -view_wview[0]/40;  range_y_1 = 0;
                    xscale_f = 1;       yscale_f = 0.5;         range_xs_1 = 0;                 range_ys_1 = 0.025;
                    rot_f = 0;          alpha_f=0.5;            range_rot_1= 0;                 range_alpha_1 = 0.025;
                        
                                                                range_x_2 = -view_wview[0]/40;  range_y_2 = 0;
                                                                range_xs_2 = 0;                 range_ys_2 = -0.025;
                                                                range_rot_2= 0;                 range_alpha_2 = -0.025;
                                                                
                                                                range_x_w = 0;                  range_y_w = 0;
                                                                range_xs_w = pi/8;              range_ys_w = pi/8;
                                                                range_rot_w=0;                  range_alpha_w = 0;
                                                                temp_xs_w = 0;                  temp_ys_w = 0;
                break;
    
            }
             
        }
        else
        {
            if(midFlag == false)
            {
        
                x_f += range_x_1;
                y_f += range_y_1;
                xscale_f += range_xs_1;
                yscale_f += range_ys_1;
                rot_f += range_rot_1;
                color_f = -1;
                alpha_f += range_alpha_1;
                cnt += cntp;
                if(cnt == 1)
                {
                    midFlag = true;
                    cnt = 0;
                }
            }

            if(midFlag == true)
            {
                if(wait == 0)
                {
                    audio_play_sound(asset_get_index(audio_to_play), 10,false);
                    if(audio_to_play == "snd_fb_1")
                        audio_sound_gain(asset_get_index(audio_to_play), global.CardVObj_X/250, 100);
                    else
                        audio_sound_gain(asset_get_index(audio_to_play), global.CardVObj_X/200, 100);
                }
                
                if(wait&gt;12)
                {
                    x_f += range_x_2;
                    y_f += range_y_2;
                    xscale_f += range_xs_2;
                    yscale_f += range_ys_2;
                    rot_f += range_rot_2;
                    color_f = -1;
                    alpha_f += range_alpha_2;
                    cnt += cntp;
                    if(cnt == 1)
                    {
                        midFlag = false;
                        firstFlag = true;
                        global.showFeedback = false;
                        feedBack_is_showing = false;
                    
                    }
                }
                else
                {   
                    x_f += range_x_w;
                    y_f += range_y_w;
                    temp_xs_w += range_xs_w; 
                    temp_ys_w += range_ys_w;
                    xscale_f = (1+(1/2)*sin(temp_xs_w));
                    yscale_f = (1+(1/2)*sin(temp_ys_w));
                    rot_f += range_rot_w;
                    color_f = -1;
                    alpha_f += range_alpha_w;
                    wait++;
                }
            }
        }

         draw_sprite_ext(spr_feedback , 0 , x_f , y_f , xscale_f , yscale_f , rot_f , color_f , alpha_f);
}

var tempColor = make_color_rgb(128,67,53);
draw_set_colour(tempColor);
draw_set_font(fnt_bigJohn);

draw_set_halign(fa_left);
draw_set_valign(fa_middle);

//if(global.seconds == 0)
//{draw_set_font(fnt_bigJohn);draw_text( xview + 10 , yview+10 , global.seconds);}
//else 
var timeText = string(global.minutes) + ":" + string(global.seconds);
draw_text_transformed(xview + vwidth/2 - 150 * (vwidth / 1140)                      ,yview + vheigth -  39 * (vheigth / 720), timeText,1,1,0);

var tempMiniGameCount = 1;
if(global.subLevel &lt; 4)
    tempMiniGameCount = 3;

draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_transformed(xview + vwidth/2 + 75 * (vwidth / 1140) - 19 * (vwidth / 1140),yview + vheigth -  52 * (vheigth / 720), string(global.threeTime+1),0.8,0.8,0);
draw_text_transformed(xview + vwidth/2 + 75 * (vwidth / 1140)                       ,yview + vheigth -  39 * (vheigth / 720), "/",1.1,1.1,-10);
draw_text_transformed(xview + vwidth/2 + 75 * (vwidth / 1140) + 19 * (vwidth / 1140),yview + vheigth -  26 * (vheigth / 720), string(tempMiniGameCount),0.9,0.9,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
