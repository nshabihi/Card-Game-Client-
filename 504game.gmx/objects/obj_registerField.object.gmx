<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_input_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-650</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create a "Fake" text input box


global.text_input_username = "";
global.text_input_email = "";
global.text_input = "";

global.registerErrorX = global.xCenter - 220*global.numericalsXScale;
global.registerErrorY = global.yCenter - 95*global.numericalsYScale;
global.resetErrorsY   = 1;
//global.text_input = global.text_input_username ;

edit = 1;
image_speed = 0;
blink = 0;
alarm[0] = 20;
finished = false;
update_index = 9; // passed on creation


usernameError = "";
emailError = "";
totalError = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blink our "Fake" cursor
if(blink &gt; -1){
  blink = !blink;
}
alarm[0] = 20;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected ==1)
    {/////telling keyboard: It is me!
    global.keyboardInputID = id;
    
    global.registerErrorX = global.xCenter - 220*global.numericalsXScale;
    global.registerErrorY = global.yCenter - 95*global.numericalsYScale;
    global.resetErrorsY   = 1;
    
    usernameError = "";
    emailError = "";
    totalError = "";
    
    // if keyboard is disable, CREATE IT.
    if(global.keyBoardIsActive == 0)
    {
        var keyboard_reg = instance_create(225 , 550 , obj_keyboard);
        global.keyBoardIsActive = 1;
    }
    
    /// setting keyboard text to my previouse text(it is useful when field already has a text in it)
    if(type == 1)
        keyboard_string = global.text_input_username;
    else if(type == 2)
        keyboard_string = global.text_input_email;
    
    global.editUsername = 1;
    edit = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
tempColor = make_color_rgb(128,67,53);
font_scale = 0.6;
draw_set_color(tempColor);
draw_set_font(fnt_bigJohn);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
error_scale = 0.55;

if(type == 1) // username
{
    draw_text_transformed(global.xCenter - 130*global.numericalsXScale,
                          global.yCenter - 210*global.numericalsYScale,
                          "USERNAME",font_scale,font_scale,0);

/*
    draw_sprite_ext(spr_username,0,
                    global.xCenter - 130*global.numericalsXScale,
                    global.yCenter - 210*global.numericalsYScale,
                    0.65*global.numericalsXScale,0.65*global.numericalsYScale,0,-1,1);
*/
                    
    draw_sprite_ext(spr_username_textbox,0,
                    global.xCenter + 95*global.numericalsXScale,
                    global.yCenter - 210*global.numericalsYScale,
                    0.65*global.numericalsXScale,0.65*global.numericalsYScale,0,-1,1);
                    
    draw_sprite_ext(spr_register_popup,0,
                    global.xCenter,
                    global.yCenter - 275*global.numericalsYScale,
                    0.65*global.numericalsXScale,0.65*global.numericalsYScale, 0, -1, 1);
    
}else if(type == 2) // email
{

    draw_text_transformed(global.xCenter - 130*global.numericalsXScale,
                          global.yCenter - 160*global.numericalsYScale,
                          "EMAIL",font_scale,font_scale,0);
    font_scale = 0.45;
    draw_text_transformed(global.xCenter - 130*global.numericalsXScale,
                          global.yCenter - 130*global.numericalsYScale,
                          "(Optional)",font_scale,font_scale,0);

/*
    draw_sprite_ext(spr_email,0,
                    global.xCenter - 130*global.numericalsXScale,
                    global.yCenter - 160*global.numericalsYScale,
                    0.65*global.numericalsXScale,0.65*global.numericalsYScale,0,-1,1);
*/
                    
    draw_sprite_ext(spr_email_textbox,0,
                    global.xCenter + 85*global.numericalsXScale,
                    global.yCenter - 160*global.numericalsYScale,
                    0.65*global.numericalsXScale,0.65*global.numericalsYScale,0,-1,1);
    
}

textBoxColor = make_color_rgb(166,178,188);
ErrorColor   = make_color_rgb(101,53,42);

marker = " ";
usernameXDiff = -42;
emailXDiff    = -55;

usenameYDiff = -3;
emailYDiff   = +5;

if(global.resetErrorsY &gt; 0)
{
    checkUsernameError = 1;
    checkEmailError    = 1;
    checkTotalError    = 1;
    global.resetErrorsY -= 1;
}


//draw_set_alpha(obj_hiscore.alpha);
//draw_set_font(fnt_bigJohn);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);
draw_set_color(textBoxColor);
/*  draw_roundrect(x-3,y-10,x+(16*11),y+11,false);
  draw_set_color(c_black);
  draw_roundrect(x-3,y-10,x+(16*11),y+11,true);
  draw_set_color(c_black);
*/

if(global.keyboardInputID == id or global.keyboardInputID == 0)
{
  if(blink == 1){marker = "_";}
}
/// Display the text input
draw_set_font(fnt_keyboard_arial);
font_scale = 0.8;
if(edit == 1)
{  
    if(type == 1)
        draw_text_transformed(x+usernameXDiff,y+usenameYDiff,/*"Enter Name"+*/marker,font_scale,font_scale,0);
    else if (type ==2)
        draw_text_transformed(x+emailXDiff,y+emailYDiff,/*"Enter Email"+*/marker,font_scale,font_scale,0);
}

if(edit == 2)
{
    if(type == 1)
    {
         if(0.65*(sprite_get_width(spr_username_textbox)-120)&gt;(0.8*string_width(global.text_input_username+" ")))
            draw_text_transformed(x+usernameXDiff,y+usenameYDiff,global.text_input_username+marker,font_scale,font_scale,0);
         
         else
         {
            scl =0.65*(sprite_get_width(spr_username_textbox)-120)/(0.8*string_width(global.text_input_username+" "));
            draw_text_transformed(x+usernameXDiff,y+usenameYDiff,global.text_input_username+marker,scl*font_scale,scl*font_scale,0);
         }
   }
    else if (type ==2)
    {
        if(0.65*(sprite_get_width(spr_email_textbox)-120)&gt;(0.8*string_width(global.text_input_email+" ")))
            draw_text_transformed(x+emailXDiff,y+emailYDiff,global.text_input_email+marker,font_scale,font_scale,0);

        else
        {
            scl =0.65*(sprite_get_width(spr_email_textbox)-120)/(0.8*string_width(global.text_input_email+" "));
            draw_text_transformed(x+emailXDiff,y+emailYDiff,global.text_input_email+marker,scl*font_scale,scl*font_scale,0);
        }
    }
}

if(edit == 3)
{
    if(type == 1)
    {
        if(0.65*(sprite_get_width(spr_username_textbox)-120)&gt;(0.8*string_width(global.text_input_username+" ")))
            draw_text_transformed(x+usernameXDiff,y+usenameYDiff,global.text_input_username,font_scale,font_scale,0);
        else
        {
            scl =0.65*(sprite_get_width(spr_username_textbox)-120)/(0.8*string_width(global.text_input_username+" "));    
            draw_text_transformed(x+usernameXDiff,y+usenameYDiff,global.text_input_username,scl*font_scale,scl*font_scale,0);
        }
    }    
    else if (type ==2)
    {
        if(0.65*(sprite_get_width(spr_email_textbox)-120)&gt;(0.8*string_width(global.text_input_email+" ")))
            draw_text_transformed(x+emailXDiff,y+emailYDiff,global.text_input_email,font_scale,font_scale,0);      
        else
        {
            scl =0.65*(sprite_get_width(spr_email_textbox)-120)/(0.8*string_width(global.text_input_email+" "));
            draw_text_transformed(x+emailXDiff,y+emailYDiff,global.text_input_email,scl*font_scale,scl*font_scale,0);
        }
    }
}

draw_set_color(ErrorColor);
    
switch(usernameError)
{
    case "length" :
        if(checkUsernameError){
            checkUsernameError = 0;
            usernameErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , usernameErrorY , "*username must be 4-8 characters" , error_scale,error_scale,0);
    break;
    /*
    case "parameter":
        draw_text(120 , 220 , "parameter error");
    break;
    
    case "duplication":
        draw_text(120 , 220 , "you are loged in");
    break;
    
    case "validity" :
        draw_text(120 , 220 , "email format isn't correct");
    break;
    
    case "used" :
        draw_text(120 , 220 , "email is used befor");
    break;

    case "failure" :
        draw_text(120 , 220 , "server failure");
    break;
    */
}

switch(emailError)
{   

    case "length" :
        if(checkEmailError){
            checkEmailError = 0;
            emailErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , emailErrorY , "*email isn't correct", error_scale,error_scale,0);
    break;
    /*    
    case "parameter":
        draw_text(120 , 300 , "parameter error");
    break;
    
    case "duplication":
        draw_text(120 , 300 , "you are loged in");
    break;
    */
    case "validity" :
        if(checkEmailError){
            checkEmailError = 0;
            emailErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , emailErrorY , "*email format isn't correct", error_scale,error_scale,0);
    break;
    
    case "used" :
        if(checkEmailError){
            checkEmailError = 0;
            emailErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , emailErrorY , "*email is used befor", error_scale,error_scale,0);
    break;
    /*
    case "failure" :
        draw_text(120 , 300 , "server failure");
    break;
    */
}

switch(totalError)
{   
    /*
    case "length" :
        draw_text(120 , 100 , "email isn't correct");
    break;
    */    
    case "parameter":
        if(checkTotalError){
            checkTotalError = 0;
            totalErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , totalErrorY , "*parameter error", error_scale,error_scale,0);
    break;
    
    case "duplication":
        if(checkTotalError){
            checkTotalError = 0;
            totalErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , totalErrorY , "*you are loged in", error_scale,error_scale,0);
    break;
    /*
    case "validity" :
        draw_text(120 , 100 , "email format isn't correct");
    break;
    
    case "used" :
        draw_text(120 , 100 , "email is used befor");
    break;
    */
    case "failure" :
        if(checkTotalError){
            checkTotalError = 0;
            totalErrorY = global.registerErrorY;
            global.registerErrorY      += 30;
        }
        draw_text_transformed(global.registerErrorX , totalErrorY , "*server failure", error_scale,error_scale,0);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>165,165</point>
  </PhysicsShapePoints>
</object>
