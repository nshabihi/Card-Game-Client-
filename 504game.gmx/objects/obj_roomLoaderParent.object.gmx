<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_submit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>checknet = 0;


global.parentID = id;
check = false;
if(global.SendingPingEnable == true)
{
    alarm[11] = room_speed / 2;
}
//lastLoginTime = current_time;
//draw_texture_flush();

iddd = 0;

global.headerX = 30;
global.headerY = 30;

global.progressBarWidth = 220;
global.progressBarHight = 30;



global.showScoreComplete = 0;

if( room != room_loading)
    var hud = instance_create(100, 100 , obj_hudParent);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.SendingPingEnable == true)
{
    requestAddress = global.baseUrl + "Authentication/ping";
    
    var temptemp = http_get(requestAddress);
    ds_map_add(global.reqMap, temptemp, "Ping");
    global.pingLastSendTime   = current_time;
    alarm[11] = room_speed * 2; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed(vk_backspace)
{
    if(room == room_black)
    {
        game_end();
    }
    else if(room == room_loading)
    {
        game_end();
    }
    else if(room == rm_gameWorld)
    {
    }
    else if(room == room_exam_new)
    {
    }
    else if(room == room_levelSelection)
    {
        game_end();
    }
    else
    {
        with(obj_map)
        {
            event_user(0);
        }
    }
}


global.xCenter = view_xview[0] + view_wview[0] / 2;
global.yCenter = view_yview[0] + view_hview[0] / 2;

global.numericalsXScale = view_wview[0] / global.numericalsXDenominator;
global.numericalsYScale = view_hview[0] / global.numericalsYDenominator;


if(global.pingLastSendTime != 0 and (current_time - global.pingLastSendTime) &gt; 1500)
{
    global.pingFailCount += 1;
    global.pingLastSendTime = 0;
    //alarm[11] = room_speed * 2.5;
    if(global.pingFailCount &gt;= 3)
    {
        global.networkIsConnected = 0;
    }
}

if(room != rm_gameWorld  and room!= room_exam_new)
{
    if(global.networkIsConnected == 0)
    {
        if(global.loadingServerExistance == false)
        {
            loading = instance_create(view_xview[0] + view_wview[0]/2  , view_yview[0] + view_hview[0]/2 , obj_loading_server);
            global.loadingServerExistance = true;
        }
    }
    else
    {
        if(object_exists(obj_loading_server))
        {
            with(obj_loading_server)
                {instance_destroy();}
            global.loadingServerExistance = false;
        }
    }
}


var size = ds_map_size(global.checkLoginMap);
var idd  = ds_map_find_first(global.checkLoginMap);

if(size != 0 and ds_map_find_value(global.checkLoginMap, idd) == 0)
{
  
    if((current_time - ds_map_find_value(global.respTimeMap, idd)) &gt; 5000)
    {
        if(global.loginResponseRecieved == false)
        {
            var tempAdr  = ds_map_find_value(global.noRespUrl, idd);
            var tempType = ds_map_find_value(global.noRespType, idd);
            scr_enqueueReqQ(tempAdr, tempType);
        }
        
        ds_map_delete(global.checkLoginMap, idd);
        ds_map_delete(global.respTimeMap, idd);
        ds_map_delete(global.noRespUrl, idd);
        ds_map_delete(global.noRespType, idd);
    }
}


var sendLeaderBoardAgain = 2500;

var size = ds_map_size(global.LB1checkLoginMap);
var idd  = ds_map_find_first(global.LB1checkLoginMap);

if(size != 0 and ds_map_find_value(global.LB1checkLoginMap, idd) == 0)
{
  
    if((current_time - ds_map_find_value(global.LB1respTimeMap, idd)) &gt; sendLeaderBoardAgain)
    {
        var tempAdr  = ds_map_find_value(global.LB1noRespUrl, idd);
        var tempType = ds_map_find_value(global.LB1noRespType, idd);
        scr_enqueueReqQ(tempAdr, tempType);
        
        ds_map_delete(global.LB1checkLoginMap, idd);
        ds_map_delete(global.LB1respTimeMap, idd);
        ds_map_delete(global.LB1noRespUrl, idd);
        ds_map_delete(global.LB1noRespType, idd);
    }
}


var size = ds_map_size(global.LB2checkLoginMap);
var idd  = ds_map_find_first(global.LB2checkLoginMap);

if(size != 0 and ds_map_find_value(global.LB2checkLoginMap, idd) == 0)
{
  
    if((current_time - ds_map_find_value(global.LB2respTimeMap, idd)) &gt; sendLeaderBoardAgain)
    {
        var tempAdr  = ds_map_find_value(global.LB2noRespUrl, idd);
        var tempType = ds_map_find_value(global.LB2noRespType, idd);
        scr_enqueueReqQ(tempAdr, tempType);
        
        ds_map_delete(global.LB2checkLoginMap, idd);
        ds_map_delete(global.LB2respTimeMap, idd);
        ds_map_delete(global.LB2noRespUrl, idd);
        ds_map_delete(global.LB2noRespType, idd);
    }
}


var size = ds_map_size(global.LB3checkLoginMap);
var idd  = ds_map_find_first(global.LB3checkLoginMap);

if(size != 0 and ds_map_find_value(global.LB3checkLoginMap, idd) == 0)
{
  
    if((current_time - ds_map_find_value(global.LB3respTimeMap, idd)) &gt; sendLeaderBoardAgain)
    {
        var tempAdr  = ds_map_find_value(global.LB3noRespUrl, idd);
        var tempType = ds_map_find_value(global.LB3noRespType, idd);
        scr_enqueueReqQ(tempAdr, tempType);
        
        ds_map_delete(global.LB3checkLoginMap, idd);
        ds_map_delete(global.LB3respTimeMap, idd);
        ds_map_delete(global.LB3noRespUrl, idd);
        ds_map_delete(global.LB3noRespType, idd);
    }
}


 //////////alaki//////////////////
/*if(os_is_network_connected())
{
}
checknet++;
if(checknet mod 60 == 0)
    show_message("network:" + string(os_is_network_connected()) + "----");
if(checknet == 1000)
    checknet = 0;*/
/////////////end of alaki////////////////    
    
if(!ds_queue_empty(global.htpReqAddress))
{
    var reqAdr = ds_queue_dequeue(global.htpReqAddress);
    var reqType= ds_queue_dequeue(global.htpReqType);
    
    
    check = true;
    var temptemp =ds_map_find_value(global.mustNetworkConnectedRequests, reqType)
    if !is_undefined(temptemp)
    {
        if(global.firstTimeSetPing == true)
        {
            global.SendingPingEnable = true;
            global.firstTimeSetPing  = false;
            check = false;
            ds_queue_enqueue(global.htpReqAddress , reqAdr);
            ds_queue_enqueue(global.htpReqType    , reqType);
            alarm[11] = room_speed / 2;        
        }
        else
        {
            if(global.SendingPingEnable == true)
            {
                check = false;
                ds_queue_enqueue(global.htpReqAddress , reqAdr);
                ds_queue_enqueue(global.htpReqType    , reqType);                
            }
            else
            {
                global.firstTimeSetPing  = true;
                check = true;
            }
        }
    }
    
        
    if(check == true)
    {
        /*if(reqType == "checkVersion")
            var temp = http_get("http://192.69.208.200/504gameserver-V1.0/index.php/Game/userGameResult?gstate=1,move,7,score,560,time,1.3,1,2,star,0,0,0,vocab,ABANDON+p,2,2,0,2,ABANDON,1,1,0,DATA+p,1,0,1,2,DATA,2,0,1,GALLANT+p,0,1,1,2,GALLANT,0,2,1&amp;PS=40111,game,1250,feedback,11320&amp;Auth=QoKfN13Cxp8nmrJzhBe6YW7Mydv0HAF,emad");
        else*/
        var temp   = http_get(reqAdr);
        ds_map_add(global.reqMap, temp, reqType);
        
        //show_message("reqType = " + string(reqType) + " sent");
    
        if(reqType == "login")
        {
            ds_map_add(global.checkLoginMap, temp, false);
            ds_map_add(global.respTimeMap, temp, current_time);
            ds_map_add(global.noRespUrl, temp, reqAdr);
            ds_map_add(global.noRespType, temp, reqType);
        }
        
        if(reqType == "checkVersion")
        {
            ds_map_add(global.checkLoginMap, temp, false);
            ds_map_add(global.respTimeMap, temp, current_time);
            ds_map_add(global.noRespUrl, temp, reqAdr);
            ds_map_add(global.noRespType, temp, reqType);
        }
        
        if(reqType == "LB_lastTPeriod")
        {
            ds_map_add(global.LB1checkLoginMap, temp, false);
            ds_map_add(global.LB1respTimeMap, temp, current_time);
            ds_map_add(global.LB1noRespUrl, temp, reqAdr);
            ds_map_add(global.LB1noRespType, temp, reqType);
        }
        
        if(reqType == "LB_Total")
        {
            ds_map_add(global.LB2checkLoginMap, temp, false);
            ds_map_add(global.LB2respTimeMap, temp, current_time);
            ds_map_add(global.LB2noRespUrl, temp, reqAdr);
            ds_map_add(global.LB2noRespType, temp, reqType);
        }
        
        if(reqType == "LB_league")
        {
            ds_map_add(global.LB3checkLoginMap, temp, false);
            ds_map_add(global.LB3respTimeMap, temp, current_time);
            ds_map_add(global.LB3noRespUrl, temp, reqAdr);
            ds_map_add(global.LB3noRespType, temp, reqType);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var idd             = ds_map_find_value(async_load, 'id');
var rType           = ds_map_find_value(global.reqMap, idd);
ds_map_delete(global.reqMap, idd);

var url_result  = ds_map_find_value(async_load, 'result');var http_status = ds_map_find_value(async_load, 'http_status');
var status      = ds_map_find_value(async_load, 'status');

if(string_length(url_result) &gt;= 2)
    url_result = string_copy(url_result, 2, string_length(url_result)-2);
else
    url_result = "$$$";

//show_message("response: " + string(url_result) + " rtype : " + string(rType));

var digest = string_char_at(url_result,0);
var checkValidation = string_pos(string(digest), "1234567890");

if(checkValidation != 0)
{
switch (string(rType))
{
    case "login":
        
        
        global.userProgressEnable    = true;
        global.userPointEnable       = true;
        
        global.userBadgeEnable       = true;
        global.userLeaderboardEnable = true;
        global.userFeedbackEnable    = true;
        
        ds_map_delete(global.checkLoginMap, idd);
        ds_map_delete(global.respTimeMap, idd);
        ds_map_delete(global.noRespUrl, idd);
        ds_map_delete(global.noRespType, idd);
        
        if(digest != "2")
        {
            //global.ErrorInLogin = 1;
            // TODO : ask user to login later.

        }else if(global.loginResponseRecieved == false)
        {
            global.loginResponseRecieved = true;
            var userGames   = scr_get_substr_between(url_result,"gameLog","badgeLog");
            
            global.threeStarOfLevels[0]     = 0;
            global.threeStarOfLevels        = scr_getLevelsStars(userGames,global.threeStarOfLevels);
            global.userGameScores[0]        = 0;
            //score and index of last level:
            global.userGameScores           = scr_getLevelsScores(userGames,global.userGameScores);
            global.userGameTimes[0]         = 0;
            global.userGameTimes            = scr_getLevelsTimes(userGames,global.userGameTimes);
            


            var tempUserBadges   = scr_get_substr_between(url_result,"badgeLog","examLog");
            scr_update_user_badges(tempUserBadges);

//            scr_show_array(global.userBadges);
            
            var userExams     = scr_get_substr_between(url_result,"examLog","userData");
            userExamsArray[0] = 0;
            userExamsArray    = scr_between_comma_array(userExams, userExamsArray,",");
            //global.userExamScores[0] = 0;
            //global.userExamScores = scr_get_exams_scores(userExamsArray, global.userExamScores);
            global.examPoints[0] = 0;
            global.examPoints    = scr_get_exams_scores(userExamsArray, global.examPoints);
            global.examCardAskedTimes[0] = 0;
            global.examCardAskedTimes = scr_get_exams_counts(userExamsArray, global.examCardAskedTimes);
            //global.userExamCounts = scr_get_exams_counts(userExamsArray, global.userExamCounts);
            global.examsVocab[0] = "null";
            global.examsVocab = scr_get_exams_vocab(userExamsArray, global.examsVocab);
            
            //map from vocabs to "number of their appearance in exam" 
            examLength = array_length_1d(global.examCardAskedTimes);
            
            if(examLength &gt; array_length_1d(global.examsVocab))
                examLength = array_length_1d(global.examsVocab);
                
            global.vocabInExamAppearanceNum = ds_map_create();
            for (i=0; i&lt;examLength i+=1)
            {
                ds_map_add (global.vocabInExamAppearanceNum , global.examsVocab[i] , global.examCardAskedTimes[i]);
            }


            
            
            var tempUserPtype   = scr_get_substr_between(url_result,"userPtype","gameAdaption");
            userPtypeArray[0]   = 0;
            userPtypeArray      = scr_between_comma_array(tempUserPtype, userPtypeArray,",");
            
            
            global.userPersonality = "";
            for(var i=0;i&lt; array_length_1d(userPtypeArray);i++)
            {
                global.userPersonality += string(userPtypeArray[i]);
            }
            
            global.personalityTypeNum = scr_MBTI_2_index();
            
            
            var tempUserGameAdaption   = scr_get_substr_between(url_result,"gameAdaption","VocabForExam");
            userGameAdaption[0]   = 0;
            userGameAdaption      = scr_between_comma_array(tempUserGameAdaption, userGameAdaption,",");
            
            global.userLeaderboardEnable = false;
            global.userBadgeEnable       = false;
            global.userFeedbackEnable    = false;            
            
            if(string_length(string(tempUserGameAdaption)) &gt; 0)
            {   
                if(real(userGameAdaption[0]) == 1) // badge
                {
                    global.userBadgeEnable = true;
                }
                
                if(real(userGameAdaption[1]) == 1) // leaderboard
                {
                    global.userLeaderboardEnable = true;
                }
                
                if(real(userGameAdaption[2]) == 1) // feedback
                {
                    global.userFeedbackEnable = true;
                }
            }
            
            
            /////////TODO
            global.userLeaderboardEnable = true;
            global.userBadgeEnable       = true;
            global.userFeedbackEnable    = true; 
            /////////end TODO
            
            
            
            var userData     = scr_get_substr_between(url_result,"userData","totalRank");
            scr_update_user_data(userData);
            
            
            var examsVocab         = scr_get_substr_between(url_result,"VocabForExam","loginPS");

            userVocabsForExam[0]   = -1;
            userVocabsForExam      = scr_between_comma_array(examsVocab, userVocabsForExam,",");
            scr_set_userExamList_data(userVocabsForExam);


            var userPSlogin        = scr_get_substr_between(url_result,"loginPS","endend");
            userPSloginArray[0]    = -1;
            userPSloginArray       = scr_between_comma_array(userPSlogin, userPSloginArray,",");
            
            global.userLoginProgressScore  = real(userPSloginArray[0]);
            global.userLoginStrike         = real(userPSloginArray[1]);

            
            global.loginUniqueId           = scr_get_substr_between(url_result,"loginUid","gameLog");
            
            
            var tempUserLBDataString = scr_get_substr_between(url_result,"totalRank","userPtype");
            tempUserLBDataArray[0]    = -1;
            tempUserLBDataArray       = scr_between_comma_array(tempUserLBDataString, tempUserLBDataArray,",");
            
            if(global.userLeaderboardEnable == 1)
                scr_update_user_leaderboard_data(tempUserLBDataArray);
            
            scr_set_notificationOfLeagueEnd();
            
            if(file_exists("game504Data.ini"))
            {
                ini_open("game504Data.ini");
                ini_write_string('Authentication','loginUniqueId',global.loginUniqueId);
                //show_message(global.loginUniqueId)
                ini_close();
            }
            
            global.loginGotoMain = 1;
            
            scr_load_sound();
            scr_dailyPushNotification_epicBeforLunch();


        }
    break;
    
    case "register":
        //digest = "1"; // this line is for test
        if(digest != "5")
        {
            with(obj_registerSubmit) //active submit key
                {drawPressed = 0;}
                
            switch(digest)
            {
                case "0"://parameter error
                        with(obj_registerField)
                        {
                            if(type == 2)
                            {
                                id.edit = 3;
                                id.totalError = "parameter"; 
                            }
                        }
                        global.text_input_email = "";
                        global.text_input_username = "";
                break;
                
                case "1"://you are loged in
                        with(obj_registerField)
                        {
                            if(type == 2)
                            {        
                                id.edit = 3;
                                id.totalError = "duplication"; 
                            }
                        }
                        global.text_input_email = "";
                        global.text_input_username = "";
                break;
                
                case "2"://email format is incorrect
                        with(obj_registerField)
                        {
                            if(type == 2)
                            {
                                id.edit = 1;
                                id.emailError = "validity"; 
                            }
                            if(type == 1)
                            {
                                id.edit =  3;
                            }
                        }
                        global.text_input_email = "";
                break;
                
                case "3":// email is used befor
                        with(obj_registerField)
                            {
                                if(type == 2)
                                {
                                    id.edit = 1;
                                    id.emailError = "used"; 
                                }
                                if(type == 1)
                                {
                                    id.edit =  3;
                                }
                            }
                        global.text_input_email = "";
                break;
                
                case "4"://failear
                        with(obj_registerField)
                            {
                                if(type == 2)
                                {
                                    id.edit = 3;
                                    id.totalError = "failure"; 
                                } 
                            }
                        global.text_input_email = "";
                        global.text_input_username = "";
                break;
            }//end of switch
        }// end of if(digest != "5")
        else
        {

            ini_open("game504Data.ini");
            global.deviceId      = scr_get_substr_between(url_result,"userUniqueId","username");
            global.username      = scr_get_substr_between(url_result,"username","userLoginId");
            global.loginUniqueId = scr_get_substr_between(url_result,"userLoginId","endend");

            ini_write_string('Authentication','deviceId',global.deviceId);
            ini_write_string('Authentication','username',global.username);
            ini_write_string('Authentication','loginUniqueId',global.loginUniqueId);
            
            ini_write_string('Tutorial','lvlSelection',"0");
            ini_write_string('Tutorial','badge',"0");
            ini_write_string('Tutorial','leaderboard',"0");
            ini_write_string('Tutorial','game',"0");
            ini_write_string('Tutorial','exam',"0");
            
            ini_close();
            
            global.registerOK = 1;
        }
    break;
    
    case "exam":
        if(digest != "3")
        {
            global.ErrorInExam = 1;
        }else
        {

            var userData   = scr_get_substr_between(url_result,"userData","totalRank");
            var userBadges = scr_get_substr_between(url_result,"badgeLog","userData");
            var examResult = scr_get_substr_between(url_result,"examLog","badgeLog");
            
            scr_update_user_badges(userBadges);
            scr_update_user_data(userData);

            userExamResultArray[0]   = 0;
            userExamResultArray      = scr_between_comma_array(examResult,userExamResultArray,",");
            
            var vocabId = real(userExamResultArray[0]);
            //global.userExamScores[vocabId] = real(userExamResultArray[3]);
            //global.userExamCounts[vocabId] = real(userExamResultArray[2]);
            global.examPoints[vocabId-1]         = real(userExamResultArray[3]);
            global.examCardAskedTimes[vocabId-1] = real(userExamResultArray[2]);
            global.examsVocab[vocabId-1]     = userExamResultArray[1];
            
            
            var tempUserLBDataString = scr_get_substr_between(url_result,"totalRank","endend");
            tempUserLBDataArray[0]    = -1;
            tempUserLBDataArray       = scr_between_comma_array(tempUserLBDataString, tempUserLBDataArray,",");
            scr_update_user_leaderboard_data(tempUserLBDataArray);
            
 
            
        }
    break;
    
    case "gameResult":
        if(digest != "4")
        {
            //show_message("no no no :-)");
            // Error in userGameResult
        }
        else
        {
   
            var gameResult = scr_get_substr_between(url_result,"gameLog","badgeLog");
            var newBadges  = scr_get_substr_between(url_result,"badgeLog","userData");
            var userNewData= scr_get_substr_between(url_result,"userData","totalRank");
            
            gameResultArray[0] = 0;
            gameResultArray    = scr_between_comma_array(gameResult, gameResultArray,",");
            var gid            = real(gameResultArray[1]);
            global.threeStarOfLevels[3*(gid-1)]          = real(gameResultArray[4]);
            global.threeStarOfLevels[3*(gid-1)+1]        = real(gameResultArray[5]);
            global.threeStarOfLevels[3*(gid-1)+2]        = real(gameResultArray[6]);
            global.userGameScores[gid-1]                   = gameResultArray[3];
            global.userGameTimes[gid-1]                    = gameResultArray[2];
            


            scr_update_user_badges(newBadges);
            
            scr_update_user_data(userNewData);
            
            
            var tempUserLBDataString = scr_get_substr_between(url_result,"totalRank","VocabForExam");
            tempUserLBDataArray[0]    = -1;
            tempUserLBDataArray       = scr_between_comma_array(tempUserLBDataString, tempUserLBDataArray,",");
            scr_update_user_leaderboard_data(tempUserLBDataArray);
            
            var examsVocab         = scr_get_substr_between(url_result,"VocabForExam","endend");

            userVocabsForExam[0]   = -1;
            userVocabsForExam      = scr_between_comma_array(examsVocab, userVocabsForExam,",");
            scr_set_userExamList_data(userVocabsForExam);
        }
    break;
    
    case "LB_league":
    
    
        ds_map_delete(global.LB3checkLoginMap, idd);
        ds_map_delete(global.LB3respTimeMap, idd);
        ds_map_delete(global.LB3noRespUrl, idd);
        ds_map_delete(global.LB3noRespType, idd);
    
        if(digest != "4")
        {
            //show_message("Error in Leaderboad league");
        }else
        {
            var leaderbResult         = scr_get_substr_between(url_result,"leaderboard","endend");

            tempResulta[0]             = 0;
            tempResulta                = scr_between_comma_array(leaderbResult, tempResulta, ",");
            
            global.LeaderboardResultArray[0] = 0;
            global.userRank[0] = 0;
            for(var i =0;i&lt;array_length_1d(tempResulta);i++)
            {
                if(i&gt;3)
                    global.LeaderboardResultArray[i-4] = tempResulta[i];
                else
                {
                    global.userRank[i] = tempResulta[i];
                }
            }
            
            global.itemsLength = floor(array_length_1d(tempResulta)/4)-1;
            
            global.show_lb_list = false;
            with(ui_listbox_ext_modified)
            {
                global.lb_list      = global.LeaderboardResultArray;
                uiMoveToTop = true;
            }
            global.show_lb_list = true;
            
            global.waitTillRankingrecieved = 0;
        }
        
        with(obj_leftSign)
        {
            drawPressed = 0;
        }
        with(obj_rightSign)
        {
            drawPressed = 0;
        }
        
break;
        
    case "LB_Total":
    
    
        ds_map_delete(global.LB2checkLoginMap, idd);
        ds_map_delete(global.LB2respTimeMap, idd);
        ds_map_delete(global.LB2noRespUrl, idd);
        ds_map_delete(global.LB2noRespType, idd);
    
        if(digest != "4")
        {
            //show_message("Error in Leaderboad league");
        }else
        {
            var leaderbResult         = scr_get_substr_between(url_result,"leaderboard","endend");
            tempResultb[0] = 0;
            tempResultb    = scr_between_comma_array(leaderbResult, tempResultb,",");
            
            global.LeaderboardResultArray[0] = 0;
            global.userRank[0] = 0;
            for(var i =0;i&lt;array_length_1d(tempResultb);i++)
            {
                if(i&gt;3)
                    global.LeaderboardResultArray[i-4] = tempResultb[i];
                else
                {
                    global.userRank[i] = tempResultb[i];
                }
            }
            
            global.itemsLength = floor(array_length_1d(tempResultb)/4)-1;
            
            global.show_lb_list = false;
            with(ui_listbox_ext_modified)
            {
                global.lb_list      = global.LeaderboardResultArray;
                uiMoveToTop = true;
            }
            global.show_lb_list = true;
            global.waitTillRankingrecieved = 0;
        }
        
        with(obj_leftSign)
        {
            drawPressed = 0;
        }
        with(obj_rightSign)
        {
            drawPressed = 0;
        }
    break;
    
    case "LB_lastTPeriod":
    
        ds_map_delete(global.LB1checkLoginMap, idd);
        ds_map_delete(global.LB1respTimeMap, idd);
        ds_map_delete(global.LB1noRespUrl, idd);
        ds_map_delete(global.LB1noRespType, idd);
    
        if(digest != "4")
        {
            //show_message("Error in Leaderboad league");
        }else
        {
            var leaderbResult         = scr_get_substr_between(url_result,"leaderboard","remainedTime");
            tempResultc[0] = 0;
            tempResultc    = scr_between_comma_array(leaderbResult, tempResultc,",");
            
            global.LeaderboardResultArray[0] = 0;
            global.userRank[0] = 0;
            for(var i =0;i&lt;array_length_1d(tempResultc);i++)
            {
                if(i&gt;3)
                    global.LeaderboardResultArray[i-4] = tempResultc[i];
                else
                {
                    global.userRank[i] = tempResultc[i];
                }
            }
            
            global.itemsLength = floor(array_length_1d(tempResultc)/4)-1;            
            
            global.show_lb_list = false;
            with(ui_listbox_ext_modified)
            {
                global.lb_list      = global.LeaderboardResultArray;
                uiMoveToTop = true;
            }
            global.show_lb_list = true;
            
            global.waitTillRankingrecieved = 0;  
            
            
            global.leagueRemainedTime = real(scr_get_substr_between(url_result,"remainedTime","endend"));
        }
        
        with(obj_leftSign)
        {
            drawPressed = 0;
        }
        with(obj_rightSign)
        {
            drawPressed = 0;
        }
    
    break;
    
    case "matchingExam":

        if(digest != "3")
        {
        
        }
        else
        {
        // result = 3badgeLog,26,1,2,3,6,8,9,10,17,20,21,22,24,25,userData,398515,3,emadi@gmail.com,179000,0.99,110000,180000,260000,end
       
            var userBadges = scr_get_substr_between(url_result,"badgeLog","userData");
            var userData   = scr_get_substr_between(url_result,"userData","totalRank");
        
            scr_update_user_badges(userBadges);
            scr_update_user_data(userData);
            
            var tempUserLBDataString = scr_get_substr_between(url_result,"totalRank","endend");
            tempUserLBDataArray[0]    = -1;
            tempUserLBDataArray       = scr_between_comma_array(tempUserLBDataString, tempUserLBDataArray,",");
            scr_update_user_leaderboard_data(tempUserLBDataArray);
        
        }
    break;
    
    case "Ping":
        
        if( digest == "1" and url_result == "1PongPong")
        {
            //show_message("ping recieved");
            global.networkIsConnected = 1;
            global.SendingPingEnable = false;
            global.pingFailCount      = 0;
            global.pingLastSendTime   = 0;
        }
    
    break;
    
    case "Questionnarie":
    
    if( digest == "3")
    {
        var gameAdaption     = scr_get_substr_between(url_result,"adaptby","endend");
        gameAdaptionArray[0] = 0;
        gameAdaptionArray    = scr_between_comma_array(gameAdaption, gameAdaptionArray,",");
        
        global.userLeaderboardEnable = false;
        global.userBadgeEnable       = false;
        global.userFeedbackEnable    = false;
        
        if(real(gameAdaptionArray[0]) == 1) // badge
        {
            global.userBadgeEnable = true;
        }
        
        if(real(gameAdaptionArray[1]) == 1) // leaderboard
        {
            global.userLeaderboardEnable = true;
        }
        
        if(real(gameAdaptionArray[2]) == 1) // feedback
        {
            global.userFeedbackEnable = true;
        }
    }    
    
    break;
    
    case "checkVersion":
    
        ds_map_delete(global.checkLoginMap, idd);
        ds_map_delete(global.respTimeMap, idd);
        ds_map_delete(global.noRespUrl, idd);
        ds_map_delete(global.noRespType, idd);
        
        if( digest == "1")
        {
            var versionControlString     = scr_get_substr_between(url_result,"versionControl","endend");
            versionControlArray[0] = 0;
            versionControlArray    = scr_between_comma_array(versionControlString, versionControlArray,",");
            
            global.forceUpdateProgram =  real(versionControlArray[0]);
            global.updateIfYouWant    =  real(versionControlArray[1]); 
            global.versionRequestRicieved = true;
        }
    
    break;
    
    case "badgeTimer":
    
    break;
    
    case "rankingTimer":
    
    break;
    
    case "searchVocab":
    
    break;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>42,22</point>
    <point>42,42</point>
  </PhysicsShapePoints>
</object>
