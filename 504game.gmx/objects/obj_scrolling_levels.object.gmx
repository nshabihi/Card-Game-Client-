<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_angle += 90
// If scroll = true, the user is touching the screen and we are moving the view accordingly
scroll = false;
// prevy stores the touch location from the previous step
prevy = 0;
// momentum keeps track of the speed for momentum after user removes his or her finger
momentum = 0;
// scrolldir is the direction we are scrolling
// 0 = down
// 1 = up
scrolldir = 0;
// usemomentum determines whether or not we use momentum
usemomentum = true;
//check if left pressed contain scrolling or not
scrolling = 0;

global.scrollLevelSelection = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.networkIsConnected ==1)
{
    if(global.scrollLevelSelection == 1)
    {
    if (scroll)
        {
        // We are scrolling
        // Check to see if the user's finger is still on the screen
        if (device_mouse_check_button(0, mb_left))
        {
            // Screen is being touched, we need to scroll
            // Calculate the new location of the touch
            var newy; newy = view_yview[0] - (device_mouse_raw_y(0) - prevy);
            // Set the momentum and scroll direction if momentum is used
            if (usemomentum)
            {
                // Set the momentum
                // The faster the user was moving his or her finger, the more momentum
                momentum = abs(round((device_mouse_raw_y(0) - prevy) /2));
                
                            /*if(momentum != 0 )
                            {
                /*BY NGR*/  //detecting scroll : by NGR
                          /*  scrolling = 1;
                            }*/
                    
                    
                if (device_mouse_raw_y(0) - prevy &gt; 0) { scrolldir = 0; }  // We are scrolling down 
                  else { scrolldir = 1; }   // We are scrolling up
            }  
              // Keep the new location within the dimensions of the room
            if (newy &lt; 0) { newy = 0; }
            if (newy + view_hview[0] &gt; room_height) { newy = room_height - view_hview[0]; }  
              // Set the new location of the view
            view_yview[0] = newy;
            // Store the current touch location to be used for comparison on the next step
            prevy = device_mouse_raw_y(0);
        }
        // Check to see if the uesr removed his or her finger from the screen
        if (device_mouse_check_button_released(0, mb_left))
        {
            // User has removed his or her finger
            prevy = 0; scroll = false;
        }
    }
    else
    {
        // Check to see if the user initiated a touch
        if (device_mouse_check_button_pressed(0, mb_left))
        {
            // User just touched the screen, we are beginning about to scroll
            // Record the current location of the touch to compare on the next step
            scroll = true; prevy = device_mouse_raw_y(0);
        }
        // Check to see if momentum is enabled and there is some remaining
        if (usemomentum &amp;&amp; momentum &gt; 0)
        {
        
            /*BY NGR*/  //detecting scroll : by NGR
                        scrolling = 1;
            
            // There is some momentum. We need to scroll a bit more
            var newy;
            if (scrolldir == 0)
            {
                // We are scrolling down
                newy = view_yview[0] - momentum;
                // Don't scroll beyond the room's dimensions
                if (newy &lt;= 0) { newy = 0; momentum = 0; }
            }
            else
            {
                // We are scrolling down
                newy = view_yview[0] + momentum;
                // Don't scroll beyond the room's dimensions
                if (newy + view_hview[0] &gt;= room_height) { newy = room_height - view_hview[0]; momentum = 0; }
            }
            // Set the new view location
            view_yview[0] = newy;
            // Decrement momentun if &gt; 0
            if (momentum &gt; 0) { momentum /= 1.8; }
        }
    }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
