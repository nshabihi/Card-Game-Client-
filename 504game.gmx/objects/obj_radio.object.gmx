<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_radio</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initializing room
xview = view_xview[0];
yview = view_yview[0];
vwidth = view_wview[0];
vheight = view_hview[0];
///////////////////////
spr_radioWidth = sprite_get_width(spr_radio);
spr_backWidth = sprite_get_width(spr_prevQues);
spr_backHeight = sprite_get_height(spr_prevQues);

setOther_y = false;
alowSelection = true;
global.scrollByAnswer_byNGR = false;
startOfScroll_set = false;
amountOfScroll = 0;
questionary [121] = "null";
for (i= 0 ; i&lt; 121 ; i++)
questionary [i] = "null";
lastScrollPlace = 0;
amountOfTotalScrol = 0;
NB = 6; //number of badge in view

draw_badges_x = 0;
image_alpha = 0;
global.drawQuestion = -1;
///indexes of array questionary is equal to the original question numbers
questionary [1] = ".³nHjÂ¶ ¾«º yÄ¼i nj Hn j¼i œöH¼ø » RIwIveH ¯¼µ÷¶";
questionary [2] = ".³nHm¬Â¶ ·IÃ¶ nj ÂTeHn ¾M » ·Ho«Äj IM Hn j¼i œöH¼ø » RIwIveH ¯¼µ÷¶";
questionary [3] = ".k¹TvÀ ´¿¶ Â¹Ãø » Â÷õ¤ n¼¶H";
questionary [4] = ".k¹TvÀ ´¿¶ IÀ¾ÄoÊº";
questionary [5] = ".´¹¨Â¶ ®µø k¹¨Â¶ ´§e ·A ¾M joi » ¢õ¹¶ ¾¨ ¾`ºA ¾M ÁoÃ¬´Ãµ~U ³I«¹À";
questionary [6] = ".´¹¨Â¶ ®µø kÀjÂ¶ ½H¼¬ ·A ¾M Ïj » ¾ŸöIø ¾¨ ¾`ºA ¾M ÁoÃ¬´Ãµ~U ³I«¹À";
questionary [7] = ".³oÃ«M ´Ãµ~U oiA ÁIÀ¾Êd² nj » ´{IM oÄmQ›Iõ÷ºH ´TvÀ ®ÄI¶";
questionary [8] = ".k{IM ½k{ ÁqÄn¾¶IºoM qÃa ¾µÀ ´TvÀ ®ÄI¶";
questionary [9] = "¢Ãµø Â²» ´¨";
questionary [10] = "Âdõw Â²» jIÄp";
questionary [11] = ".´ÀjÂ¶ nHo¤ ÂwnoM jn¼¶ Hn (jnHj j¼]» ¾¨ ¾`ºA)Â¹Ãø RIÃ÷¤H»";
questionary [12] = ".´ÀjÂ¶ nHo¤ ÂwnoM jn¼¶ Hn (k{IM ¾T{Hj j¼]» kÄIM ¾¨ ¾`ºA)¢ÄI£e";
questionary [13] = ".SwH oT¿M ÏjIø n»Hj » Â†I¤";
questionary [14] = ".SwH oT¿M ·IMo¿¶ ÂMo¶ » ´±÷¶";
questionary [15] = ".´ÀjÂ¶ ³I\ºH ¾ºHjHpA SÃ÷¤¼¶ tIwHoM » kÄA yÃQ ¾¨ n¼ö oÀ Hn j¼i ÁIÀnHkÄj » IÀ RI¤°¶ IdÃ]oU";
questionary [16] = ".´¹¨Â¶ ¸ÃÃ÷U yÃQ pH Hn RI¤°¶ ½kø» » jHoÎH IM nHkÄj IdÃ]oU";
questionary [17] = ".´TvÀ óITd¶ » ›oe´¨";
questionary [18] = ".´¹¨Â¶ K±] j¼i ¾M Hn ·Ho«Äj ¾]¼U";
questionary [19] = ".j¼{ ®¶I{ Hn Â¹Ãø » Â÷õ¤ n¼¶H » RIÃ÷¤H» ¾¨ ´¹¨ uÄnkU Hn Âw»nj ³jHjÂ¶ cÃ]oU ³j¼M ´±÷¶ o¬H";
questionary [20] = ".j¼{ ®¶I{ Hn IÀÁn¼FU » IÀ¾ÄoÊº » ¢ÄI£e ¾¨ ³jo¨Â¶ uÄnkU Hn Âw»nj IdÃ]oU ³j¼M ´±÷¶ o¬H";
questionary [21] = "nH¼TwH » ´§d¶ ÍöI¤";
questionary [22] = "œÃõ² » ´Ä°¶ oÄmQ›Iõ÷ºH";
questionary [23] = ".´¹¨Â¶ x¼¶HoÎ Hn ÂGq] » ½jITÎH IQyÃQ ÁIÀnI¨ ³I\ºH IL²Iü";
questionary [24] = ".´¹¨Â¶ S{HjjIÄ Hn IÀ·A IÀnI¨ ³I\ºH ·k{ x¼¶HoÎ pH ÁoÃ¬¼±] n¼Ê¹¶ ¾M";
questionary [25] = ".k¹ÄIÃM ¸¶ Á¼w ¾M ·Ho«Äj IU ´ºI¶Â¶ oÊT¹¶ IÀÂÄIµÀjo¬ » RIv±] IÀÂºIµ¿¶ nj";
questionary [26] = ".´¹¨Â¶ pIM ·Ho«Äj IM Hn SLd‚ ow ¸¶ IÀÂÄIµÀjo¬ » RIv±] » IÀÂºIµ¿¶ nj";
questionary [27] = "cÄo‚ » b»oz¶ nITŸ¬";
questionary [28] = "ÂMjH ´ÃÀIŸ¶";
questionary [29] = "Áo«º½k¹ÄA » ÁqÄn¾¶IºoM";
questionary [30] = "½k¹ÄA ¾M oTµ¨ ¾]¼U";
questionary [31] = ".³pHjoQÂ¶ pIÃº jn¼¶ ¥nHkU » ÂÄHo]H R¯I§{H ÍÎn ¾M Ho]H ¸Ãe » ´¹¨Â¶ Ì»o{ Hn IÀnI¨ ¯¼µ÷¶";
questionary [32] = ".´ÀjÂ¶ ³I\ºH Hn ÁqÄn¾¶IºoM IÀnI¨ » IÀboö ÁHo]H pH ®L¤";
questionary [33] = "oTzÃM tIµU Â²» oTµ¨ ·ITw»j";
questionary [34] = "oTµ¨ tIµU Â²» oTzÃM ·ITw»j";
questionary [35] = "}hz¶ » Â÷¤H»";
questionary [36] = "¡»l » ®ÃhU ½¼¤ tIwHoM";
questionary [37] = "®Ã²j » ¢õ¹¶";
questionary [38] = "¾ŸöIø » tIveH";
questionary [39] = ".´TvÀ ¢Î¼¶ jnHj pIÃº Án¼Î ®µ÷²Hu§ø » Søow ¾M ¾¨ ÂÄIÀSÃ²I÷Î IM » ½kzº Â¹ÃMyÃQ ®L¤ pH ¾¨ ÂÄIÀnI¨ ³I\ºH nj";
questionary [40] = ".´TvÀ ¢Î¼¶ k{IMÂ¶ ¾¶IºoM » boö tIwHoM ¾¨ ÂÄIÀnI¨ ³I\ºH nj";
questionary [41] = ".³nHj ÁH¾ºIµÃµ‚ ôMH»n Â²» ¾T{Hj Âµ¨ ·ITw»j Ï¼µ÷¶ n¼ö ¾M";
questionary [42] = ".³nHj ÂÄI¹{A » ÂTw»j ÁjIÄp jHoÎH IM Ï¼µ÷¶ n¼ö ¾M";
questionary [43] = ".³nHj ¾]¼U ÁnI] RIÃ÷¤H» » ´±v¶ » Â÷õ¤ n¼¶H ¾M";
questionary [44] = ".´¹¨Â¶ o§Î ÍÄI¤» ®±ø » RI¤IŸUH Â¹ÃMyÃQ ¾M";
questionary [45] = ".SwH ´¨Ie ¸¶ K±¤ oM ¸¶ qû¶";
questionary [46] = ".SwH ´¨Ie ¸¶ qû¶ oM ¸¶ K±¤";
questionary [47] = ".´¹¨ ®µø kÄAÂ¶ yÃQ ¾¨ ÂÄIÀSÄn¼Î » IÀRn»o† Kve oM ´±ÄI¶ ¾ºHp»n ÁIÀnI¨ nj ¯¼µ÷¶";
questionary [48] = ".´¹¨ ®µø ¾¶IºoM ¢Lö ¾¨ ´±ÄI¶ ¾ºHp»n ÁIÀnI¨ nj ¯¼µ÷¶";
questionary [49] = ".´¹¨Â¶ SLd‚ ·Ho«Äj IM oTµ¨ j¼i Âº»nj œöH¼ø » RIwIveH pH";
questionary [50] = ".´¹¨Â¶ ·IÃM SeHn » jHpA Hn j¼i œöH¼ø » nI§ÎH";
questionary [51] = "¢Ã¤j » }hz¶ ¾µ±¨";
questionary [52] = "ÁH¾ÄI¹¨ » Â±ÃXµU ¾µ±¨";
questionary [53] = "œ~¹¶ ³jA";
questionary [54] = "·Hjnk¤ ³jA";
questionary [55] = ".´¹¨Â¶ o§Î ½k¶AyÃQ R°§z¶ ÍÎn ¾M Ho]H ¸Ãe nj » ´¹¨Â¶ Ì»o{ Hn IÀnI¨ ¯¼µ÷¶";
questionary [56] = ".´¹¨Â¶ Â¹ÃMyÃQ Hn R°§z¶ » ½jI¶A Hn nI¨ RI¶k£¶ IÀnI¨ Ì»o{ pH ®L¤ ¯¼µ÷¶";
questionary [57] = "ÁjoÎ ÁIÀnI¨";
questionary [58] = "ÂÀ»o¬ ÁIÀnI¨";
questionary [59] = "IÀ½kÄkQ » (SvÀ ¾¨ ¾`ºA) RIÃ÷¤H»";
questionary [60] = "IÀ½kÄH » (k{IM kÄIM ¾¨ ¾`ºA)¢ÄI£e";
questionary [61] = "›I~ºH » Ïkø"
questionary [62] = "yzhM » ÏmM"
questionary [63] = ".´ºHjÂ¶ ½j¼¿ÃM » WLø ÁnI¨ Hn jHj ³I\ºH ®Ãõ÷U p»n nj kÄIM ¾¨ ÂÄIÀnI¨ pH Swo¿Î ¾Ã¿U "
questionary [64] = ".´ºHjÂ¶ k¹¶j¼w » Ák] nI¨ Hn jHj ³I\ºH ®Ãõ÷U p»n nj kÄIM ¾¨ ÂÄIÀnI¨ pH Swo¿Î ¾Ã¿U"
questionary [65] = ".´¹¨Â¶ ¼«TŸ¬ ´wI¹{Â¶ ®L¤ pH ¾¨ ÁjHoÎH IÄ }h{ IM u²I\¶ IÄ IÀÂºIµ¿¶ nj ¯¼µ÷¶"
questionary [66] = ".³¼{ I¹{A » ½jo¨ ¼«TŸ¬ IÀ·A IM IU ´TvÀ ÁkÄk] |Ih{H ÏILºj ¾M u²I\¶ IÄ IÀÂºIµ¿¶ nj ¯¼µ÷¶"
questionary [67] = ".k¹TvÀ ¸ÃMÍ¤H» » Ho¬Í¤H» HoX¨H ¸¶ ·ITw»j"
questionary [68] = ".kºnHj Á¼¤ ®ÃhU ½¼¤ ¾¨ k¹TvÀ ÂºIv¨ HoX¨H ¸¶ ·ITw»j"
questionary [69] = ".SwH oT¿M k¹¨ jn¼ioM RIøI†¼¶ IM Ï¯kTwH » ®Ä¯j IM ¾¨ ÁjoÎ"
questionary [70] = ".SwH oT¿M k¹¨ jn¼ioM RIø¼†¼¶ IM Áp¼v²j » Â÷¤H» tIveH » ¾ŸöIø IM ¾¨ ÁjoÎ"
questionary [71] = ".´¹¨Âµº kÃ£¶ ·I¶p ½j»kd¶ nj Hn j¼i » ¾TvºHkº }hz¶ » ¸Ã÷¶ S¤»ow IÀnI¨ ³I\ºH ¾M ³q±¶ Hn j¼i IL²Iü"
questionary [72] = ".³pn»Â¶ nHo‚H no£¶ S¤»ow nj IÀ·A ³I\ºH oM » ½jo¨ ¸ÃÃ÷U ¢Ã¤j » }hz¶ n¼ö ¾M Hn j¼i ¾¶IºoM IL²Iü"
questionary [73] = "Hk‚´¨ » ³HnA"
questionary [74] = "ÏI÷Î » óIzº IM"
questionary [75] = ".´{IM ¢Ã¤j » Ho¬Í¤H» ÁjoÎ ³nHj Sw»j"
questionary [76] = ".´{IM ¡°i » o§TL¶ ÁjoÎ ³nHj Sw»j"
questionary [77] = ".³nHj ¾¤°ø RIø¼†¼¶ ®Ã±dU » ¾Äq\U ¾M"
questionary [78] = ".³nHj ¾¤°ø kºpHjoQÂ¶ ÂºIvºH ®GIv¶ ¾M ¾¨ ÂŸöIø ÁIÀWdM » IÀ´±ÃÎ ¾M"
questionary [79] = ".´¹¨Â¶ ½nHjH kÄAÂ¶ yÃQ ¾¨ Â²H¼eH » ÌI†»H ¾M ¾]¼U IM Hn j¼i Â¬kºp ¯¼µ÷¶"
questionary [80] = ".³nIPwÂ¶ oöIi ¾M KUo¶ n¼ö ¾M ®¤Hke IÄ ½jo¨ S{HjjIÄ ´TvÀ ·A ³I\ºH ¾M ®ÄI¶ ¾¨ Hn ÂÄIÀnI¨ ¯¼µ÷¶"
questionary [81] = "›oe ´¨"
questionary [82] = "SLd‚ x¼i"
questionary [83] = "SÃ¹Ãø"
questionary [84] = "SÃ¹Àl"
questionary [85] = ".k¹¨Â¶ nITÎn ¾º°¤Iø ¾¨ o§ŸT¶ ´{IM ÁjoÎ ³nHj Sw»j"
questionary [86] = ".k¹¨Â¶ nITÎn ÂºIvºH RIwIveH IM ¾¨ ÂŸöIø ´{IM ÁjoÎ ³nHj Sw»j"
questionary [87] = ".k¹ºHjÂ¶ ù¼±{ Â¬kºp ÁHnHj » ´ÊºÂM ÁjoÎ Ho¶ jHoÎH Â…÷M"
questionary [88] = ".k¹ºHjÂ¶ ›Iõ÷ºH ®MI¤oÃü » Í¤¼T¶ ÁjoÎ Ho¶ jHoÎH Â…÷M"
questionary [89] = ".´¹¨Â¶ oÊº nI¿ËH ½k{ boõ¶ R¯H¼w IÄ WdM ¾M SLvº ÂÎI¨ ®¶DU » W§¶ pH uQ"
questionary [90] = ".´¹¨Â¶ ³°øH Hn j¼i oÊº IÄ boõ¶ Hn R¯H¼w k{ S‚oÎ ¾¨ ¾Êd² oÀ nj"
questionary [91] = "³I§dTwH » RILY"
questionary [92] = "›Iõ÷ºH » oÃÃûU"
questionary [93] = ".´¹¨Â¶ ½jIŸTwH Ï¯kTwH » Â£õ¹¶ ÁIÀÁoÃ¬¾\ÃTº pH oTzÃM"
questionary [94] = ".´¹¨Â¶ ®µø jHoÎH IÄ Â¬kºp ¾M SLvº Â~h{ kÄI£ø » œöH¼ø tIwH oM oTzÃM"
questionary [95] = ".´¹¨Â¶ ³Hk¤H nIzÎ ·»kM » ¾ºHjHpA IÀnI¨ ³I\ºH ¾¨ SLvº jHj Swj S‚oÎ » j¼M KwI¹¶ ¾¨ S¤» oÀ"
questionary [96] = ".³pHjoPM IÀ·A ³I\ºH ¾M IU kºnHj nIÊTºH ¸¶ pH ÁqÃa ¾a IÄ ÁnI¨ ¾a ´ºHkM ®L¤ pH ¾¨ SwH ´¿¶ ¸ÄH"
questionary [97] = ".³¼{ ÂÎo÷¶ Áo«Äj joÎ ôw¼U jHoÎH Íµ] nj ´ÀjÂ¶ cÃ]oU"
questionary [98] = ".´¹¨Â¶ ÂÎo÷¶ o«Äk§Ä ¾M Hn ·Ho«Äj jHoÎH Íµ] nj ¯¼µ÷¶"
questionary [99] = ".´Àj ³I\ºH Hn IÀnI¨ ½k{ Â¹ÃMyÃQ ®eHo¶ KÃUoU SÄIøn IM ´¹¨Â¶ x°U"
questionary [100] = ".´¹¨Â¶ oÊº¾Îo‚ ·A SÃµÀHÂM ÁIÀSµv¤ pH IÀnI¨ ·jHj ³I\ºH ³I«¹À"
questionary [101] = ".´¹¨Â¶ oÊº nI¿ËH j¼]¼¶ RIø°öH » ÌI†»H ¢Ã¤j ®Ã±dU » ¾Äq\U tIwHoM ´¹¨Â¶ nI¨ IÀ·A IM ¾¨ ÂºI¶pIw jHoÎH IÄ ½»o¬ oÀ ¾M SLvº"
questionary [102] = ".´¹¨Â¶ oÊº nI¿ËH ¸T{Hm¬ IÀ·A ÁI] IM j¼i » ÂºIvºH œöH¼ø ·IzÄIÀpIÃº ¥nj tIwHoM ´¹¨Â¶ nI¨ IÀ·A IM ¾¨ ÂºI¶pIw jHoÎH IÄ ½»o¬ oÀ ¾M SLvº"
questionary [103] = ".³pHjoQÂ¶ oUj»p k{IM ¸§µ¶ ¾¨ ·A pH ÂTµv¤ oÀ ¾M » Ì»o{ Hn ½r»oQ IÄ nI¨ ¦Ä S¤» R¼Î ·»kM ¯¼µ÷¶"
questionary [104] = ".³pHjoQÂ¶ ½k{ }hz¶ ÁIÀyhM ³I\ºH ¾M KÃUoU ¾M uPw » ½jo¨ ´Ãv£U }hz¶ ÁHq]H ¾M Hn IÀ·A IÀnI¨ ³I\ºH nj ¯¼µ÷¶"
questionary [105] = ".³k¹¶¾¤°ø (o«Äj oŸº »j Â§Ä IM oX¨Hke IÄ)ÁjoÎ ÁIÀnI¨ ¾M"
questionary [106] = ".³k¹¶¾¤°ø ÂÀ»o¬ ÁIÀnI¨ ¾M"
questionary [107] = ".SwH ½j¼M }hz¶ nI¨ » }hz¶ ¾¶IºoM ¾M ·kÃLva » ÂTiH¼¹§Ä ¸¶ Â¬kºp ÂwIwH R¯I§{H pH Â§Ä"
questionary [108] = ".SwH ½j¼M jk÷T¶ ÁIÀ¾¶IºoM ¸T{Hj » ·kÄoQ ÁH¾iI{ ¾M ÁH¾iI{ pH ¸¶ Â¬kºp ÂwIwH R¯I§{H pH Â§Ä"
questionary [109] = "·j¼M ÍöI¤"
questionary [110] = "·j¼M ´Ä°¶"
questionary [111] = ".k¹¹¨ ÂTeHn tIveH » ¾T{Hj Hn ³p¯ Â¬jI¶A » n¼…e jHoÎH Â«µÀ ¾¨ j¼{ Ì»o{ Â¶I«¹À IÀÂÄIµÀjo¬ » RIv±] ³k¹µ¤°ø"
questionary [112] = ".³nHj kÃ¨IU ÂwI¹{ S¤» Á»n » j¼{ Ì»o{ no£¶ SøIw tHn RIv±] ¾¨ ³k¹µ¤°ø"
questionary [113] = ".´woM oÊº ¾M Á»q¹¶ » oÃ¬¾{¼¬ ÁjoÎ SwH ¸§µ¶ ·Ho«Äj oÊº pH"
questionary [114] = ".´woM oÊº ¾M Âdõw » ›oeoQ ÁjoÎ SwH ¸§µ¶ ·Ho«Äj oÊº pH"
questionary [115] = ".´ÀjÂ¶ ³I\ºH ¾±eo¶ ¾M ¾±eo¶ » KÃUoU » ´Êº IM Hn IÀnI¨"
questionary [116] = ".´ÀjÂ¶ ³I\ºH oUj»p Hn IÀnI¨ K²I] » ´¿¶ Sµv¤"
questionary [117] = "¢e » Ï¼‚H"
questionary [118] = "S{m¬ » ÂºIMo¿¶"
questionary [119] = ".SvÃº K²I] ¸¶ ÁHoM k{IM ½k{ }hz¶ ®L¤ pH ¾¨ ÁH¾¶IºoM ¾M ·j¼M kÃ£¶"
questionary [120] = ".³nHj SÄI†n tIveH k{IM ½k{ }hz¶ ®L¤ pH ¾¨ ÂÄIÀnI¨ ·jHj ³I\ºH pH"

MBTI_Result[1] = "type1";
MBTI_Result[2] = "type2";
MBTI_Result[3] = "type3";
MBTI_Result[4] = "type4";
MBTI_Result[5] = "type5";
MBTI_Result[6] = "type6";
MBTI_Result[7] = "type7";
MBTI_Result[8] = "type8";
MBTI_Result[9] = "type9";
MBTI_Result[10] = "type10";
MBTI_Result[11] = "type11";
MBTI_Result[12] = "type12";
MBTI_Result[13] = "type13";
MBTI_Result[14] = "type14";
MBTI_Result[15] = "type15";
MBTI_Result[16] = "type16";

/// Initialize Radio Switch

value = false;
instanceNumber=0;
is_focus = false;
is_over = false;
is_selected = false;
image_speed = 0;
image_index = 0;
var n = 2; // number of questionnaire questions

currentID = 0;

global.circle_draw = true;

//questionnarie result 
type1 = 0;
type2 = 0;
type3 = 0;
type4 = 0;
type5 = 0;
type6 = 0;
type7 = 0;
type8 = 0;
global.userPersonality = "";
for (i=1; i&lt;5; i+=1)
{
    Result[i] = ""; //string of user answers for each type
}
userResult = ""; //string to send for server
userResultt = "";

for (i=1; i&lt;5; i+=1)
{
    MBTI[i] = ""; //string of user MBTI types
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//room_goto(room_questionnarieResult);
/*with(obj_radio)
{
    instance_destroy();
}

with(obj_questionariePreviouse)
{
    instance_destroy();
}*/
//global.personalityType = ds_map_find_value(global.MBTI_resultDiscription, "ENFJ");

global.drawQuestion = 2;
//instance_create(10 , 10 , obj_radio);

    //initializing room
    dwidth = ds_map_find_value(global.roomInt , "dwidth");
    dheight = ds_map_find_value(global.roomInt , "dheight");
    xview = ds_map_find_value(global.roomInt , "xview");
    yview = ds_map_find_value(global.roomInt , "yview");
    vwidth = ds_map_find_value(global.roomInt , "vwidth");
    vheight = ds_map_find_value(global.roomInt , "vheight");
    room_set_view(room_questionnarieResult, 0, 1, xview, yview , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
    room_goto(room_questionnarieResult);






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.question_num++;
if(global.question_num == 61)
{

for (i=0 ; i&lt;60 ; i++)
{
    if (i%2 == 0)
    {
        if (global.answer[i]==0 and global.answer[i+1]==0)
            {
            // mark question number c to global.answer the question
            }
    }
}

scr_show_array(global.answer);
for (i=0 ; i&lt;120 ; i++)
{
    if (global.answer[i]==1)
    {
        switch (i%8)
        {
            case 0:     type1++;    Result[1] += ",1";   break;
            case 1:     type2++;    Result[1] += ",2";   break;
            case 2:     type3++;    Result[2] += ",1";   break;
            case 3:     type4++;    Result[2] += ",2";   break;
            case 4:     type5++;    Result[3] += ",1";   break;
            case 5:     type6++;    Result[3] += ",2";   break;
            case 6:     type7++;    Result[4] += ",1";   break;
            case 7:     type8++;    Result[4] += ",2";   break;
        }
    }
}



if (type1 &gt; type2)
        {global.userPersonality = "I";      MBTI[1] = "I";  global.personalityTypeNum+=8;}
else    
        {global.userPersonality = "E";      MBTI[1] = "E";  }

if (type3 &gt; type4)
        {global.userPersonality += "S";     MBTI[2] = "S"; global.personalityTypeNum+=4;}
else    
        {global.userPersonality += "N";     MBTI[2] = "N";}

if (type5 &gt; type6)
        {global.userPersonality += "T";     MBTI[3] = "T";  global.personalityTypeNum+=2;}
else    
        {global.userPersonality += "F";     MBTI[3] = "F";}

if (type7 &gt; type8)
        {global.userPersonality += "P";     MBTI[4] = "P";  global.personalityTypeNum+=1;}
else    
        {global.userPersonality += "J";     MBTI[4] = "J";}
    
userResult = "";
for (i=1; i&lt;5; i++)
{
    userResult += string(i);
    userResult += Result[i];
    userResult += ",";
    userResult += MBTI[i];
    userResult += ",";
}

questionnarieTimes = "";
for(i=0 ; i&lt;60 ; i++)
{
    questionnarieTimes += string(global.timer_questionnarie[i+1]);
    if(i!=59)
        questionnarieTimes += ",";
}

userResult += string(global.age);
userResult += ",";
userResult += string(global.gender);


requestAddress  = global.baseUrl+"Questionnaire/Qresult?";
requestAddress += "Auth="+string(global.deviceId)+","+string(global.username);
requestAddress += "&amp;userResult=" + string(userResult);
requestAddress += "&amp;userResultTime=" + string(questionnarieTimes);

//show_message(requestAddress);
scr_enqueueReqQ(requestAddress,"Questionnarie");


scr_enqueueReqQ(global.baseUrl+"Questionnarie/Qresult?userResult=" +userResult , "Questionnarie");
//show_message(userResult);
//initializing room
    dwidth = ds_map_find_value(global.roomInt , "dwidth");
    dheight = ds_map_find_value(global.roomInt , "dheight");
    xview = ds_map_find_value(global.roomInt , "xview");
    yview = ds_map_find_value(global.roomInt , "yview");
    vwidth = ds_map_find_value(global.roomInt , "vwidth");
    vheight = ds_map_find_value(global.roomInt , "vheight");
    room_set_view(room_questionnarieResult, 0, 1, xview, yview , vwidth, vheight, 0, 0, dwidth, dheight, 0, 0, 0, 0, -1);
    room_goto(room_questionnarieResult);
    
    

    //alarm[1] = room_speed * 0.2;
}

else
{
    
    with(global.radioID[0]) { instance_destroy(); }
            
    with(global.radioID[1]) { instance_destroy(); }
    
    //initializing room
    dwidth = ds_map_find_value(global.roomInt , "dwidth");
    dheight = ds_map_find_value(global.roomInt , "dheight");
    xview = ds_map_find_value(global.roomInt , "xview");
    yview = ds_map_find_value(global.roomInt , "yview");
    vwidth = ds_map_find_value(global.roomInt , "vwidth");
    vheight = ds_map_find_value(global.roomInt , "vheight");
    //end of initializing room

    for (i=0; i&lt;2; i++)
    {
        var radioBtn = instance_create(xview + vwidth - 100 , yview + 80 + 60*i , obj_radio);
        radioBtn.num = i;
        global.radioID[i] = radioBtn.id;
        
        if(i==0)
            radioBtn.positionSeted = true;
        else
            radioBtn.positionSeted = false;
        global.radioID[i] = radioBtn.id;
        
        
        if(global.answer[2*(global.question_num) + i] == 1)
            radioBtn.value = true;
        else
            radioBtn.value = false;
    } 
    
    /// Initialize Radio Switch
    global.drawQuestion= -1;
    instanceNumber=0;
    is_focus = false;
    is_over = false;
    image_speed = 0;
    image_index = 0;
    var n = 2; // number of questionnaire questions
    currentID = 0;
    //global.question_num++;
    if(global.lastQuestion &lt; global.question_num)
    global.lastQuestion = global.question_num;
    draw_badges_x = global.question_num;
    alowSelection = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Radio Unfocused

is_focus = false;
//is_selected = false;
alowSelection = true;
if (is_over) image_index = 1;
else image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Regular Radio

is_over = false;

if (!is_focus)
    image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Highlight Radio

is_over = true;

if (!is_focus)
    image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for (j= 0 ; j&lt;2 ; j++)
{
    if (global.radioID[j] == id)    
    {
        currentID = j; //detecting radio numeral
    }
}  */
if(global.radioID[0].is_selected == false and global.radioID[1].is_selected == false)
if (is_focus == true)
{ 
   
    for (j= 0 ; j&lt;2 ; j++)
    {
        if (global.radioID[j] == id)    
        {
            currentID = j; //detecting radio numeral
        }
    } 
        
    is_focus = false;
    is_selected = true;
    
    if (currentID % 2 == 1)   //if current radio's number is odd...
    {   
        global.answer[2*(global.question_num - 1) + currentID-1] = 0;  // make the global.answer for previous radio = 0, 
        global.answer[2*(global.question_num - 1) + currentID] = 1;

        with (global.radioID[currentID-1]) { value = false;  }
        global.questionnarieBadge[global.question_num] = 1;
    }
    else if (currentID % 2 == 0)
    { 
        global.answer[2*(global.question_num - 1) + currentID+1] = 0;
        global.answer[2*(global.question_num - 1) + currentID] = 1;
        
        with (global.radioID[currentID+1]) { value = false;  }
        global.questionnarieBadge[global.question_num] = 1;
    }
    
    
    global.timer_questionnarie[global.question_num]=global.timer_quest;
    with(obj_timer_questionnarie)
    {
        event_user(0);
    }
    
    //show_message(global.question_num);
    //show_message(global.timer_questionnarie[global.question_num]);
    
    
    audio_play_sound(snd_questionary, 1,false);
    audio_sound_gain(snd_questionary, global.CardVObj_X/200, 50);

    //if(global.question_num &gt; 5)
        global.scrollByAnswer_byNGR = true; // sending scroll response to ui_listbox_horz_modified
    global.drawQuestion = 1;
    if(global.question_num &lt;60)
        alarm[0] = room_speed*1;
    else if(global.question_num == 60)
        alarm[0] = room_speed*0.1;
    image_alpha = scr_questionnarieAlpha(image_alpha);
    value = true;
    global.circle_draw = true;
    
    if(global.lastQuestion  == global.question_num)
    {
        randomize();
        rand = random(global.puzzleArrayLength);
        global.PuzzlePieceId = global.randPuzzle[rand];
        for(i=rand; i&lt;global.puzzleArrayLength ; i++)
            global.randPuzzle[i] = global.randPuzzle[i+1];
        global.puzzleArrayLength --;
        global.hidePuzzle = 1; 
    } 
    //scr_show_array(global.randPuzzle);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Radio Focused
//NET
{
    if(global.radioID[0].is_selected == false and global.radioID[1].is_selected == false)
        //if(alowSelection == true)
        {
            is_focus = true;
            image_index = 2;
            alowSelection = false;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.question_num&lt;61 and global.question_num &gt;0)
{
    
    questionNum = global.question_num;
    questionLabel = questionary[(questionNum-1)*2 + num +1];
    firstLine = questionLabel;
    secondLine = " ";
    counter = 0;
    multipleLine = false;
    str="";
    validLength=800;
    
    if(string_width(questionLabel) &gt; validLength)
        {
        secondLineLength = string_width(questionLabel) - validLength;
        multipleLine = true;
        }
    else
        secondLineLength = 0;
    
        
    flag = false;
    set = false;   
    checkWidth = false;
    firstChar = true;
    if(multipleLine == true)
    for(i=0 ; i&lt;string_length(questionLabel) ; i++)
    {
        if(flag == false)
        {
            str = string_copy(questionLabel , i , 1);
            if(firstChar == true)
            secondLine += string_copy(questionLabel , i , 1);
    
            if(str == " ")
                checkWidth = true;
        }
        if(secondLineLength &lt; string_width(secondLine) and checkWidth == true)
        {
            if(set = false)
            {
                flag = true;
                firstLine = string_copy(questionLabel , i+1 , string_length(questionLabel));
                secondLine = string_copy(secondLine , 3 , string_length(secondLine));
                set = true;
            }
        }
        else
            checkWidth = false;
    }            
    
    var gap1 = 60;
    var gap2 = 40
    if(global.radioID[0] == id)
    {
        y = room_height/2 - (gap1/2 + gap2);
        yy = y;
        yy1 = -30;
    }
    else if(global.radioID[1] == id)
    {
        y = room_height/2 + (gap1/2);
        yy = y;
        yy1 = -30;
    }

    /// Draw Radio
    draw_set_font(font2/*_questionnarie*/);
    if(multipleLine == true)
    {
        yy1=yy + 40;
    }
    x= 1140-(1140 - (validLength + 50))/2;
    xx= x - 50;
    gap1 = 60;
    gap2 = 100;
    NB = 6; //number of badge in view
    // draw_text(200 , 200 , xx);
    // draw_text(200 , 230 , y);
    //col = make_color_rgb(254,248,203); // rectangle color
    //draw_set_color(col);
    //draw_clear_alpha(col, 0.2);
    //draw_roundrect_color((vwidth-validLength+20)/2 , vheight/2 - (gap1/2 + gap2+10) ,vwidth-(vwidth-validLength+20)/2 , vheight-(vheight/2 - (gap1/2 + gap2+10)) , col , col , false );
    if(global.radioID[1] == id)
    {
        draw_set_alpha(0.6);
        draw_roundrect_color(   (1140 - (validLength + 50 + spr_radioWidth/2))/2 , (720-140)/2 - 25,
                                1140-(1140 - (validLength + 50 + spr_radioWidth))/2 , (720-140)/2 +140+25  , c_white , c_white , false );
    
        draw_roundrect_color(   (1140 - (validLength + 50 + spr_radioWidth/2))/2 , (720-140)/2 +140+28,
                                (1140 - (validLength + 50 + spr_radioWidth/2))/2 + spr_backWidth*0.8 , (720-140)/2 +140+25+spr_backHeight*0.8  , c_white , c_white , false );
    
        draw_set_color(c_white);
        draw_circle(1140-(1140 - (validLength + 150 + spr_radioWidth))/2 , (720-140)/2 +70 , 30 , false);
        draw_set_color(c_black);
        draw_set_alpha(1);
        
    }
    
    draw_set_color(c_black);  // text color
    draw_set_halign (fa_center);
    draw_set_valign (fa_middle);
    draw_text(1140-(1140 - (validLength + 150 + spr_radioWidth))/2 , (720-140)/2 +70 , questionNum);   
    if(questionNum &lt; 61)                                   
    switch (global.drawQuestion)
    {        
        case -1:
            // Radio
            draw_sprite_ext(spr_radio , image_index , x , y , 1 , 1 , 0 , -1 , image_alpha);
            
            // Circle
            if (value == true &amp;&amp; global.circle_draw == true)
                draw_sprite_ext(spr_circle , 0 , x , y , 1 , 1 , 0 , -1 , image_alpha);
                
            // Label
            draw_set_halign(fa_right);
            //for (i=1 ; i&lt;3 ; i++)
            {
                draw_text_transformed_color(xx, yy , firstLine,
                                             1, 1, 0, c_black, c_black, c_black, c_black, image_alpha);
                draw_text_transformed_color(xx, yy1 , secondLine,
                                                 1, 1, 0, c_black, c_black, c_black, c_black, image_alpha);
            }
            image_alpha += 0.05;
            // 1 - scr_questionnarieAlpha(image_alpha);
            if(image_alpha == 1)
                global.drawQuestion = 0;
        
        break;
        
        
        case 0:
            // Radio
            draw_sprite_ext(spr_radio , image_index , x , y , 1 , 1 , 0 , -1 , 1);
            
            // Circle
            if (value == true &amp;&amp; global.circle_draw == true)
                draw_sprite_ext(spr_circle , 0 , x , y , 1 , 1 , 0 , -1 , 1);
                
            // Label
            draw_set_halign(fa_right);
                draw_text_transformed_color(xx, yy , firstLine,
                                             1, 1, 0, c_black, c_black, c_black, c_black, 1); 
                draw_text_transformed_color(xx, yy1 , secondLine,
                                             1, 1, 0, c_black, c_black, c_black, c_black, 1); 
                                                     
        break;
    
        case 1:
            // Radio
            draw_sprite_ext(spr_radio , image_index , x , y , 1 , 1 , 0 , -1 , image_alpha);
            
            // Circle
            if (value == true &amp;&amp; global.circle_draw == true)
                draw_sprite_ext(spr_circle , 0 , x , y , 1 , 1 , 0 , -1 , image_alpha);
                
            // Label
            draw_set_halign(fa_right);
            //for (i=1 ; i&lt;3 ; i++)
            {
                draw_text_transformed_color(xx, yy , firstLine,
                                             1, 1, 0, c_black, c_black, c_black, c_black, image_alpha);
                draw_text_transformed_color(xx, yy1 , secondLine,
                                                 1, 1, 0, c_black, c_black, c_black, c_black, image_alpha);
            }
            image_alpha = scr_questionnarieAlpha(image_alpha);
        break;   
    
        case 10:
            // Radio
            draw_sprite_ext(spr_radio , image_index , x , y , 1 , 1 , 0 , -1 , 1);
            
            // Circle
            if (value == true &amp;&amp; global.circle_draw == true)
                draw_sprite_ext(spr_circle , 0 , x , y , 1 , 1 , 0 , -1 , 1);
                
            // Label
            draw_set_halign(fa_right);
            //for (i=1 ; i&lt;3 ; i++)
                draw_text_transformed_color(xx, yy , firstLine,
                                          1, 1, 0, c_black, c_black, c_black, c_black, 1);  
                draw_text_transformed_color(xx, yy1 , secondLine,
                                          1, 1, 0, c_black, c_black, c_black, c_black, 1); 
    
    
    }
    
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>34,37</point>
    <point>38,38</point>
  </PhysicsShapePoints>
</object>
